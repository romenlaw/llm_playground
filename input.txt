[{'page': 1,
  'text': '© 2009 Commonwealth Bank of Australia ABN 48 123 123 124. All rights reserved. This document is copyright. No part of it may in any form or \nby any means be reproduced, stored in a retrieval system or transmitted without prior written permission of Commonwealth Bank of Australia. \n\u202f \n \n \n \n \n \n \n \n \n \n \n \n \nFunctional Understanding Document \n                                              Application Name:  Merchant Garnishee Tool \n                                                         CI ID:  MS-Excel Macro Enabled Worksheet \n \n \n                                           Project:  PSU Transformation / Project Noah  \n \n \nConfiguration Management Database (CMDB) ID: CM0993614 \nConfiguration ID (ServiceNow): CI000110145 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nDate Issued \n07/11/2024 \nVersion No. \n1.11 \nStatus \nApproved  \nPrepared By \nGaurav Kumar/Todd Barlow– Project Noah \nSecurity Classification \nConfidential'},
 {'page': 2,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 2 of 214 \n \n\u202f \nTable of Contents \nTable of Contents ....................................................................................................................................................... 2 \nTable of Figures .......................................................................................................................................................... 4 \nDocument Control ...................................................................................................................................................... 5 \nApprovals .................................................................................................................................................................... 8 \nReferences ................................................................................................................................................................... 8 \nGlossary ....................................................................................................................................................................... 8 \nIntroduction ................................................................................................................................................................. 9 \n1.1 \nDocument Purpose ............................................................................................................................. 9 \n1.2 \nScope .................................................................................................................................................. 9 \n1.3 \nAssumptions/Decisions/Constraints ................................................................................................... 9 \n2. \nOverview of the tool ..................................................................................................................................... 10 \n2.1 \nFunctionality of the Excel Macro Tool ............................................................................................... 10 \n2.2 \nBusiness Users ................................................................................................................................. 11 \n3. \nFunctional Flow ............................................................................................................................................ 12 \n3.1 \nFlow diagram .................................................................................................................................... 12 \n3.2 \nFlow process ..................................................................................................................................... 13 \n3.3 \nUpstream Applications ...................................................................................................................... 13 \n3.4 \nDownstream Applications ................................................................................................................. 13 \n4. \nProcess .......................................................................................................................................................... 14 \n4.1 \nView and Process - Merchant Garnishee Tool ................................................................................. 14 \n4.1.1 \nOpen the Merchant Garnishee Tool ................................................................................................. 14 \n4.1.2 \nADD LUT .......................................................................................................................................... 16 \n4.1.3 \nStaff and Email List ........................................................................................................................... 17 \n4.1.4 \nRUN .................................................................................................................................................. 18 \n4.1.5 \nEMAIL - PPS Interaction and Email Generation ............................................................................... 26 \n4.1.6 \nManger/Delegate PPS Bulk Upload File Verification and Approval ................................................. 31 \n4.2 \nNotices Revoked/Withdrawn Garnishee ........................................................................................... 33 \n4.2.1 \nLUT Sheet ......................................................................................................................................... 34 \n4.2.2 \nATO Remaining Amount Sheet ........................................................................................................ 34 \n4.2.3 \nMerchant Garnishee Database ......................................................................................................... 35 \n5. \nQuality Assurance ........................................................................................................................................ 35 \n5.1 \nPerforming a QA ............................................................................................................................... 35 \n6. \nVerifying Reports .......................................................................................................................................... 37 \n6.1 \nVerify PPS ........................................................................................................................................ 37 \n7. \nData at Rest Encryption ............................................................................................................................... 38 \n8. \nAccess Logs ................................................................................................................................................. 40 \n9. \nSQL Query ..................................................................................................................................................... 41 \n10. \nData Flow ....................................................................................................................................................... 42 \n10.1 \nInflow / Outflow of data ..................................................................................................................... 42 \n10.2 \nFrequency of inflow / outflow ............................................................................................................ 42 \n10.3 \nVolume of data .................................................................................................................................. 42 \n10.4 \nSLA ................................................................................................................................................... 42 \n10.5 \nData Structures ................................................................................................................................. 42 \n10.6 \nData encryption ................................................................................................................................. 42 \n11. \nVBA Code – Merchant Garnishee Tool ....................................................................................................... 43 \n11.1 \nLayouts for Forms ............................................................................................................................. 43 \n11.1.1 LUT Form .......................................................................................................................................... 43'},
 {'page': 3,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 3 of 214 \n \n\u202f \n11.1.2 Note Form ......................................................................................................................................... 43 \n11.1.3 Password Form ................................................................................................................................. 44 \n11.1.4 QA Form ........................................................................................................................................... 45 \n11.1.5 SelectDate Form ............................................................................................................................... 45 \n11.1.6 Splash Form ..................................................................................................................................... 46 \n11.1.7 Teradata Form .................................................................................................................................. 46 \n11.2 \nVBA Code for Forms, Modules and Sheets...................................................................................... 46 \n12. \nUser Access Management ......................................................................................................................... 183 \n12.1 \nPassword Management .................................................................................................................. 183 \n12.2 \nAccess Required ............................................................................................................................. 185 \n12.2.1 Adding/Removing Users ................................................................................................................. 185 \n12.2.2 Group Data Warehouse (GDW) Roles ........................................................................................... 187 \n12.2.3 SeleniumBasic Software Install ...................................................................................................... 190 \n12.2.4 Microsoft Edge Driver Install ........................................................................................................... 193 \n12.2.5 Teradata ......................................................................................................................................... 197 \n13. \nSupport ........................................................................................................................................................ 198 \n13.1 \nTeradata Driver Configuration & GDW Data Encryption ................................................................ 198 \n13.1.1 Teradata Driver Configuration ........................................................................................................ 198 \n13.1.2 GDW Data Encryption .................................................................................................................... 202 \n13.1.3 Teradata Driver Configuration without SSO ................................................................................... 204 \n13.2 \nRaising Issues/Incidents & Change Requests ............................................................................... 207 \n13.2.1 Raising Issues/Incidents ................................................................................................................. 207 \n13.2.2 Completing a Change Request Template ...................................................................................... 208 \n13.3 \nSupporting - ASR Block Event Troubleshooting Guide .................................................................. 210 \n13.4 \nRequesting an Exemption for ASR Block ....................................................................................... 211 \n13.5 \nAutomation Error ............................................................................................................................. 212 \n14. \nAppendix ..................................................................................................................................................... 213 \n14.1 \nSpreadsheet Password Register .................................................................................................... 213 \n14.2 \nMerchant Garnishee PKW Model ................................................................................................... 213 \n14.3 \nChange Request Template ............................................................................................................. 213 \n14.4 \nSample Files ................................................................................................................................... 213'},
 {'page': 4,
  'text': "© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 4 of 214 \n \n\u202f \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTable of Figures \n \nFigure 1: Functional flow diagram – Merchant Garnishee Tool .................................................................................. 12 \nFigure 2: Merchant Garnishee Tool – Dashboard ...................................................................................................... 15 \nFigure 3: Merchant Garnishee Tool – Dashboard ...................................................................................................... 15 \nFigure 4: ADD LUT ..................................................................................................................................................... 16 \nFigure 5: Add More popup message .......................................................................................................................... 16 \nFigure 6: ATO REMAINING AMOUNT MS Access DB .............................................................................................. 17 \nFigure 7: Staff and Email List ...................................................................................................................................... 18 \nFigure 8: Select Date Form ......................................................................................................................................... 18 \nFigure 9: Create New File Message ........................................................................................................................... 19 \nFigure 10: MG DATA .................................................................................................................................................. 19 \nFigure 11: ACTION ..................................................................................................................................................... 20 \nFigure 12: MANUAL .................................................................................................................................................... 20 \nFigure 13: MG Database ............................................................................................................................................ 20 \nFigure 14: ATO REMAINING AMOUNT ..................................................................................................................... 21 \nFigure 15: Email - Notices Paid in Full ....................................................................................................................... 21 \nFigure 16: DELETE ..................................................................................................................................................... 22 \nFigure 17: Email - Request for Reinstatement of Settl. Acct ...................................................................................... 22 \nFigure 18: ATO Remaining QA ................................................................................................................................... 23 \nFigure 19: ATO Check Error ....................................................................................................................................... 23 \nFigure 20: PPS............................................................................................................................................................ 24 \nFigure 21: INTERACTION .......................................................................................................................................... 25 \nFigure 22: Compliance Database Notes ..................................................................................................................... 25 \nFigure 23: Quality Assurance (QA) ............................................................................................................................. 25 \nFigure 24: DASHBOARD ............................................................................................................................................ 26 \nFigure 25 PPS Bulk Upload Option ............................................................................................................................ 26 \nFigure 26 Sample PPS Capture Payment Details ...................................................................................................... 27 \nFigure 27 Dashboard with PPS Case ID .................................................................................................................... 28 \nFigure 28 Duplicated Bulk Upload Message .............................................................................................................. 28 \nFigure 29 Dashboard 'Ready to review' ...................................................................................................................... 29 \nFigure 30 PPS Dashboard 'Submit' File ..................................................................................................................... 29 \nFigure 31 Create CSV Macro ..................................................................................................................................... 30 \nFigure 32: PPS Email ................................................................................................................................................. 31 \nFigure 33: Blank VERIFY PPS with ‘NO’ .................................................................................................................... 31"},
 {'page': 5,
  'text': "© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 5 of 214 \n \n\u202f \nFigure 34 VERIFY PPS with 'YES' ............................................................................................................................. 32 \nFigure 35 Sample L1 Approval Dashboard ................................................................................................................ 32 \nFigure 36 Sample L1 Authorising Dashboard ............................................................................................................. 33 \nFigure 37 PPS File Comments ................................................................................................................................... 33 \nFigure 38 Garnishee Notices Withdrawn Email .......................................................................................................... 34 \nFigure 39 LUT Tab ...................................................................................................................................................... 34 \nFigure 40 Merchant Garnishee Database Screenshot ............................................................................................... 35 \nFigure 41: QA Email ................................................................................................................................................... 35 \nFigure 42: QA Report .................................................................................................................................................. 36 \nFigure 43: Quality Assurance Window ....................................................................................................................... 36 \nFigure 44: Blank Verify PPS Report with all “NO” ...................................................................................................... 37 \nFigure 45: Verify PPS Report with all “YES” ............................................................................................................... 38 \nFigure 46: Data at Rest Encryption ............................................................................................................................ 38 \nFigure 47: Data at Rest Decryption ............................................................................................................................ 39 \nFigure 48: Access Log ................................................................................................................................................ 40 \nFigure 49: LUT Form .................................................................................................................................................. 43 \nFigure 50: NOTE Form ............................................................................................................................................... 43 \nFigure 51: PASSWORD Form .................................................................................................................................... 44 \nFigure 52: Password Change Window ....................................................................................................................... 44 \nFigure 53: QA Form .................................................................................................................................................... 45 \nFigure 54: SELECTDATE Form.................................................................................................................................. 45 \nFigure 55: Splash Form .............................................................................................................................................. 46 \nFigure 56: Teradata Form ........................................................................................................................................... 46 \nFigure 57: Change Password Window ..................................................................................................................... 183 \nFigure 58: BU Password Email ................................................................................................................................. 184 \nFigure 59: MU Password Email ................................................................................................................................ 184 \nFigure 60: UAR Email ............................................................................................................................................... 185 \nFigure 61: GDW Databases/Tables .......................................................................................................................... 187 \nFigure 62: Edge Driver Download Macro ................................................................................................................. 193 \nFigure 63: ODBC Driver Error Message ...................................................................... Error! Bookmark not defined. \nFigure 64: PPS Output file ........................................................................................................................................ 214 \n \nDocument Control \nRevision History \n \nVersion \nAuthor \nIssue Date \nChanges \nV1.0 \nGaurav \nKumar \n04-Nov-19 \nDraft Version \nV1.1 \nTodd \nBarlow \n13-Nov-19 \nUpdates/Changes to MG Tool Functional Understanding Document \nV1.2 \nLidiya \nTalcevski \n07/05/2021 \nVBA Code Updated with Password/User Access Review (UAR) Enhancement \nModule. \nV1.3 \nLidiya \nTalcevski \n15/11/2021 \n• \nChange Request #CR150 - Deployed 30/09/2021  \n- \nFile Reference Number change required in the MG Tool LUT and \nDatabase due to CAPOW project Go Live \n- \nUpdates required in the following tabs \n-LUT Tab in MG Tool \n-ATO Remaining Tab in MG Tool \n-MGDB.accdb Database (ATM_Remaining_Amount) \nV1.3 \nLidiya \nTalcevski \n15/11/2021 \n• \nReplacing BOI Bulk Upload File with PPS Payment Upload File. UDT \nwill now interact with Pega Payment System Application directly."},
 {'page': 6,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 6 of 214 \n \n\u202f \nProcess and screenshots updated in \n- Overview of Tool \n- Functional Flow \n- Process                                                                         - Verifying \nReports \n• \nRenaming any referencing of BOI to PPS \n• \nVBA Code update V2021.08.18 \nV1.4 \nLidiya \nTalcevski \n31/05/2022 \nChange Request #CR206 / C66864416 \n• \nRemoval of Internet Explorer (IE) Lib Module due to IE Retirement \nJune 2022. Replaced with SeleniumBasic Software & Microsoft Edge \nDriver \n- \nRemoved referencing to IE, replaced with Microsoft Edge \n• \nVBA Code update V2022.05.28 \n• \nAdded Section 12.2 ‘Access Required’ \n- \n12.2.1 Adding/Removing Users  \n- \n12.2.2 Group Data Warehouse (GDW) Roles \n- \n12.2.3 SeleniumBasic Software Install \n- \n12.2.4 Microsoft Edge Driver Install \n• \nAdded Section 13 ‘Support’ \n13.1 Teradata Driver Configuration & Encryption   \n-     13.1.1 Teradata Driver Configuration \n-     13.1.2 GDW Data Encryption \n13.2 Raising Issues/Incidents & Change Requests \n-     13.2.1 Raising an Issue/incident via MyService Application \n-     13.2.2 Completing a Change Request Template \n• \nAdded Appendix 14.3 Change Request Template \n \nV1.4 \nLidiya \nTalcevski \n10/06/2022 \nVBA Code update V2022.05.28 – AppLocker Fix \nIM3775763 - Auto Download of Selenium MS Edge Driver has failed in \nMerchant Garnishee Tool \n \nV1.5 \nLidiya \nTalcevski \n23/09/2022 \nIM3881811 fix advised by Enabling Tech Run Team – Short functions used in \ncode that failed when executed on a single row. Business Team experienced \nissue when only one merchant garnishee was present to process.  \nVBA Code update V2022.09.16 \nV1.6 \nLidiya \nTalcevski \n07/02/2023 \nChanges to Section 13. Support \n13.2.1 Raising Issues/Incidents \n- New process has been established to raise incidents via ServiceNow due to \nthe decommissioning of MyService Application \n- ServiceNow UDT Configuration ID added: CI000110145 \nV1.7 \nLidiya \nTalcevski \n10/02/2023 \nChange Request #CR240 \nIncorporation of ATO Remaining QA Check Sheet Legacy UDT into Merchant'},
 {'page': 7,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 7 of 214 \n \n\u202f \nGarnishee Tool Service Managed Tool. Tab named ‘ATO Remaining QA’, \nhas been added to the tool. \nUpdated Sections: \n• \n3.2 FLOW PROCESS \n• \n4.1.4 RUN \n• \nVBA Code update V2023.02.03 \nV1.7 \nLidiya \nTalcevski \n01/03/2023 \nAdded to section 12.2 Access Required \n- \nManual Download of MS Edge Driver if Macro Script is blocked. \n \nV1.8  \nLidiya \nTalcevski \n09/11/2023 \nAdded Section 4.2 Notices Revoked/Withdrawn Garnishee \n4.2.1 LUT Sheet \n4.2.2 ATO Remaining Amount Sheet \n4.2.3 Mercahnt Garnishee Database \nV1.9 \nLidiya \nTalcevski \n15/11/2023 \nUpdates to Section 13. Support \n13.3 Supporting - ASR Block Event Troubleshooting Guide \n- Addition of Knowledge Article for troubleshooting ASR cyber security block \nevent.  \n13.4 Self Check ASR Permissions \n13.5 Microsoft Defender - Request for Exemption for ASR Rules \n- How to raise an ASR exemption if impacted \nV1.10 \nVandana \nA V \n04/04/2024 \nUpdates to Section 13. Support due to process change in applying for an ASR Block \nExemption. \n1. \nUpdated subsection 13.3 Supporting - ASR Block Event Troubleshooting \nGuide with new Knowledge Article KB0060579 details and incorporated User \nSelf Check ASR Permissions. \n2. \nRemove subsection 13.4 Self Check ASR Permissions as steps have been \nincorporated in subsection 13.3 Supporting – ASR Block Event \nTroubleshooting Guide. \n3. \nRename subsection 13.5 Microsoft Defender - Request for Exemption for \nASR Rules to 13.4 - Requesting an Exemption for ASR Block.  \n4. \nUpdated new subsection 13.4 - Requesting an Exemption for ASR Block \nwith updated user steps to apply for an exemption via ITSD. \nV1.10 \nLidiya \nTalcevski \n04/04/2024 \nVBA Code Updated: CHG0176506 – Uplift of tool with M365 Compatibility \nTool version V2023.09.29 \nV 1.10 \nVandana \nAV \n30/07/2024 \nAdded 13.5 Automation Error - The Automation error relates to a .NET 3.5 Framework \npiece of software developed by Microsoft, that primarily runs on Microsoft Windows.To \nremediate the error messages below, user will need to install “Microsoft NET \nFramework-install W10.3.5.R01” from the Software Centre. \nV 1.11 \nVandana \nAV \n07/11/24 \nAdded 12.2.5 Teradata \nUpdated 13.1.1 Teradata Driver Configuration \nAdded 13.1.3 Teradata Driver Configuration without SSO \n \nDistribution List \n \nName \nBusiness Unit \nGeneric Title (ESCM) \nResponsibility \nDarren Lowe/ Ante \nZizic \nCustomer Investigation \nServices \nGM / EM \nApprover \nJacqui Deane / Selda \nSuleyman \nCustomer Investigation \nServices \nSenior Manager - \nTransaction Investigations \nApprover \nDan Chua \nBusiness and Change \nEnablement  \nSenior Manager - Strategy \nTransformation \nApprover'},
 {'page': 8,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 8 of 214 \n \n\u202f \nMathew Couper \nCustomer Investigation \nServices \nManager Compliance \nInvestigations \nReviewer \nJoshua \nVedamonickam \nBusiness and Change \nEnablement  \nCIS Business Enablement \nManager \nReviewer \nAno Johny \nGO Tech Payments \nTCS Enterprise Developer \nReviewer \n \nApprovals \nSign Off – please see project sign off table below: \n \nName \nLatest \nVersion \nSigned off \nSign off \nDate \nLink to electronic/email sign off \nAnte Zizic \nV1.1 \n11/05/2020 \nRE REVIEWAPPROVAL Functional Understanding Document - Merchant Garnishee Tool  Ante.msg\n \nSelda \nSuleyman \nV1.1 \n08/05/2020 \nRE REVIEWAPPROVAL Functional Understanding Document - Merchant Garnishee Tool .msg\n \nDan Chua \nV1.1 \n14/11/2019 \nRE  REVIEW APPROVAL   Functional Understanding Document - Merchant Garnishee Tool DC.msg\n \n \nReferences \nDocument Name  \nNetwork Location or Documentum Link \n \n \n \n \nGlossary \nCBA Terms \n• \nPlease visit the Group Glossary  \n \n<All terms (including new terms) should be managed within the CBA Glossary as a "single source of truth" unless there is a \nspecific requirement to include terms within the document, E.g. terms specific to a version or a date. In this case, please add a \ntable to this document as required, then cut and paste terms from the Wiki.>'},
 {'page': 9,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 9 of 214 \n \n\u202f \n Introduction \n1.1 \nDocument Purpose \nThis document describes in detail the functional understanding of the Merchant Garnishee Tool to satisfy all of \nthe existing business requirements. \n \n \n1.2 \nScope \nThe scope of this document is as follows:   \n1. Overview of the Merchant Garnishee Tool \n2. Functional flow \n3. Process of the Merchant Garnishee Tool \n4. Data Flow \n5. Forms & Code - Merchant Garnishee Tool  \n6. User Access Management \n \n \n1.3 \nAssumptions/Decisions/Constraints \nAll information available in the reference documents is correct.'},
 {'page': 10,
  'text': "© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 10 of 214 \n \n\u202f \n2. \nOverview of the tool \nThe Merchant Garnishee process is whereby the Australian Taxation Office (ATO) has the power to issue financial \ninstitutions with notices to pay a percentage of a client's throughput on their merchant card facilities.  These notices \nare issued under Section 260-5 of Schedule 1 of the Taxation Administration Act 1953 and remain in force until the \nfull amount due is paid or notification of withdrawal in writing is received. \n \nIn most cases 85% of funds are returned to the customer’s account and the remaining 15% is returned to the ATO \nwith a specific reference number.   \n \nThe Merchant Garnishee Tool is a VBA coded excel front end application which calculates the customer and ATO \nvalues and produces the required outputs for Pega Payments System (PPS) processing, ATO Remaining \nCalculations and reporting within the Compliance Database. \n \n2.1 \nFunctionality of the Excel Macro Tool  \n \nThe functionality of the Merchant Garnishee Tool is provided below: \n \n➢ RUN \nThis functionality is used to filter only credit entries from Teradata for Merchant Garnishee Accounts and \ncorresponding POS terminals in the Lookup Table (LUT) for a particular date selected and Notify the \nbusiness user of exceptions. This also create the required entries to the Customer & ATO as defined in the \nLookup Table (LUT). It produces the final Bulk Upload File for processing and Business Activity Notes to be \ncopied and pasted into the Compliance Database. \n \nFollowing Sheets will be generated. \n1) MG DATA \n2) ACTION \n3) PPS \n4) INTERACTION \n5) MANUAL(In case of any Exception Caused) \n6) ATO REMAINING AMOUNT \n7) ATO REMAINING QA \n8) QA(Only on Wednesday) \n \n➢ EMAIL \nThis Button will be visible once all the above mentioned tabs are generated. This functionality allows the \nbusiness users to upload the PPS output file into the Pega Application and to send any automated emails \nto the distribution list given in the Dashboard. Before the emails are generated, QA verification will need to \nbe completed in the tool. The Bulk Upload File is sent to the Manager/Delegate for verification before \napproval in PPS.  \n \n➢ ADD LUT \nThe functionality allows users to add new Merchant Garnishee & POS terminals to the LUT.  Any new \nMerchant Garnishee account added will record the LANID of the person that performed the activity. \nIt is also used for Adding ATO REMAINING AMOUNT Data. \n \n➢ DASHBOARD \nThis functionality is used ensure that no errors are present or found during processing.  If errors are \npresent you will not be able to proceed through to the next Step. \n \n➢ MANUAL \nThis worksheet is required to ensure that any exceptions found during Actioning are moved to the \nexception worksheet for manual remediation.  \n \n➢ ATO REMAINING QA \nThis worksheet allows the uses to perform a Quality Assurance Check on the overall amount owing to the \nATO including advice on garnishee’s requiring closure due to full repayment."},
 {'page': 11,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 11 of 214 \n \n\u202f \n \n2.2 \nBusiness Users  \nThe different user levels present for the Merchant Garnishee Tool is provided below:  \n \nRole Title \nRole Description \nBusiness Access \nView/Run the Merchant Garnishee Tool and uploads bulk Input file for \nProcessing/Approval.  This is password protected and only business user should have the \nrequired password. \nManager Access \nAbility to add new Merchant Garnishee and corresponding POS terminals using the LUT \nform into the Lookup Table (LUT).  This is password protected and only Manager or \ndelegates should have the required password. \nAdmin User \nAccess to all features in the tool and ability to update the lookup table with new details.'},
 {'page': 12,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 12 of 214 \n \n\u202f \n3. \nFunctional Flow  \n3.1 \nFlow diagram \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 1: Functional flow diagram – Merchant Garnishee Tool \n \nStart \nOpen Merchant Garnishee Tool \nEdit \nNo \nYes \nData Added to LookUp Table/ATO \nRemaining Amount Sheet \nADD LUT \nNEXT \nUser Access table updated \nCLEAR \nData cleared from the tool \nto reuse \n  EXIT \nRUN \nSelect date to run the tool and enter \nterradata credentials \nMG DATA,ACTION,PPS,INTERACTION,MANUAL,QA, ATO REMAINING \nAMOUNT & ATO REMAINING QA Sheets Generated \nEMAIL \nQA verification and Bulk Upload File uploaded into PPS for processing. \nTool saved \nFinish'},
 {'page': 13,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 13 of 214 \n \n\u202f \n \n3.2 \nFlow process  \nS.I. \nDescription \n1 \nOpen Merchant Garnishee Tool and click on Edit button and enter the password to unlock the Tool. \n2 \nBusiness User to Execute RUN button to select the Date to run the tool. \n3 \nBusiness User to execute RUN - this will fetch the records from Teradata for the Merchant Garnishee \nand corresponding POS terminals in the Lookup Table (LUT). \n4 \nMove any Exceptions to ‘Manual’ worksheet and delete from ‘Action’ worksheet. \n5 \nBulk Upload (PPS) File is generated for processing along with INTERACTION sheet which is having data \nfor Business Activity Notes to be pasted into the Compliance Database. \n6 \nAutomated email to manager/delegate will generate for any garnishee paid in full. Manager will be \nrequired to remove the garnishee by clicking on the RED cell, in the "ATO REMAINING AMOUNT" sheet \nprior to the business user balancing the ATO Remaining QA Sheet. \n7 \nAutomated email to Merchant Team will generate to request the reinstatement of the merchant original \nsettlement account. \n8 \nATO Remaining QA Sheet is generated. Business user to input previous days ATO Remaining Amount \nin field B17. Tool will not allow user to proceed if reconciliation does not balance. \n9 \nQA Sheet is generated if the RUN date is ‘Wednesday’. The mail is sent to respective team (distribution \nlist mentioned in user table) to verify the QA. \n10 \nBusiness User to execute EMAIL button to upload bulk PPS file into Pega and the Manager/Delegate an \nemail containing the bulk upload file for verification and approval. Email is triggered only if QA has been \ncompleted.  \n11 \nBusiness User copy from INTERACTION sheet using button click & paste Tran Notes into the \nCompliance Database manually. \n12 \nAdmin User to execute NEXT button to add/remove user access table. \n13 \nAdmin to execute ADD LUT to add/modify lookup tables (LUT) or ATO REMAINING AMOUNT.  ADD \nLUT is visible only to Admin. \n \n \n \n \n \n3.3 \nUpstream Applications  \n   \nThe upstream application for the Merchant Garnishee Tool is: \n \nPega Payment System Application - This application is required to upload and process the output file.   \n \nOutlook - This application is used to send any emails that are required \n \nTeradata – This application is required to obtain the daily entries processed to Merchant Garnishee \naccounts.  \n \n \n \n \n3.4 \nDownstream Applications \nThe upstream application for Merchant Garnishee Tool are: \n \nCompliance Database application is setup for record keeping of requests received from different \ndepartments and government offices like Local Court Garnishee, Transport, ATO, Account Liquidation etc.  \n \nFollowing are the main functionalities that Compliance Database application is capable of:  \n \nCompliance Form – to add a new record of requests received for different file types and follow-up till \nclosure.'},
 {'page': 14,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 14 of 214 \n \n\u202f \n \nSearch – To search existing file records. \n \nQueries / Reports – to download a report for follow-ups that are due.  \n \nAccess Management and Maintenance of Application – To add or update users and maintain the \napplication Process \n \n4. \nProcess \n \n4.1 \nView and Process - Merchant Garnishee Tool \n \nBusiness users in the staff list with the required password will have the ability to process the daily Merchant \nGarnishee POS credits. In most cases 85% of funds are returned to the customer’s account and the remaining \n15% are returned to the ATO with a specific reference number.   The Tool is a VBA coded excel front end \napplication which calculates the customer and ATO values and produces the required outputs for Pega Payment \nSystem (PPS) processing and reporting within the Compliance Database.    \n \n4.1.1 \nOpen the Merchant Garnishee Tool \n \nTo open Merchant Garnishee Tool, go to the following LAN address I:\\COMPLIANCE\\Support Team\\Merchant \nGarnishee Tool\\Daily Reports and Double click on Merchant Garnishee Tool v2 Template.   \n \n \nDashboard:'},
 {'page': 15,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 15 of 214 \n \n\u202f \n \n \nFigure 2: Merchant Garnishee Tool – Dashboard \n \n \n \n \nMerchant Garnishee Tool Function Buttons \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nFigure 3: Merchant Garnishee Tool – Dashboard \n \n \n \n \n \n \nThis option is used to add new Merchant Garnishee & POS \nterminals to the LUT.  Any new Merchant Garnishee account added \nwill record the LANID of the person that performed the activity. \nIt is also used to add ATO Remaining Amount to ATO REMAINING \nAMOUNT Sheet. \n \nThis button is used to filter only credit entries for the Merchant \nGarnishee accounts and corresponding POS terminals in the Lookup \nTable (LUT).  This also create the required entries to the Customer & \nATO as defined in the Lookup Table (LUT)  \n \n \nThis button is used to upload the PPS output file to the Pega \napplication and to send an email to the Manager/Delegate for \nApproval of the output file. The PPS File in the email attachment is \nencrypted with a password. \n \nThis option is used to clear the data from dashboard and remove the \nauto generated sheets from the tool, so that this tool can be reused. \n \nThis button is used to exit from the application. \n \n \nThis option is used to lock the tool. The data present in the sheets \nwill be in encrypted format and we cannot edit the sheet. \n     \n \nNext button is used to redirect to user table sheet, to modify user \nand access related information. \n  \n \nEdit button is used for making the tool editable. \n \nThese buttons are used to change the background colour of the tool.'},
 {'page': 16,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 16 of 214 \n \n\u202f \n \n \n4.1.2 \nADD LUT  \n \nOn clicking the ‘ADD LUT’ the following form will appear. \n \nIt is also used to add ATO Remaining Amount to ATO REMAINING AMOUNT Sheet. \n \n \n        \n \n \n \n \n        \n \nFigure 4: ADD LUT \n \nIf ‘ATO Amount’ is blank while saving the form then data will be added to ‘LUT’ sheet else it will be added to ‘ATO \nREMAINING AMOUNT’ sheet. \n \nAdd more functionality is there while clicking on save button. \n \n \n \n \nFigure 5: Add More popup message \n \n \nIf we are adding ‘ATO REMAINING AMOUNT’ then the record will be added to MS Access Database (MG DB) \nThis option is used to add new Merchant Garnishee & POS terminals to the LUT.  Any new Merchant Garnishee \naccount added will record the LANID of the person that performed the activity.'},
 {'page': 17,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 17 of 214 \n \n\u202f \ntable. \n \n \n \n \nFigure 6: ATO REMAINING AMOUNT MS Access DB \n \n \n \n4.1.3 \nStaff and Email List \nAdmin Access is required in order to edit or update the Staff and Email Lists. Only Staff that appear in the Staff List \nare authorised to use the Merchant Garnishee Tool. Unauthorised users will only have read-only access and will \nnot be able to click on any buttons. It appears by clicking on Next Button.'},
 {'page': 18,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 18 of 214 \n \n\u202f \n \n \nFigure 7: Staff and Email List \n \n \n \n4.1.4 \nRUN  \n \nOn clicking the ‘RUN’ button, the following Popup would appear for date selection. \n \n \n \nFigure 8: Select Date Form \n \n \nWe can select only previous days. If the day is Friday then it will select the next Saturday and Sunday \nautomatically. We can exclude Saturday and Sunday from the form. \n \nOnce Date is selected the tool will ask for Teradata credentials as shown below form.'},
 {'page': 19,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 19 of 214 \n \n\u202f \n \nFigure 9: Create New File Message \n \n \nOnce Credentials are entered the tool will connect to the Teradata and fetch the records for the particular date \nrange selected corresponding to the POS terminals defined in LUT table and paste into ‘MG DATA’ sheet. \n \n \n \n \nFigure 10: MG DATA \n \nBased on data present in MG DATA sheet ACTION sheet will be generated automatically.'},
 {'page': 20,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 20 of 214 \n \n\u202f \n \nFigure 11: ACTION \n \n \nIf any exception found in ACTION sheet then the exception will be moved to the MANUAL sheet. \n \n \nFigure 12: MANUAL \n \nTo stop over payment of Garnishee Amount there is MS Access database (MG DB) being updated whenever the \ntool runs. \nThe database contains the record till previous date. \n \n \nFigure 13: MG Database \n \n \nOnce the tool runs it syncs the ATO REMAINING AMOUNT sheet with the MG DB. Then the ATO REMAINING \nAMOUNT sheet amount will be updated with the data from ACTION sheet. If the amount is negative then it will be \nhighlighted. In case of any exception the amount will be moved to MANUAL sheet.'},
 {'page': 21,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 21 of 214 \n \n\u202f \n \nFigure 14: ATO REMAINING AMOUNT \n \nAn automated email to the manager/delegate will generate for any garnishees paid in full.  \nManager will be required to remove the garnishee by clicking on the RED cell, in the "ATO REMAINING AMOUNT" \nsheet prior to the business user balancing the ATO Remaining QA Sheet. \n \nNote: A negative amount requires deletion by the Manager/Delegate within the tool. The same record will be \narchived from MG DB access database table and will be displayed in the ATO Remaining QA Sheet under “Closed \nGarns’ heading. \n \n \n \nFigure 15: Email - Notices Paid in Full'},
 {'page': 22,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 22 of 214 \n \n\u202f \n \n \n \nFigure 16: DELETE  \n \n \nAn automated email to the Merchant Team will generate to request the reinstatement of the merchant’s original \nsettlement account. \n \n \nFigure 17: Email - Request for Reinstatement of Settl. Acct \n \n \n \n \nOnce the manager/delegate has deleted the fully repaid merchant from the ATO Remaining Amount sheet, the \nbusiness user is required to manually input the previous days total ATO Remaining Amount in the ATO Remaining \nQA Sheet reconciliation in position B17 (Yellow highlighted cell).'},
 {'page': 23,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 23 of 214 \n \n\u202f \n \nFigure 18: ATO Remaining QA \n \nThe ATO Remaining QA sheet is used as a daily validation to confirm balances have been calculated correctly \nwhen executing the Merchant Garnishee Tool for the purpose of managing the outstanding balances owed to the \nATO.  \n \nNote: Tool will not allow business user to proceed if reconciliation does not balance. \n \n \nFigure 19: ATO Check Error'},
 {'page': 24,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 24 of 214 \n \n\u202f \n \nBased on the updated data PPS sheet will be generated. \n \n \n \n \nFigure 20: PPS \n \nInteraction sheet is generated for the compliance Database Notes.'},
 {'page': 25,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 25 of 214 \n \n\u202f \n \n \nFigure 21: INTERACTION \n \nTo copy the Compliance Database Notes click on the first column of the interaction sheet. It will open a popup with \na functionality to copy. \n \n \nFigure 22: Compliance Database Notes \n \nOn every Wednesday the tool generates one more sheet QA and sends an email to the respective team for QA \nverification. It will take 10% of data to be verified. Checking the automated account numbers ensures the correct \nfunctioning of the Merchant Garnishee Tool. \nThe yellow highlighted cells are clickable and they are used by the Delegate to set the YES or NO answer for each \nQA. \n \n \n \nFigure 23: Quality Assurance (QA) \n \nThe overall data details is displayed on dashboard.'},
 {'page': 26,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 26 of 214 \n \n\u202f \n \nFigure 24: DASHBOARD \n4.1.5 \nEMAIL - PPS Interaction and Email Generation \n \nThe tool will check whether QA has been completed before allowing the user to continue to the ‘EMAIL’ step. A \npopup will display for QA verification to be completed if not done so.  \n \nOnce the EMAIL button is clicked the tool will create a copy of the PPS bulk upload file in csv format and save a \ncopy to the team production folder where the original tool is located. Once the file is successfully loaded the .csv \nfile will be deleted. Eg. MGTool_yyyymmdd_xxxx.csv \n \nThe tool will then initiate Microsoft Edge, open the Pega Payment System Application and load the PPS output file. \nIt will choose the ‘Bulk Upload’ payment type and will auto fill the details in the ‘Capture payment – Bulk Upload’ \n \n \nFigure 25 PPS Bulk Upload Option'},
 {'page': 27,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 27 of 214 \n \n\u202f \n \n \n \nFigure 26 Sample PPS Capture Payment Details \n \n \nOnce the file is loaded into PPS the following pop up will display in the tool and the PPS Case ID will populate on \nthe dashboard.'},
 {'page': 28,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 28 of 214 \n \n\u202f \n \nFigure 27 Dashboard with PPS Case ID \n \n \nIn the event that the same PPS File is uploaded twice into Pega, the tool will display the following popup message \n \n \n \nFigure 28 Duplicated Bulk Upload Message \n \n \n \n \nBefore sending out the emails generated the business user will need to ‘SUBMIT’ the bulk payment upload file in \nPPS. \nOpen PPS and click onto the case ID number (highlighted in blue) created and scroll to the bottom of the page and \nclick ‘SUBMIT’. \nThe payment status of ‘Ready to review’ will changed to ‘Pending L1 approval’ meaning the file is ready to be \napproved by the L1 Manager/Delegate.'},
 {'page': 29,
  'text': "© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 29 of 214 \n \n\u202f \n \n \nFigure 29 Dashboard 'Ready to review' \n \n \n \nFigure 30 PPS Dashboard 'Submit' File \n \n \nIn the event that there is an issue in generating the .csv file, a macro has been built within the tool for Admin to re-\ncreate the .csv file."},
 {'page': 30,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 30 of 214 \n \n\u202f \n \nFigure 31 Create CSV Macro \n \n \nAfter the PPS bulk upload file has loaded into Pega, the tool will generate the emails required. \nWhen the user has multiple email signatures, then select the appropriate signature from the Email Signature \nwindow. \n \nNote: when a report has no transactions there is no email created \n \nThe bulk upload email will contain a copy of the PPS file uploaded in Pega. This email is sent to the \nManager/Delegate for Approval of the output file. The PPS File in the email attachment is encrypted with a \npassword.'},
 {'page': 31,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 31 of 214 \n \n\u202f \n \nFigure 32: PPS Email \n \n4.1.6 \nManger/Delegate PPS Bulk Upload File Verification and Approval \n \nThe following steps are required to verify the PPS Upload attachment: \n• \nWhen the manager/delegate receives the PPS bulk upload email, open the attachment using the PPS file \npassword \n• \nGo to the folder I:\\COMPLIANCE\\Support team\\Merchant Garnishee Tool\\Daily Reports and go into the \nrespective date folder and open the MGTool dd.mm.yy.xlsm \n• \nClick onto the VERIFY PPS tab \n \n \n \nFigure 33: Blank VERIFY PPS with ‘NO’ \n \n• \nIn the email attachment Select columns A2:Mx, where x is the last row in the table in the email attachment,'},
 {'page': 32,
  'text': "© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 32 of 214 \n \n\u202f \nthen paste the data back into the VERIFY PPS tab. Do not copy column N and O as they contain macros. \n• \nThe Verify column should change from \n to \n . If all the values in the Verify column are \n \nthen the data in the email is verified and matches what is in the MGTool dd.mm.yy.xlsm \nNote: the balance should always be 0, otherwise there was an error during the copy and paste steps. \n \n \n \nFigure 34 VERIFY PPS with 'YES' \n \n• \nSave the MGTool dd.mm.yy.xlsm so that, there is a record that the data has been verified. \n• \nThe manager/delegate then proceeds to approve the file in PPS by clicking onto the Case ID and scrolling \ndown to click ‘Authorise’ \n \n \n \nFigure 35 Sample L1 Approval Dashboard \n \n \n \nNO\nYES\nYES"},
 {'page': 33,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 33 of 214 \n \n\u202f \n \nFigure 36 Sample L1 Authorising Dashboard \n \n \n \nFigure 37 PPS File Comments \n \nThe PPS bulk payment upload file has now been verified and authorised.  \n \n \n4.2 \nNotices Revoked/Withdrawn Garnishee \nThe following steps should be followed when the business team require a Garnishee to be revoked/withdrawn due \nto a garnishee being repaid in full. \n \nWhen this occurs, the tool will generate an email for the business user to send to \nPS_transformation@cba.com.au to update the look up table (LUT) within the tool and database. \nThese emails where Merchant Garnishees need to be Revoked/Withdrawn must be actioned immediately before \nthe team proceed to complete their daily run.'},
 {'page': 34,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 34 of 214 \n \n\u202f \n \nFigure 38 Garnishee Notices Withdrawn Email \n \n \n4.2.1 \nLUT Sheet \n. \n• \nOpen the Tool in production in the Teams folder \n• \nClick onto ‘EDIT’ and input the Admin password \n• \nClick onto the ‘LUT’ Sheet and locate the Merchant Garnishee SAP Account in Column A - UniqueKey \n(Formula populated). \n• \nChange the end ‘POSXXXXXXXX’ number to ‘Withdrawn’ in Column A \n• \nEnsure to change all under the same Merchant Garnishee SAP Accounts in Column A - UniqueKey \n(Formula populated). There could be more than one. \n• \nChange the ‘POSXXXXXXXX’ number to ‘Withdrawn’ in Column I aswell \n• \nChange the ‘Garn-xxx’ number in Cloumn O (File Reference Number) \n \n \nFigure 39 LUT Tab \n \n \n4.2.2 \nATO Remaining Amount Sheet \n• \nClick onto the ‘ATO Remaining Amount’ Sheet and locate the Merchant Garnishee Account Number and \ndelete the line. There should only be one.  \n• \nClick Save.'},
 {'page': 35,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 35 of 214 \n \n\u202f \n4.2.3 \nMerchant Garnishee Database \n \n• \nOpen the Merchant Garnishee Database – Team Folder and enter the master password. \n• \nOpen the ATO_Remaining_Amount Tab \n• \nLocate the Merchant Garnishee Account Number and copy a snippet from the tab to the email reply back to \nthe CIS Team. This ensures that you have a record. \n• \nDelete the line from the MGDB Database and save. There should only be one. \n \n \n \nFigure 40 Merchant Garnishee Database Screenshot \n \n \n5. \nQuality Assurance \nQuality Assurance (QA) is a required part of the process and ensures the best possible outcome for the customer. \nQA is completed by verifying a small sample of transactions before the processing is allowed to be completed. This \nenables any errors to be identified and corrected before it ultimately affects the customer. \n5.1 \nPerforming a QA \nQA is generated on Wednesday by the Merchant Garnishee Tool and will need to be completed before the Tool will \nallow the emails to be generated.  The general rule is, it will take 10% of data to be verified. \n \nQA is performed by a Manager/Delegate User only. An email will be generated by the Business User and sent to \nthe Manager/Delegate.  \n \n \nFigure 41: QA Email \n \nOnce the Manager/Delegate receives the email, open the Merchant Garnishee Tool and go to the QA Report, then \nclick on each of the Yellow highlighted cells to display the Quality Assurance window to display all the information \nrequired for you to perform the QA check.'},
 {'page': 36,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 36 of 214 \n \n\u202f \n \nFigure 42: QA Report \n \nIn the Quality Assurance window, click on the Account number button to copy the Account number to the clipboard \nwhere you can paste the Account Number in CommSee to verify. \nSimilarly you can click on Garn Reference button to copy the Garn Reference number for verification. \nIf the Account Number and Garn Reference number is suitable, press the Yes button, otherwise, press the No \nbutton. You can also enter in a Note, if required. \n \n \nFigure 43: Quality Assurance Window \n \nOnce all the checks have been completed, reply to the email, so that the Business User can continue the process. \nIf any errors have been identified, please send an email to: PS Transformation@cba.com.au  for further \ninvestigation.    The process will not be able to continue, until the PS Transformation team has completed their \ninvestigation and updated the incorrectly chosen Account Number/Garn Reference Number in the Merchant \nGarnishee Tool.'},
 {'page': 37,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 37 of 214 \n \n\u202f \n \n6. \nVerifying Reports \nThe Merchant Garnishee Tool includes PPS Report that is used to verify the emailed attachments that have been \ncreated and sent by the business user. \n \nManager/Delegate access is required to access the Verify Reports contained in the Merchant Garnishee Tool. \nWhen the Manger/Delegate receives the Bulk Upload File email, the Manager/Delegate is required to verify the \nemails have not been tampered with and the data is the same as what is in the Merchant Garnishee Tool. This is \ndone by opening the attachment in the email and copying the data to clipboard and pasting it back into the \nrespective Verify Reports in the Merchant Garnishee Tool. \n6.1 \nVerify PPS \nThe following steps are required to verify the PPS attachment: \n \n1. When the Manger/Delegate receives the email, open the attachment, \n2. Go to the folder I:\\COMPLIANCE\\Support team\\Merchant Garnishee Tool\\Daily Reports and go into the \nrespective date folder and run the MGTool dd.mm.yy.xlsm \n3. Open the Verify PPS Report in the MG Tool you opened in step 2. \n4. Select columns A2:M2, where x is the last row in the table, in the email attachment, and paste it back into \nthe Verify PPS Report. Do not copy the column N and O as they contain formulas. \n5. The Verify column should change from \n to \n . If all the values in the Verify column are \n \nthen the data in the email is verified and matches what is in the MG Tool dd.mm.yy.xlsm. Note: the balance \nshould always be 0, otherwise there was an error during the copy and paste steps. \n6. Save the MG Tool dd.mm.yy.xlsm, so that, there is a record that the data has been verified. \n7. The manager/delegate then proceeds to approve the file in PPS by clicking onto the Case ID and scrolling \ndown to click ‘Authorise’ – Refer Section 4 ‘Process’ steps \n \n \nFigure 44: Blank Verify PPS Report with all “NO” \n \nNO\nYES\nYES'},
 {'page': 38,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 38 of 214 \n \n\u202f \n \nFigure 45: Verify PPS Report with all “YES” \n \n \n7. \nData at Rest Encryption \nThe Merchant Garnishee Tool will automatically encrypt any customer information when saved and locked. \n \n \nFigure 46: Data at Rest Encryption \n \nTo decrypt any report and make it readable, simply place the tool into Edit mode by clicking on the Edit button and \nentering in your Business User or Manager password.'},
 {'page': 39,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 39 of 214 \n \n\u202f \n \n \nFigure 47: Data at Rest Decryption'},
 {'page': 40,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 40 of 214 \n \n\u202f \n8. \nAccess Logs \nAccess logs are hidden text files named Access Log.txt and are located in the same folder as the Tool itself. The \nAccess Log records the date and time stamp, LAN id, access level, button presses, all messages displayed during \nthe running of the Tool, summary information and so on. \n \n \nFigure 48: Access Log \n \nThe Access Log is used by Admin for maintenance purposes'},
 {'page': 41,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 41 of 214 \n \n\u202f \n9. \nSQL Query \n \n1) The following SQL Query is generated by the Merchant Garnishee Tool to retrieve Teradata record \nset \n \n \n“SELECT pc.ACCT_NUMB as ACCOUNT_IDENTIFIER,pc.TRAN_A as TRANS_AMOUNT,pc.CR_DR_F \nas CREDIT_DEBET_FLAG,pc.INPT_X as TRANS_DESCRIPTION,pe.PARN_RCPT_NUMB as \nPARENT_RECEIPT_NUMBER," & vbLf & _ \n"pe.RCPT_NUMB as RECEIPT_NUMBER,pc.POST_D as DATE_POST " & vbLf & _ \n"FROM PVCBBJR.payt_cmpn pc,PVCBBJR.payt_evnt pe,PVCBBJR.BUSN_CHNL_CATG_CURR bc \nWHERE pc.payt_evnt_i = pe.payt_evnt_i and pe.evnt_Crat_d =pc.evnt_crat_D and pe.busn_chnl_catg_i = \nbc.busn_chnl_catg_i" & vbLf & _ \n"AND pc.post_d in(" & DateRange & ") AND pc.acct_numb in (" & AccountNum & ") and \nsubstr(pe.rcpt_numb,1,1) not in (\'P\');” \n \n2) The following SQL Query is generated by Merchant Garnishee Tool to Fetch ATO Remaining \nAmount from MS Access DB. \n \n"SELECT File_Ref_Number, ATO_Payment_Reference,Account_Number, \nAccount_Name_Merchant_Garnishee,Garnishee_Amount,Garnishee_Amount_Paid_Prev,Garnishee_Amo\nunt_Paid_Today,Amount_Remaining,Updated_Date FROM ATO_Remaining_Amount ORDER BY \nATO_Remaining_Amount.ID ASC;" \n \n3) The Following SQL Query is generated by Merchant Garnishee Tool for Archiving ATO Remaining \nAmount into MS Access DB. \n \n\'First Insert into Bkp table \n \n "INSERT INTO ATO_Remaining_Amount_Archive " & _  \n"SELECT File_Ref_Number, ATO_Payment_Reference, Account_Number, \nAccount_Name_Merchant_Garnishee, Garnishee_Amount, Garnishee_Amount_Paid_Prev, \nGarnishee_Amount_Paid_Today, Amount_Remaining, Updated_Date,IsUpdated FROM \nATO_Remaining_Amount WHERE ATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n \n \n‘Update backup table \n \n"UPDATE ATO_Remaining_Amount_Archive set Deleted_By = \'" & \nThisWorkbook.Worksheets("HOME").Range("UserName").Value & "\', Updated_Date = \'" & CDate(Date) & \n"\'  WHERE ATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n \n‘Delete from Main Table \n"DELETE * FROM ATO_Remaining_Amount WHERE ATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n \n4) The following SQL Query is generated by Merchant Garnishee Tool to Insert ATO Remaining \nAmount Data to the MS Access DB. \n \n"INSERT INTO ATO_Remaining_Amount ( File_Ref_Number, ATO_Payment_Reference, \nAccount_Number, Account_Name_Merchant_Garnishee, Garnishee_Amount, \nGarnishee_Amount_Paid_Prev, Garnishee_Amount_Paid_Today, Amount_Remaining, Updated_Date )" & \nvbLf & _ \n    "values (\'" & FileRef & "\',\'" & AtoPaymentRef & "\',\'" & AccntNum & "\',\'" & AccntNm & "\',\'" & \nGarnisheeAmnt & "\',\'0\',\'0\',\'0\',\'" & Date - 1 & "\')"'},
 {'page': 42,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 42 of 214 \n \n\u202f \n10. Data Flow \n10.1 Inflow / Outflow of data \nInflow  \n \nInflow of this tool is from Teradata. \n \nOutflow:  \n \nBulk Upload File via Pega Payment System (PPS), containing customer & ATO entries.   Refer Appendix 14.1 \nCompliance DB Interactions (To be manually copied into the Compliance Database). \n \n \n10.2 Frequency of inflow / outflow \nFrequency of inflow is daily.  \n \nFrequency of outbound is daily.  Business User to send Bulk Upload file to PPS for processing.  Tran Notes are \nalso manually copied into the Compliance Database. \n \n10.3 Volume of data \nAverage volume of Merchant Garnishee transactions to be processed is typically 160 records per day.   Note the \nMonday volume includes weekend trading (Saturday & Sunday) and transactions to be processed is typically 450 \nrecords \n \n \n10.4 SLA  \nNo specific SLA present for the processing of the Merchant Garnishee Transactions. However the business \nendeavours to process at the earliest. \n \n \n10.5 Data Structures \nThe backend for the Merchant Garnishee Clearing Tool is VB Coded with a MS-Excel Marco Enabled Worksheet \nFront End \n \n \n10.6 Data encryption \nThe Merchant Garnishee Clearing Tool is encrypted and can only be access with the relevant Password.'},
 {'page': 43,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 43 of 214 \n \n\u202f \n11. VBA Code – Merchant Garnishee Tool \n11.1 Layouts for Forms \nThe following code is developed in VBA Project and is password word protected.  The password to amend the \ncode is held with the Admin User & BACE.   The code was developed by Gaurav Kumar Staff Number: \n00421718. \n11.1.1 LUT Form \n \n \nFigure 49: LUT Form \n \n \n \n11.1.2 Note Form \n \nFigure 50: NOTE Form'},
 {'page': 44,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 44 of 214 \n \n\u202f \n11.1.3 Password Form \n \nFigure 51: PASSWORD Form \n \n \n \n \nFigure 52: Password Change Window'},
 {'page': 45,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 45 of 214 \n \n\u202f \n11.1.4 QA Form \n \nFigure 53: QA Form \n \n \n11.1.5 SelectDate Form \n \nFigure 54: SELECTDATE Form'},
 {'page': 46,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 46 of 214 \n \n\u202f \n11.1.6 Splash Form \n \nFigure 55: Splash Form \n11.1.7 Teradata Form \n \nFigure 56: Teradata Form \n \n \n11.2 VBA Code for Forms, Modules and Sheets \n \n \n\'@1.1 Form - DateForm \n \nPrivate Sub OK_Click() \n    Dim Ret As VbMsgBoxResult \n \n    With DateForm \n        If Not IsDate(.RunDate.Value) Then \n            ErrBox "Run Date is not a valid date!" & vbLf & vbLf & "Please enter in a valid date for the \nRun Date...", "Date" \n        ElseIf Not IsDate(.AsOfDate.Value) Then \n            ErrBox "As of Date is not a valid date!" & vbLf & vbLf & "Please enter in a valid date for the \nAs of Date...", "Date" \n        Else \n            If SearchLog("AsOfDate is " & Format(.AsOfDate.Value, "dd/mm/yyyy")) Then \n                Ret = MsgBox2("The As of Date " & Format(.AsOfDate.Value, "dd/mm/yyyy") & " may have been \nrun previously!" & vbLf & vbLf & "Do you want to continue using this date?", vbYesNo + vbQuestion, \n"Duplicate As of Date") \n                If Ret = vbNo Then \n                    ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = "" \n                    ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value = "" \n                    Unload DateForm \n                    Exit Sub \n                End If \n            End If \n \n            ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = CDate(Format(.RunDate.Value, \n"dd/mm/yyyy")) \n            ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value = CDate(Format(.AsOfDate.Value, \n"dd/mm/yyyy"))'},
 {'page': 47,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 47 of 214 \n \n\u202f \n            WriteLog "DateForm: RunDate is " & Format(.RunDate.Value, "dd/mm/yyyy") & ", AsOfDate is " & \nFormat(.AsOfDate.Value, "dd/mm/yyyy") \n            Unload DateForm \n            Application.Cursor = xlWait \n        End If \n    End With \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = "" \n    ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value = "" \n    Unload DateForm \nEnd Sub \n \nPrivate Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer) \n    ThisWorkbook.Worksheets("HOME").Activate \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    With DateForm \n        If ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = 0 Then \n            .RunDate.Value = Format(Date, "dd/mm/yyyy") \n        Else \n            .RunDate.Value = Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd/mm/yyyy") \n        End If \n        .AsOfDate.Value = Format(ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value, "dd/mm/yyyy") \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.2 Form - InterchangeForm \n \nPrivate Sub OK_Click() \n    ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value = InterchangeForm.Interchange.Value \n \n    Unload InterchangeForm \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    Unload InterchangeForm \nEnd Sub \n \nPrivate Sub Transaction1_Click() \n    Application.Cursor = xlWait \n \n    Delay 100 \n \n    CopyText InterchangeForm.Transaction1.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub Transaction2_Click() \n    Application.Cursor = xlWait \n \n    Delay 100 \n \n    CopyText InterchangeForm.Transaction2.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    Dim pos As Integer \n    Dim Reference As String, Reference2 As String \n \n    Reference = ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = "" \n    ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value = "" \n \n\'           11 111111 112222 \n\'1 234567 8901 234567 890123 \n\'8-531350-0309-051043-810700 \n    Reference2 = Mid2(Reference, 1, 1) & "-" & _'},
 {'page': 48,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 48 of 214 \n \n\u202f \n                 Mid2(Reference, 2, 7) & "-" & _ \n                 Mid2(Reference, 8, 11) & "-" & _ \n                 Mid2(Reference, 12, 17) & "-" & _ \n                 Mid2(Reference, 18, 23) \n \n    InterchangeForm.Transaction1.Caption = Reference \n    InterchangeForm.Transaction2.Caption = Reference2 \n \n    With InterchangeForm \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.3 Form - LUTForm \n \nPrivate Sub btnCancel_Click() \nclearForm \nUnload LUTForm \nEnd Sub \nPrivate Sub clearForm() \ntxtAccntMG.Value = "" \ntxtAccntNum.Value = "" \ntxtCustAcctNme.Value = "" \ntxtSAPOB.Value = "" \ntxtCustBSB.Value = "" \ntxtCustAccnt.Value = "" \ntxtPOSTerm.Value = "" \ntxtCustPerc.Value = "" \ntxtATOPerc.Value = "" \ntxtRBABSB.Value = "" \ntxtRBAAccnt.Value = "" \ntxtATOPayment.Value = "" \ntxtFileRefNum.Value = "" \ntxtATOAmt.Value = "" \nEnd Sub \nPrivate Sub btnSave_Click() \n\'Dim aa As Boolean \n\'aa = AccessRunSQL("C:\\Users\\kumarg7\\Desktop\\MGDB.accdb", "", "", "select SUM(Garnishee_Amount)as testres \nfrom  [table]Garnishee_Remaining_Amount where ATO_Payment_Reference =  \'651430824913360\' ") \n\'Exit Sub \nUnprotectAll \nIf txtAccntMG.Value = "" Or txtAccntNum.Value = "" Or txtCustAcctNme.Value = "" Or txtSAPOB.Value = "" Or \ntxtCustBSB.Value = "" Or txtCustAccnt.Value = "" Or txtPOSTerm.Value = "" Or txtCustPerc.Value = "" Or \ntxtATOPerc.Value = "" Or txtRBABSB.Value = "" Or txtRBAAccnt.Value = "" Or txtATOPayment.Value = "" Or \ntxtFileRefNum.Value = "" Then \n  MsgBox2 "Please fill all the mandatory values." \n  BusyOff \n  Exit Sub \nEnd If \n \nDim UserResponse As Integer \n \nIf val(Trim(txtCustPerc.Value)) + val(Trim(txtATOPerc.Value)) <> 100 Then \n      MsgBox "Sum of Customer Percentage and ATO Percentage should always be equal to 100." \n      BusyOff \n      Exit Sub \n    End If \n \n        ThisWorkbook.Sheets("LUT").Select \n        Dim lrow As Long \n        lrow = Cells(Rows.Count, "A").End(xlUp).Row \n \n        \'To set the format to Text from default General \n        Range("C" & lrow + 1 & ":T" & lrow + 1).NumberFormat = "@" \n \n        \'Filling the cells from text boxes \n        Range("C" & lrow + 1).Value = " " + Trim(txtAccntMG.Value) \n        Range("D" & lrow + 1).Value = "SAPSPAU" + Trim(txtAccntNum.Value) \n        Range("E" & lrow + 1).Value = " " + Trim(txtCustAcctNme.Value) \n        Range("F" & lrow + 1).Value = Trim(txtSAPOB.Value) \n        Range("G" & lrow + 1).Value = Trim(txtCustBSB.Value) \n        Range("H" & lrow + 1).Value = Trim(txtCustAccnt.Value) \n        Range("I" & lrow + 1).Value = Trim(txtPOSTerm.Value)'},
 {'page': 49,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 49 of 214 \n \n\u202f \n        Range("J" & lrow + 1).Value = Trim(txtCustPerc.Value) \n        Range("K" & lrow + 1).Value = Trim(txtATOPerc.Value) \n        Range("L" & lrow + 1).Value = Trim(txtRBABSB.Value) \n        Range("M" & lrow + 1).Value = Trim(txtRBAAccnt.Value) \n        Range("N" & lrow + 1).Value = Trim(txtATOPayment.Value) \n        Range("O" & lrow + 1).Value = Trim(txtFileRefNum.Value) \n        Range("P" & lrow + 1).Value = ThisWorkbook.Sheets("HOME").Range("UserName").Value \n        Range("Q" & lrow + 1).Value = Right(Sheets("LUT").Cells(lrow + 1, "D").Value, \nLen(Sheets("LUT").Cells(lrow + 1, "D").Value) - 7) \n \n        Range("A" & lrow + 1).Formula = "=D" & lrow + 1 & "&"" - ""&" & "I" & lrow + 1 \n        Range("B" & lrow + 1).FormulaR1C1 = "=RC[8]+RC[9]" \n \n        Range("A" & lrow + 1).Interior.Color = RGB(255, 230, 153) \n        Range("B" & lrow + 1).Interior.Color = RGB(255, 230, 153) \n \n        Range("B" & lrow + 1).Font.Bold = True \n \n        With ThisWorkbook.Worksheets("LUT") \n            With .Range("A" & lrow + 1 & ":" & "Q" & lrow + 1) \n                .Font.Size = 9 \n                .HorizontalAlignment = xlCenter \n                .VerticalAlignment = xlVAlignTop \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n            End With \n        End With \n \n        Range("C" & lrow + 1).HorizontalAlignment = xlLeft \n        Range("E" & lrow + 1).HorizontalAlignment = xlLeft \n \n        \'Adding values to ATO remaining AMount Sheet. \n        If Trim(txtATOAmt.Value) <> "" Then \n            ThisWorkbook.Sheets(SheetATORemainingAmount).Select \n         \'   Dim lrow As Long \n            lrow = Cells(Rows.Count, "A").End(xlUp).Row \n \n \n \n            \'To set the format to Text from default General \n            Range("A" & lrow + 1 & ":H" & lrow + 1).NumberFormat = "@" \n \n            \'format and color \n            Range("E" & lrow + 1).NumberFormat = "$#,##0.00" \n            Range("E" & lrow + 1).Interior.Color = RGB(242, 242, 242) \n \n \n            Range("A" & lrow + 1).Value = Trim(txtFileRefNum.Value) \n            Range("B" & lrow + 1).Value = Trim(txtATOPayment.Value) \n            Range("C" & lrow + 1).Value = "SAPSPAU" + Trim(txtAccntNum.Value) \n            Range("D" & lrow + 1).Value = " Merchant Garnishee - " + Trim(txtCustAcctNme.Value) \n            Range("E" & lrow + 1).Value = Trim(txtATOAmt.Value) \n \n            With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n                With .Range("A" & lrow + 1 & ":" & "H" & lrow + 1) \n                    .Font.Size = 9 \n                    .HorizontalAlignment = xlCenter \n                    .VerticalAlignment = xlVAlignTop \n                    .Borders.LineStyle = xlContinuous \n                    .Borders.Weight = xlThin \n                End With \n            End With \n \n \n \n            If Not InsertIntoDB(Trim(txtFileRefNum.Value), Trim(txtATOPayment.Value), "SAPSPAU" + \nTrim(txtAccntNum.Value), " Merchant Garnishee - " + Trim(txtCustAcctNme.Value), Trim(txtATOAmt.Value)) \nThen \n                ErrBox "Unable to insert ATO Remaining Amount to Database", "Error message" \n                Exit Sub \n            End If \n \n \n        End If \n \n  clearForm'},
 {'page': 50,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 50 of 214 \n \n\u202f \n \n    UserResponse = MsgBox2("Record added successfully. Do you want to add more?", vbYesNo + vbQuestion, \n"Add More") \n \n    If UserResponse = vbYes Then \n        AutoPopulateData \n        txtAccntMG.SetFocus \n    Else \n      LUTForm.Hide \n    End If \n \n \nEnd Sub \n \nPrivate Sub UserForm_Activate() \nAutoPopulateData \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \nAutoPopulateData \nEnd Sub \n \nPrivate Sub AutoPopulateData() \ntxtAccntMG.Value = "Merchant Garnishee - " \ntxtRBABSB.Value = "093003" \ntxtRBAAccnt.Value = "316385" \ntxtAccntMG.SetFocus \nEnd Sub \n \n\'@1.4 Form - NoteForm \n \nPrivate FullNote As String \n \nPrivate Sub NoteCard_Click() \n    Application.Cursor = xlWait \n \n    Delay 100 \n \n    CopyText NoteForm.NoteCard.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub NoteCommSee_Click() \n    Application.Cursor = xlWait \n \n    Delay 100 \n \n    CopyText FullNote           \'NoteForm.NoteCommSee.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub Done_Click() \n    Unload NoteForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    Dim pos As Integer \n    Dim Note As String \n \n \n    NoteForm.NoteCard.Caption = ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = "" \n \n    Note = DecryptData(ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value) \n \n    pos = InStr(1, Note, "~") \n    If pos > 0 Then \n        Note = Left(Note, pos - 1) \n    End If \n \n    NoteForm.NoteCommSee.Caption = Note \n    FullNote = Replace(ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value, "~", vbLf) \n \n    ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value = "" \n \n    With NoteForm \n        .StartUpPosition = 0'},
 {'page': 51,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 51 of 214 \n \n\u202f \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.5 Form - PasswdChgForm \n \nOption Explicit \n \nPrivate Function HaveLetter(Text As String) As Boolean \n    Dim i As Long, Count As Long \n    Dim Ch As String \n \n    Count = 0 \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n        If (Ch >= "A" And Ch <= "Z") Or (Ch >= "a" And Ch <= "z") Then \n            Count = Count + 1 \n        End If \n    Next i \n \n    HaveLetter = (Count > 0)    \'at lest 1 letter \nEnd Function \n \nPrivate Function HaveUpper(Text As String) As Boolean \n    Dim i As Long, Count As Long \n    Dim Ch As String \n \n    Count = 0 \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n        If Ch >= "A" And Ch <= "Z" Then \n            Count = Count + 1 \n        End If \n    Next i \n \n    HaveUpper = (Count > 0)    \'at lest 1 letter \nEnd Function \n \nPrivate Function HaveLower(Text As String) As Boolean \n    Dim i As Long, Count As Long \n    Dim Ch As String \n \n    Count = 0 \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n        If Ch >= "a" And Ch <= "z" Then \n            Count = Count + 1 \n        End If \n    Next i \n \n    HaveLower = (Count > 0)    \'at lest 1 letter \nEnd Function \n \nPrivate Function HaveDigit(Text As String) As Boolean \n    Dim i As Long, Count As Long \n    Dim Ch As String \n \n    Count = 0 \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n        If Ch >= "0" And Ch <= "9" Then \n            Count = Count + 1 \n        End If \n    Next i \n \n    HaveDigit = (Count > 0)    \'at lest 1 digit \nEnd Function \n \nPrivate Function HaveValidPassword(Text As String, Which As String) As Boolean \n    HaveValidPassword = False \n \n    If Len(Text) < 8 Then \n        ErrBox "The " & Which & " password must contain at least 8 characters!", "Password Length" \n        Exit Function'},
 {'page': 52,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 52 of 214 \n \n\u202f \n    End If \n \n    If Not HaveUpper(Text) Then \n        ErrBox "The " & Which & " password must contain at least 1 upper case letter!", "Password Upper \nCase Letter" \n        Exit Function \n    End If \n \n \n    If Not HaveLower(Text) Then \n        ErrBox "The " & Which & " password must contain at least 1 lower case letter!", "Password Lower \nCase Letter" \n        Exit Function \n    End If \n \n    If Not HaveDigit(Text) Then \n        ErrBox "The " & Which & " password must contain at least 1 number!", "Password Number" \n        Exit Function \n    End If \n \n    HaveValidPassword = True \nEnd Function \n \nPrivate Sub OK_Click() \n    If Not HaveValidPassword(PasswdChgForm.BU_New.Value, "Business User") Then Exit Sub \n    If Not HaveValidPassword(PasswdChgForm.MU_New.Value, "Manager") Then Exit Sub \n \n    If PasswdChgForm.BU_New.Value <> PasswdChgForm.BU_Confirm.Value Then \n        ErrBox "The Business User passwords entered do not match!", "Confirm Passwords" \n        Exit Sub \n    End If \n \n    If PasswdChgForm.MU_New.Value <> PasswdChgForm.MU_Confirm.Value Then \n        ErrBox "The Manager passwords entered do not match!", "Confirm Passwords" \n        Exit Sub \n    End If \n \n    If PasswdChgForm.BU_New.Value = PasswdChgForm.MU_New.Value Then \n        ErrBox "The Business User and Manager passwords can not be the same!", "Same Passwords" \n        Exit Sub \n    End If \n \n    If FindHash(Hash_BU, BASE64SHA1(PasswdChgForm.BU_New.Value)) Then \n        ErrBox "The Business User Password can not be the same as the previous 15 passwords!", "Same \nPassword" \n        Exit Sub \n    End If \n \n    If FindHash(Hash_MU, BASE64SHA1(PasswdChgForm.MU_New)) Then \n        ErrBox "The Manager Password can not be the same as the previous 15 passwords!", "Same Password" \n        Exit Sub \n    End If \n \n    If Have_BOI Then \n        If Not HaveValidPassword(PasswdChgForm.BOI_New.Value, SheetBOI) Then Exit Sub \n \n        If PasswdChgForm.BOI_New.Value <> PasswdChgForm.BOI_Confirm.Value Then \n            ErrBox "The " & SheetBOI & " passwords entered do not match!", "Confirm Passwords" \n            Exit Sub \n        End If \n \n        If FindHash(Hash_BOI, EncodeBase64(StrToBytes(XorEnc(PasswdChgForm.BOI_New.Value)))) Then \n            ErrBox "The " & SheetBOI & " Password can not be the same as the previous 15 passwords!", \n"Same Password" \n            Exit Sub \n        End If \n    End If \n \n    If Have_Adj Then \n        If Not HaveValidPassword(PasswdChgForm.Adj_New.Value, "Adjustment") Then Exit Sub \n \n        If PasswdChgForm.Adj_New.Value <> PasswdChgForm.Adj_Confirm.Value Then \n            ErrBox "The Adjustment passwords entered do not match!", "Confirm Passwords" \n            Exit Sub \n        End If \n \n        If FindHash(Hash_ADJ, EncodeBase64(StrToBytes(XorEnc(PasswdChgForm.Adj_New.Value)))) Then'},
 {'page': 53,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 53 of 214 \n \n\u202f \n            ErrBox "The Adjustment Password can not be the same as the previous 15 passwords!", "Same \nPassword" \n            Exit Sub \n        End If \n    End If \n \n    If Not IsDate(PasswdChgForm.Exp_Date.Value) Then \n        ErrBox "The Expiry Date entered is not a valid date!", "Expiry Date" \n        Exit Sub \n    End If \n \n    If DateValue(PasswdChgForm.Exp_Date.Value) < Date Then \n        WarnBox "The Expiry Date is set before today!", "Expiry Date" \n    End If \n \n    PasswordChange1 = PasswdChgForm.BU_New.Value \n    PasswordChange2 = PasswdChgForm.MU_New.Value \n    PasswordExpiry = PasswdChgForm.Exp_Date.Value \n \n    If Have_BOI Then PasswordChange3 = PasswdChgForm.BOI_New.Value \n    If Have_Adj Then PasswordChange4 = PasswdChgForm.Adj_New.Value \n \n    If Not PasswordEmails() Then \n        ErrBox "Unable to create password emails!", "Password Emails" \n        Exit Sub \n    End If \n \n    Unload PasswdChgForm \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    PasswordCancel = True \n    Unload PasswdChgForm \nEnd Sub \n \nPrivate Sub BU_New_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer) \n  If KeyCode = vbKeyReturn Then \'enter key presses OK button \n     OK_Click \n     KeyCode.Value = 0 \n  End If \nEnd Sub \n \nPrivate Sub ComboBox1_Change() \n    Dim Months As Long \n \n    Select Case PasswdChgForm.ComboBox1.ListIndex \n        Case 0 \n            Months = 3 \n        Case 1 \n            Months = 4 \n        Case 2 \n            Months = 6 \n        Case 3 \n            Months = 9 \n        Case 4 \n            Months = 12 \n        Case 5 \n            Months = -1 \n    End Select \n \n    If Months = -1 Then \n        PasswdChgForm.Exp_Date.Value = "31/12/9999" \n    Else \n        PasswdChgForm.Exp_Date.Value = Format(DateAdd("m", Months, Format(Date, "dd/mm/yyyy")), \n"dd/mm/yyyy") \n    End If \n \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    With PasswdChgForm \n        .Exp_Date.Value = Format(DateAdd("m", 6, Format(Date, "dd/mm/yyyy")), "dd/mm/yyyy") \n \n        PasswordChange1 = "" \n        PasswordChange2 = "" \n        PasswordChange3 = "" \n        PasswordChange4 = ""'},
 {'page': 54,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 54 of 214 \n \n\u202f \n \n        PasswordCancel = False \n \n        .ComboBox1.List = Array("3 months", "4 months", "6 months", "9 months", "12 months", "Never") \n        .ComboBox1.ListIndex = 2 \n \n        .BOI_New.Enabled = Have_BOI \n        .L_BOI_New.Enabled = Have_BOI \n        .BOI_Confirm.Enabled = Have_BOI \n        .L_BOI_Confirm.Enabled = Have_BOI \n \n        .Adj_New.Enabled = Have_Adj \n        .L_Adj_New.Enabled = Have_Adj \n        .Adj_Confirm.Enabled = Have_Adj \n        .L_Adj_Confirm.Enabled = Have_Adj \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.6 Form - PasswordForm \n \nPrivate Sub OK_Click() \n    InputPassword = PasswordForm.TextBox1.Value \n    Unload PasswordForm \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    InputPassword = "" \n    PasswordCancel = True \n    Unload PasswordForm \nEnd Sub \n \nPrivate Sub TextBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer) \n \n  If KeyCode = vbKeyReturn Then \'enter key presses OK button \n     OK_Click \n     KeyCode.Value = 0 \n  End If \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    With PasswordForm \n        .Label1.Caption = PasswordPrompt \n        .Caption = PasswordTitle \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.7 Form - QAForm \n \nOption Explicit \n \nPrivate QARow As Long \n \nPrivate Sub Card_Click() \n    Application.Cursor = xlWait \n \n    Delay 100 \n \n    CopyText QAForm.Card.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub CmdGarnRef_Click() \n  Application.Cursor = xlWait \n \n    Delay 100'},
 {'page': 55,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 55 of 214 \n \n\u202f \n \n    CopyText QAForm.CmdGarnRef.Caption \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub Yes_Click() \n    Dim Done As Boolean \n    Dim Stamp As String \n \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").NumberFormat = "@" \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = vbYes \n \n    Stamp = "Checked by " & UCase(ThisWorkbook.Worksheets("HOME").Range("Initials").Value) & " - " & \nFormat(Now(), "d/mm at h:mm am/pm") \n    If QAForm.TransNote.Text <> "" Then \n        Stamp = Stamp + ", " \n    End If \n \n    ThisWorkbook.Worksheets(SheetQA).Range("E" & QARow) = Stamp + QAForm.TransNote.Text \n \n    Unload QAForm \nEnd Sub \n \nPrivate Sub No_Click() \n    Dim Done As Boolean \n    Dim Stamp As String \n \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").NumberFormat = "@" \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = vbNo \n \n    Stamp = "Checked by " & UCase(ThisWorkbook.Worksheets("HOME").Range("Initials").Value) & " - " & \nFormat(Now(), "d/mm at h:mm am/pm") \n    If QAForm.TransNote.Text <> "" Then \n        Stamp = Stamp + ", " \n    End If \n \n    ThisWorkbook.Worksheets(SheetQA).Range("E" & QARow) = Stamp + QAForm.TransNote.Text \n \n    Unload QAForm \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").NumberFormat = "@" \n    ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = vbCancel \n \n    Unload QAForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    Dim RowRepl As Long \n    Dim Sign As String \n \n \n \n    With ThisWorkbook.Worksheets("HOME") \n       QARow = CLng(.Range("ReplaceCC").Value) \n        RowRepl = ThisWorkbook.Worksheets(SheetQA).Range("F" & QARow).Value \n        \'QAForm.Card.Caption = Righ(DecryptData(ThisWorkbook.Worksheets(SheetQA).Range("A" & \nQARow).Value), Len(DecryptData(ThisWorkbook.Worksheets(SheetQA).Range("A" & QARow).Value)) - 2) \n        QAForm.Card.Caption = Right(DecryptData(ThisWorkbook.Worksheets(SheetQA).Range("A" & \nQARow).Value), Len(DecryptData(ThisWorkbook.Worksheets(SheetQA).Range("A" & QARow).Value)) - 2) \n        .Range("ReplaceCC").Value = ""   \'return the answer in this cell \n        QAForm.CmdGarnRef.Caption = DecryptData(ThisWorkbook.Worksheets(SheetQA).Range("B" & QARow).Value) \n        QAForm.TransNote.Text = "" \n    End With \n \n    With ThisWorkbook.Worksheets(SheetQA) \n                QAForm.Question.Caption = "This transaction for Merchant Garnishee account " & \nDecryptData(.Range("A" & QARow).Value) & _ \n                                      " has been identified for QA, please verify that this transaction \nwas processed as per business " & _ \n                                      "expectation and correct clearing entries have been calculated for \nreturn to the Customer and ATO.   " \n \n    End With'},
 {'page': 56,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 56 of 214 \n \n\u202f \n     With ThisWorkbook.Worksheets(SheetInteraction) \n        QAForm.txtMerchantGarnisheeAccount.Caption = DecryptData(.Range("A" & RowRepl).Value) \n        QAForm.txtCompRef.Caption = DecryptData(.Range("B" & RowRepl).Value) \n        QAForm.txtDate.Caption = DecryptData(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value) \n \n     End With \n \n \n     With ThisWorkbook.Worksheets(SheetAction) \n     Dim var As Single \n       QAForm.txtDesc.Caption = DecryptData(.Range("AY" & RowRepl).Value) \n       QAForm.txtTotAmt.Caption = DecryptData(Format(Sign & .Range("B" & RowRepl).Value, "$#,##0.00")) \n       var = DecryptData(.Range("J" & RowRepl).Value) \n       QAForm.txtCustPer.Caption = DecryptData(Format(Sign & var, "0%")) \n       QAForm.txtCusAmnt.Caption = DecryptData(Format(Sign & .Range("M" & RowRepl).Value, "$#,##0.00")) \n       QAForm.txtCusAccnt.Caption = DecryptData(.Range("T" & RowRepl).Value + .Range("U" & RowRepl).Value) \n       var = 0 \n       var = DecryptData(.Range("K" & RowRepl).Value) \n       QAForm.txtATOPerc.Caption = DecryptData(Format(Sign & var, "0%")) \n       QAForm.txtATOAmt.Caption = DecryptData(Format(Sign & .Range("N" & RowRepl).Value, "$#,##0.00")) \n       QAForm.txtATORef.Caption = DecryptData(.Range("AK" & RowRepl).Value) \n \n     End With \n \n \n \n    With QAForm \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.8 Form - SelectDateForm \n \nPrivate Sub DateSelectOk_Click() \n  If Not validDateSelection() Then \n    Exit Sub \n  End If \n If ((FindDay(CDate(SelectDateForm.DatePicker.Value)) = "friday") And ((chkboxSat.Value = False) Or \n(chkBoxSunday.Value = False))) Then \n        Dim okCancel As Integer \n        okCancel = MsgBox2("Are you sure you want to exclude Saturday/Sunday.", vbOKCancel) \n        If okCancel <> 1 Then \n            Exit Sub \n        End If \n End If \n \nWith ThisWorkbook.Worksheets("HOME") \n    .Range("RUNDATE").Value = CDate(Format(Now, "dd/mm/yyyy")) \n    .Range("ASOFDATE").Value = CDate(Format(SelectDateForm.DatePicker.Value, "dd/mm/yyyy")) \n \n    WriteLog "DateForm: RunDate is " & Format(.Range("RUNDATE").Value, "dd/mm/yyyy") & ", AsOfDate is " & \nFormat(.Range("ASOFDATE").Value, "ddd dd/mm/yyyy") & ", Sat is " & chkboxSat.Value & ", Sun is " & \nchkBoxSunday \nEnd With \n \nDim finalResult As Boolean \nfinalResult = RunData(CDate(SelectDateForm.DatePicker.Value), chkboxSat.Value, chkBoxSunday.Value) \n \nEnd Sub \n \nPrivate Function EnableDisableFrame() \n Dim selDay As String \n selDay = FindDay(SelectDateForm.DatePicker.Value) \n \n If (selDay = "friday") Then \n    frmeExclSatSun.Enabled = True \n    chkboxSat.Enabled = True \n    chkBoxSunday.Enabled = True \n Else \n    frmeExclSatSun.Enabled = False \n    chkboxSat.Enabled = False \n    chkBoxSunday.Enabled = False \n    chkboxSat.Value = True'},
 {'page': 57,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 57 of 214 \n \n\u202f \n    chkBoxSunday.Value = True \n \n End If \nEnd Function \n \nFunction validDateSelection() As Boolean \n    validDateSelection = True \n    If Not IsDate(SelectDateForm.DatePicker.Value) Or CDate(SelectDateForm.DatePicker.Value) > Date Then \n        validDateSelection = False \n        SelectDateForm.DatePicker.Value = Format(Date - 1, "dd/mm/yyyy") \n        ErrBox "Please select a valid date!", "Date" \n    End If \nEnd Function \n \nPrivate Sub UserForm_Activate() \n    SelectDateForm.DatePicker.Value = Format(Date - 1, "dd/mm/yyyy") \n    Application.Cursor = xlDefault \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \nSelectDateForm.DatePicker.Value = Format(Date - 1, "dd/mm/yyyy") \n EnableDisableFrame \n \n    With SelectDateForm \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n Application.Cursor = xlDefault \n \nEnd Sub \n \nPrivate Sub DatePicker_change() \n    If SelectDateForm.DatePicker.Value <> "" And IsDate(SelectDateForm.DatePicker.Value) Then \n        validDateSelection \n        EnableDisableFrame \n    End If \nEnd Sub \n \n\'@1.9 Form - SignatureForm \n \nPrivate Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer) \n    If CloseMode = vbFormControlMenu Then \n        Cancel = True \n    End If \nEnd Sub \n \nPrivate Sub OK_Click() \n    FileArrSelected = SignatureForm.ListBox1.Value \n    Unload SignatureForm \nEnd Sub \n \nPrivate Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean) \n    FileArrSelected = SignatureForm.ListBox1.Value \n    Unload SignatureForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    Dim i As Long \n \n    With ListBox1 \n        For i = 1 To UBound(FileArr) \n            .AddItem Left(FileArr(i), Len(FileArr(i)) - 4) \n        Next i \n    End With \n \n    With SignatureForm \n        .ListBox1.ListIndex = 0 \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub'},
 {'page': 58,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 58 of 214 \n \n\u202f \n\'@1.10 Form - SplashForm \n \nPrivate ToolName As String \n \nPrivate Sub UserForm_Activate() \n    Sleep 1000 \n    SplashForm.Label10.Caption = "Initalising " & ToolName & " ." \n    SplashForm.Repaint \n \n    Sleep 1500 \n    SplashForm.Label10.Caption = "Initalising " & ToolName & " .." \n    SplashForm.Repaint \n \n    Sleep 1500 \n    SplashForm.Label10.Caption = "Initalising " & ToolName & " ..." \n    SplashForm.Repaint \n \n    Sleep 1500 \n    SplashForm.Label10.Caption = "Initalising " & ToolName & " ... OK" \n    SplashForm.Repaint \n \n    Sleep 1500 \n    Unload SplashForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    With SplashForm \n        ToolName = Replace(ThisWorkbook.Worksheets("HOME").Range("I1").Value, "TOOL", "Tool") \n \n        .Label1.Caption = ToolName \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    HideTitleBarAndBorder Me \n \n    Application.Cursor = xlDefault \n \n    Sleep 500 \nEnd Sub \n \n\'@1.11 Form - StepForm \n \nOption Explicit \n \nPrivate Sub OK_Click() \n    With StepForm \n        If .OptionButton1.Value = True Then CurrentStep = Run1 \n        If .OptionButton2.Value = True Then CurrentStep = Run2 \n        If .OptionButton3.Value = True Then CurrentStep = Run3 \n        If .OptionButton4.Value = True Then CurrentStep = Run4 \n    End With \n \n    Unload StepForm \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    Unload StepForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    With StepForm \n        .OptionButton1.Caption = Run1 \n        .OptionButton2.Caption = Run2 \n        .OptionButton3.Caption = Run3 \n        .OptionButton4.Caption = Run4 \n \n        If Run2 = "" Then .OptionButton2.Enabled = False \n        If Run3 = "" Then .OptionButton3.Enabled = False \n \n        CurrentStep = Run1 \n        .OptionButton1.Value = True \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)'},
 {'page': 59,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 59 of 214 \n \n\u202f \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.12 Form - SummaryForm \n \nPrivate Sub OK_Click() \n    Unload SummaryForm \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    SummaryForm.Label4.Caption = SumSingle \n    SummaryForm.Label5.Caption = SumNotFound \n    SummaryForm.Label6.Caption = SumNone \n \n    If SumNotFound = 0 Then \n        SummaryForm.Label2.ForeColor = RGB(0, 0, 0) \n        SummaryForm.Label5.ForeColor = RGB(0, 0, 0) \n    Else \n        SummaryForm.Label2.ForeColor = RGB(192, 0, 0)   \'a value here is an error in the sql query \n        SummaryForm.Label5.ForeColor = RGB(192, 0, 0)   \'a value here is an error in the sql query \n    End If \n \n    SummaryForm.Label9.Caption = SumTotal \n \n    With SummaryForm \n        .WhiteBG.Top = 0 \n        .WhiteBG.Height = .Height - 66.8 \n \n        .OK.Top = .Height - 58.8 \n        .OK.Left = .Width - 83.4 \n        .OK.Height = 21 \n        .OK.Width = 60 \n \n        .StartUpPosition = 0 \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.13 Form - TeradataForm \n \nPrivate Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer) \n    If CloseMode = vbFormControlMenu Then \n        \'MsgBox2 "Use a button to close this userform." \n        Cancel = True \n    End If \nEnd Sub \n \nPrivate Sub Cancel_Click() \n    TeraUsername = "" \n    TeraPasswd = "" \n    TeraCancel = True \n \n    Unload TeradataForm \n    Application.Cursor = xlWait \nEnd Sub \n \nPrivate Sub OK_Click() \n    TeraUsername = TeradataForm.TextBox3.Value \n    TeraPasswd = TeradataForm.TextBox4.Value \n    TeraCancel = False \n \n    Unload TeradataForm \n    Application.Cursor = xlWait \nEnd Sub \n \nPrivate Sub UserForm_Initialize() \n    TeraCancel = False \n    TeradataForm.TextBox3.Value = Environ("username") \n \n    With TeradataForm \n        .StartUpPosition = 0'},
 {'page': 60,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 60 of 214 \n \n\u202f \n        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width) \n        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height) \n    End With \n \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.14 Sheet - Sheet1 \n \nOption Explicit \nDim SheetName As String \n \nSub AddLUT() \n    LUTForm.Show \nEnd Sub \n \nSub Start() \n    Dim lrow As Long \n    Dim Ticks As LongPtr \n    Dim SQL As String \n \n    If IsBusy() Then \n        Exit Sub \n    End If \n \n    BusyOn  \'now we are busy \n \n    Ticks = GetTickCount() \n \n    Application.ScreenUpdating = False \n    Application.ErrorCheckingOptions.NumberAsText = False \n \n    StatReset \n \n    If ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run1 Then \n        WriteLog "Press: " & Run1 & " button" \n        StatClear \n        DoClear \n        If ThisWorkbook.Sheets.Count > DefaultNumberOfSheets Then \n            GoTo Done \n        End If \n \n        BackupDB \n        SelectDateForm.Show     \'RunData() is in SelectDateForm.DateSelectOk_Click() \n \n        If SheetExists(SheetMGDATA) Then \n            If (ThisWorkbook.Worksheets("HOME").Range("ONE_TOTAL").Value = 0) And \n(Worksheets(SheetMGDATA).UsedRange.Rows.Count <= 1) Then \n                ErrBox "No Merchant Data found to process!", "Merchant Data" \n                GoTo Done \n            End If \n \n            If ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value = "" Or \nThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = "" Then GoTo Done \n \n            If SheetExists(SheetManual) Then \n                SheetName = SheetManual \n            Else \n                SheetName = SheetInteraction \n            End If \n \n            If Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "ddd") = "Wed" Then \n                If Not SheetExists(SheetQA) Then \n                    AppendNewWorksheet SheetQA, SheetName \n                End If \n                AddQA 10, 15, True      \'test both manual and auto \n            \'Else \n                \'AddQA 10, 0, True       \'testing only manual \n            End If \n \n            If Not CreateATORemainingQA() Then GoTo Done \n \n            UnprotectAll    \'enforce user protections \n \n            StatMsg True, "Completed (" & Round((GetTickCount() - Ticks) / 1000, 2) & " seconds)" \n            ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run4 \n        End If'},
 {'page': 61,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 61 of 214 \n \n\u202f \n     ElseIf ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run4 Then \n        If IsGreyEmail() = False Then \n            WriteLog "Press: " & Run4 & " button" \n \n            If CheckEmailAdd() = False Then GoTo Done     \'check staff list for valid email addresses \n \n            StatClear 150 \n \n            If SheetExists(SheetManual) Then \n                SheetName = SheetManual \n            Else \n                SheetName = SheetInteraction \n            End If \n \n            If Not ATOCheckComplete() Then GoTo Done \n            If Not QAComplete() Then GoTo Done \n            If Not QAPass() Then GoTo Done \n \n            If Not BulkUploadBOI() Then GoTo Done \n \n            WriteLog "Sending BOI Verifiaction Email" \n            If Not SendEmails() Then GoTo Done \n            GreyEmail True \n \n           WriteLog "Generating VerifyBOI Sheet" \n            If Not SheetExists(SheetVerifyBOI) Then \n                AppendNewWorksheet SheetVerifyBOI, SheetName \n            End If \n \n \n            AddVerify \n \n            WriteLog "Saving Workbook." \n            SaveAsWorkBook \n \n            \'change formatting of ATO Remaining Amount \n            With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n                lrow = .Cells(Rows.Count, "A").End(xlUp).Row \n                 With .Range("A1:H" & lrow) \n                         .HorizontalAlignment = xlCenter \n                         .Borders.LineStyle = xlContinuous \n                         .Borders.Weight = xlThin \n                         .NumberFormat = "$#,##0.00" \n                         .Font.Size = "9" \n                 End With \n            End With \n \n            UnprotectAll    \'enforce user protections \n \n            StatMsg True, "Completed (" & Round((GetTickCount() - Ticks) / 1000, 2) & " seconds)" \n        End If \n    End If \n \nDone: \n    BusyOff \n \n    Application.ScreenUpdating = True \nEnd Sub \n \nSub Update() \n    If Not IsMasterPassword() Then \n        ErrBox "Admin access is required to change steps!", "Access" \n        Exit Sub \n    End If \n \n    StepForm.Show \n \n    If CurrentStep = "" Then Exit Sub \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Shapes("Run").TextFrame.Characters.Text = CurrentStep \n        .Shapes("Run").TextFrame.Characters.Font.Color = RGB(0, 0, 0) \n    End With \n \n    GreyEmailReset \n    BusyOff \nEnd Sub'},
 {'page': 62,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 62 of 214 \n \n\u202f \n \nSub Splash() \n    SplashForm.Show \nEnd Sub \n \nSub Clear() \n    Dim UserResponse As Integer \n    Dim OrgScreenUpdating As Boolean \n \n    OrgScreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    If IsBusy() Then \n        Exit Sub \n    End If \n \n    WriteLog "Press: " & ThisWorkbook.Worksheets("HOME").Shapes("Clear").TextFrame.Characters.Text & " \nbutton" \n \n    BusyOn  \'now we are busy \n \n    UserResponse = DoClear \n \n    BusyOff \n \n    If UserResponse = vbYes Then \n        ThisWorkbook.Worksheets("HOME").Shapes("Clear").TextFrame.Characters.Font.Color = RGB(192, 192, \n192) \n    End If \n \n    Application.ScreenUpdating = OrgScreenUpdating \nEnd Sub \n \nPrivate Function DoClear() As Integer \n    Dim Sheet As Worksheet \n    Dim UserResponse As Integer \n    Dim OrgSreenUpdating As Boolean \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    If ThisWorkbook.Sheets.Count > DefaultNumberOfSheets Then \n        UserResponse = MsgBox2("Do you want to clear all data?", vbYesNo + vbQuestion, "Clear Data") \n    Else \n        UserResponse = vbNo \n    End If \n \n    DoClear = UserResponse \n    If UserResponse = vbYes Then \n        For Each Sheet In ThisWorkbook.Worksheets \n \n            If Sheet.Name <> "HOME" And Sheet.Name <> SheetLookUp And Sheet.Name <> \nSheetATORemainingAmount Then \n                DeleteWorksheet Sheet.Name \n            End If \n        Next Sheet \n \n \n        StatClear \n \n        With ThisWorkbook.Worksheets("HOME") \n            .Shapes("Run").TextFrame.Characters.Text = Run1 \n            GreyEmailReset \n \n            .Range("ASOFDATE").Value = "" \n            .Range("RUNDATE").Value = "" \n \n            .Range("MGDATA_COUNT").Value = 0 \n \n            .Range("BOI_CUST_COUNT").Value = 0 \n            .Range("BOI_ATO_COUNT").Value = 0 \n            .Range("MANUAL_COUNT").Value = 0 \n \n            .Range("BOI_MG_COUNT").Value = 0 \n            .Range("BOI_CUST_01_COUNT").Value = 0 \n            .Range("BOI_ATO_01_COUNT").Value = 0'},
 {'page': 63,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 63 of 214 \n \n\u202f \n            .Range("INTERACTION_COUNT").Value = 0 \n            .Range("PPS_BID").Value = "" \n \n            .Range("MGDATA_DR").Value = "" \n            .Range("MGDATA_CR").Value = "" \n \n            .Range("BOI_CUST_DR").Value = "" \n            .Range("BOI_CUST_CR").Value = "" \n            .Range("BOI_ATO_DR").Value = "" \n            .Range("BOI_ATO_CR").Value = "" \n            .Range("MANUAL_DR").Value = "" \n            .Range("MANUAL_CR").Value = "" \n \n            .Range("BOI_MG_DR").Value = "" \n            .Range("BOI_MG_CR").Value = "" \n            .Range("BOI_CUST_01_DR").Value = "" \n            .Range("BOI_CUST_01_CR").Value = "" \n            .Range("BOI_ATO_01_DR").Value = "" \n            .Range("BOI_ATO_01_CR").Value = "" \n \n            .Range("RUN_DATE_TIME").Value = "" \n \n            DelBalCheck \n          End With \n    End If \n \n    Application.ScreenUpdating = OrgSreenUpdating \nEnd Function \n \nSub Exit1() \n    Dim UserResponse As Integer \n \n    If IsBusy() Then \n        Exit Sub \n    End If \n \n    WriteLog "Press: " & ThisWorkbook.Worksheets("HOME").Shapes("Exit").TextFrame.Characters.Text & " \nbutton" \n \n    BusyOn  \'now we are busy \n \n    UserResponse = MsgBox2("Do you want to exit?", 36, "Exit?") \n    If UserResponse = vbYes Then \n        BusyOff \n        CloseBook \n        End \n    End If \n \n    BusyOff \nEnd Sub \n \nPrivate Sub CloseBook() \n    Application.DisplayAlerts = False \n    ActiveWorkbook.Close \n    Application.DisplayAlerts = True \nEnd Sub \n \nSub Click_Color() \n    Dim ActiveShape As Shape \n    Dim ButtonName As String \n \n    ButtonName = Application.Caller \n    Set ActiveShape = ActiveSheet.Shapes(ButtonName) \n \n    SetBkColourSheet "HOME", ActiveShape.Fill.ForeColor.RGB \nEnd Sub \n \nPrivate Sub SetBkColourSheet(Sheet As String, RGB As Long) \n    On Error GoTo Err \n    ThisWorkbook.Worksheets(Sheet).Cells.Interior.Color = RGB \n    ThisWorkbook.Worksheets(Sheet).Range("Macro1").Interior.ColorIndex = 0     \'no fill \n    ThisWorkbook.Worksheets(Sheet).Range("Macro2").Interior.ColorIndex = 0     \'no fill \n    \'ThisWorkbook.Worksheets("HOME").CheckBox1.BackColor = \nThisWorkbook.Worksheets("HOME").Range("A1").Interior.Color \nErr: \n    On Error GoTo 0 \nEnd Sub'},
 {'page': 64,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 64 of 214 \n \n\u202f \n \nPrivate Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean) \n    If Not Intersect(Target, ThisWorkbook.Worksheets("HOME").Range(StaffTable & "," & EmailTable)) Is \nNothing Then \n        Cancel = False \n \n        ShowStaffCell Target \n    End If \nEnd Sub \n \nPrivate Sub Worksheet_SelectionChange(ByVal Target As Range) \n    If Not Intersect(Target, ThisWorkbook.Worksheets("HOME").Range(StaffTable & "," & EmailTable)) Is \nNothing Then \n        ShowStaffCell Target \n    End If \nEnd Sub \n \n\'@1.15 Sheet - Sheet10 \n \n \n\'@1.16 Sheet - Sheet2 \n \n \n\'@1.17 Sheet - Sheet3 \n \n \n\'@1.18 Sheet - Sheet4 \n \n \n\'@1.19 Sheet - Sheet5 \n \n \n\'@1.20 Sheet - Sheet6 \n \n \n\'@1.21 Sheet - Sheet7 \n \n \n\'@1.22 Sheet - Sheet8 \n \n \n\'@1.23 Sheet - ThisWorkbook \n \nPublic WithEvents App As Application \n \nConst Version As String = "V2023.09.29"     \'current version \n \nPrivate Sub Workbook_BeforeClose(Cancel As Boolean) \n    WriteLog "Close: " & ThisWorkbook.Name & " (" & Version & ")" \nEnd Sub \n \nPrivate Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean) \n    Dim OrgSreenUpdating As Boolean \n \n    ThisWorkbook.Worksheets("HOME").Activate \n    Cancel = False \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    Application.Cursor = xlWait \n \n    ProtectAll \n    BusyOn \n \n    Application.Cursor = xlDefault \n    Application.ScreenUpdating = OrgSreenUpdating \nEnd Sub \n \nPrivate Sub Workbook_Open() \n    Application.ScreenUpdating = False \n \n    InputPassword = "" \n \n    Set App = Application \n \n    Application.WindowState = xlNormal'},
 {'page': 65,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 65 of 214 \n \n\u202f \n    Application.Width = 852 \n    Application.Height = 730 \n \n    Application.ScreenUpdating = False \n \n    ProtectAll \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Range("VERSION").Value = Version \n        .Range("UserName").Value = UCase(Environ("username")) \n        .Range("Access2").Value = "" \n \n        GetStaff \n    End With \n \n    ShowHome \n    CheckBox1_Pos \n    CheckBox1_Show \n    ActiveWindow.Zoom = 90 \n \n    \'For Show/hide of "ADD LUT" button \n    If UCase(ThisWorkbook.Worksheets("HOME").Range("Access")) = "MAN" Or \nUCase(ThisWorkbook.Worksheets("HOME").Range("Access")) = "ADMIN" Then \n        ThisWorkbook.Worksheets("HOME").Shapes("ADD LUT").Visible = True \n    Else \n        ThisWorkbook.Worksheets("HOME").Shapes("ADD LUT").Visible = False \n    End If \n \n \n    BusyOn \n    \'If Not SheetExists("BC460-10") And Not SheetExists("BC466-03") And \nThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run2 Then \n     If Not SheetExists(SheetMGDATA) And Not SheetExists(SheetAction) And \nThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run2 Then \n        \'only to reset when speadsheet if stuck in the wrong state \n        ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run1 \n        StatClear \n    End If \n \n    If ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run1 Then \n        StatClear \n    End If \n \n    Application.Cursor = xlDefault \n    Application.ScreenUpdating = True \n \n    WriteLog "" \n    WriteLog "Open: " & ThisWorkbook.Name & " (" & Version & ")" \n    \'If Not IsDemo() Then \n        \'SplashForm.Show \n    \'End If \nEnd Sub \n \nPrivate Sub App_SheetSelectionChange(ByVal sh As Object, ByVal Target As Range) \n    Dim Row As Long \n    Dim CCNumber As String \n    Dim Rng As String \n    Dim AccNum As String \n \n    If Target.Parent.Parent.Name <> ThisWorkbook.Name Or (Target.Parent.Name <> SheetInteraction And \nTarget.Parent.Name <> SheetVerifyBOI And Target.Parent.Name <> SheetQA And Target.Parent.Name <> \nSheetATORemainingAmount) Then Exit Sub \n \n    Rng = "A:A" \n \n \n        Select Case Target.Parent.Name \n            Case SheetInteraction \n                If Not Intersect(Target, Range(Rng)) Is Nothing And Target.Count = 1 And Not \nIsEmpty(Target) And Target.Row > 1 Then \n                    If Target.Interior.Color = RGB(255, 230, 153) Then  \'yellow \n                        AccNum = ThisWorkbook.Worksheets(SheetInteraction).Range("B" & Target.Row).Value \n                        ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").NumberFormat = "@" \n                        ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = AccNum \n                        ThisWorkbook.Worksheets("HOME").Range("UnclaimedNoteRow").Value = \nThisWorkbook.Worksheets(SheetInteraction).Range("C" & Target.Row).Value \n                        NoteForm.Show'},
 {'page': 66,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 66 of 214 \n \n\u202f \n                        Exit Sub \n                    End If \n                End If \n            Case SheetVerifyBOI \n                Dim lst_Row As Long \n                lst_Row = Cells(Rows.Count, "E").End(xlUp).Row \n                If lst_Row > 1 Then \n                    ThisWorkbook.Worksheets(SheetVerifyBOI).Range("S6").Value = \nThisWorkbook.Worksheets("HOME").Range("FullName").Value \n                    ThisWorkbook.Worksheets(SheetVerifyBOI).Range("S7").Value = \nThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value \n                    ThisWorkbook.Worksheets(SheetVerifyBOI).Range("S8").Value = Time() \n                    ThisWorkbook.Worksheets(SheetVerifyBOI).Columns("A:T").AutoFit \n                End If \n             Case SheetQA \n              If Not Intersect(Target, Range(Rng)) Is Nothing And Target.Count = 1 And Not IsEmpty(Target) \nAnd Target.Row > 1 Then \n                If Target.Interior.Color = RGB(255, 255, 128) Then  \'yellow \n                    If IsManagerPassword() Or IsMasterPassword() Then \n                        ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").NumberFormat = "@" \n                        ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value = Target.Row \n                        QAForm.Show \n                        Select Case ThisWorkbook.Worksheets("HOME").Range("ReplaceCC").Value \n                            Case vbYes \n                                ThisWorkbook.Worksheets(SheetQA).Range("D" & Target.Row).Value = "YES" \n                            Case vbNo \n                                ThisWorkbook.Worksheets(SheetQA).Range("D" & Target.Row).Value = "NO" \n                        End Select \n                        If IsQAComplete() Then LogQA \n                    End If \n \n                End If \n              End If \n              Case SheetATORemainingAmount \n                Rng = "H:H" \n                If Not Intersect(Target, Range(Rng)) Is Nothing And Target.Count = 1 And Not \nIsEmpty(Target) And Target.Row > 1 Then \n                    If Target.Interior.Color = RGB(255, 0, 0) Then \'red \n                         If IsManagerPassword() Or IsMasterPassword() Then \n                            Dim UserResponse As Integer \n                            UserResponse = MsgBox2("Are you sure you want to delete.", vbYesNo + \nvbQuestion, "Add More") \n                            If UserResponse = vbYes Then \n                                Dim rec As Boolean \n                                rec = \nDeleteRecord(ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("B" & Target.Row).Value, Target.Row) \n                            Else \n                                Exit Sub \n                            End If \n                         End If \n                    End If \n                End If \n        End Select \n \n \n \n \nEnd Sub \n \n\'@1.24 Module - ActionData \n \n\'------------------------------------------------------- \n\' \n\'       Action and Manual tab related subroutines and functions \n\' \n\'------------------------------------------------------- \n \n\'Option Explicit \n \nPublic Const SheetAction As String = "ACTION" \nPublic Const SheetManual As String = "MANUAL" \n \nPublic Sub CreateAction(Optional Dummy As Boolean) \n    AppendNewWorksheet SheetAction, SheetMGDATA \n \n    HeadingAction SheetAction \nEnd Sub'},
 {'page': 67,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 67 of 214 \n \n\u202f \n \nPublic Sub HeadingAction(SheetName As String) \n    Dim Col As Integer \n \n    With ThisWorkbook.Worksheets(SheetName) \n        .Range("A1").Value = "ACCOUNT_IDENTIFIER" \n        .Range("B1").Value = "TRANS_AMOUNT" \n        .Range("C1").Value = "CREDIT_DEBET_FLAG" \n        .Range("D1").Value = "TRANS_DESCRIPTION" \n        .Range("E1").Value = "In-scope Account" \n        .Range("F1").Value = "In-Scope Entry" \n        .Range("G1").Value = "In-Scope Action" \n        .Range("H1").Value = "Trimed POS Number" \n        .Range("I1").Value = "UniqueKey" \n        .Range("J1").Value = "Customer %" \n        .Range("K1").Value = "ATO %" \n        .Range("L1").Value = "SAP/OB" \n        .Range("M1").Value = "Customer AMT" \n        .Range("N1").Value = "ATO AMT" \n \n        .Range("P1").Value = "Customer - Collecting BSB" \n        .Range("Q1").Value = "Customer - Trancode" \n        .Range("R1").Value = "Customer - Trantype" \n        .Range("S1").Value = "Customer - Override" \n        .Range("T1").Value = "Customer - Ledgerbsb" \n        .Range("U1").Value = "Customer - acno" \n        .Range("V1").Value = "Customer - Amount" \n        .Range("W1").Value = "Customer - Detail 1" \n        .Range("X1").Value = "Customer - Detail 2" \n        .Range("Y1").Value = "Customer - noofchqs" \n        .Range("Z1").Value = "Customer - amtofchqs" \n        .Range("AA1").Value = "Customer - User1" \n        .Range("AB1").Value = "Customer - Description" \n \n        .Range("AD1").Value = "ATO - Collecting BSB" \n        .Range("AE1").Value = "ATO - Trancode" \n        .Range("AF1").Value = "ATO - Trantype" \n        .Range("AG1").Value = "ATO - Override" \n        .Range("AH1").Value = "ATO - Ledgerbsb" \n        .Range("AI1").Value = "ATO - acno" \n        .Range("AJ1").Value = "ATO - Amount" \n        .Range("AK1").Value = "ATO - Detail 1" \n        .Range("AL1").Value = "ATO - Detail 2" \n        .Range("AM1").Value = "ATO - noofchqs" \n        .Range("AN1").Value = "ATO - amtofchqs" \n        .Range("AO1").Value = "ATO - User1" \n        .Range("AP1").Value = "ATO - Description" \n \n        .Range("AR1").Value = "Clearing - Collecting BSB" \n        .Range("AS1").Value = "Clearing - Trancode" \n        .Range("AT1").Value = "Clearing - Trantype" \n        .Range("AU1").Value = "Clearing - Override" \n        .Range("AV1").Value = "Clearing - Ledgerbsb" \n        .Range("AW1").Value = "Clearing - acno" \n        .Range("AX1").Value = "Clearing - Amount" \n        .Range("AY1").Value = "Clearing - Detail 1" \n        .Range("AZ1").Value = "Clearing - Detail 2" \n        .Range("BA1").Value = "Clearing - noofchqs" \n        .Range("BB1").Value = "Clearing - amtofchqs" \n        .Range("BC1").Value = "Clearing - User1" \n        .Range("BD1").Value = "Clearing - Description" \n \n        .Range("BF1").Value = "Merchant Acc BSB" \n        .Range("BG1").Value = "Merchant Account Num" \n        .Range("BH1").Value = "Clearing - Description" \n        .Range("BI1").Value = "Customer Notes" \n        .Range("BJ1").Value = "ATO Notes" \n \n        With .Range("A1:F1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(146, 208, 80) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("G1") \n            .HorizontalAlignment = xlCenter'},
 {'page': 68,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 68 of 214 \n \n\u202f \n            .Font.Bold = True \n            .Interior.Color = RGB(255, 0, 0) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("H1:N1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(128, 128, 128) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("P1:AB1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(221, 235, 247) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("AD1:AP1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(255, 242, 204) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("AR1:BD1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(142, 169, 219) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n        With .Range("BF1:BJ1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(0, 176, 240) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n \n    End With \nEnd Sub \n \nPublic Function GenerateActionData() As Boolean \n    Dim OneRow As Boolean \n \n    StatZero "Creating Action data" \n \n    OneRow = (IsEmpty(Sheets(SheetMGDATA).Range("A3"))) \n    If IsEmpty(Sheets(SheetMGDATA).Range("A2")) Then \n    MsgBox2 "There is no MG Data Found, Please check and make sure MG Data are in place correctly before \nprocess this step!" \n    Exit Function \n    End If \n \n    Sheets(SheetMGDATA).AutoFilterMode = False \n    Sheets(SheetAction).AutoFilterMode = False \n \n    \'Clear Out Previous calculation \n    Sheets(SheetAction).Select \n    Range("A2").Select \n    Range(("A2:BJ2"), Selection.End(xlDown)).Delete Shift:=xlUp \n \n    \'Filter out In-Scope Data for processing          BR=H,BS=I,BT=J \n    Sheets(SheetMGDATA).Select \n    Range("A1").End(xlDown).Offset(0, 7) = "-" \n \n    Range("H1").FormulaR1C1 = "In-scope Account" \n    Range("I1").FormulaR1C1 = "In-Scope Entry" \n    Range("J1").FormulaR1C1 = "In-Scope Action" \n \n    Range("H2").FormulaR1C1 = "=ISNA(MATCH(RC[-7], LUT!C4, 0))" \n    Range("I2").FormulaR1C1 = "=IF(RC[-6]=""C"",TRUE,FALSE)" \n    Range("J2").FormulaR1C1 = "=IF(AND(RC[-2]=FALSE, RC[-1]=TRUE), TRUE, FALSE)" \n \n    Range("H2:J2").Select'},
 {'page': 69,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 69 of 214 \n \n\u202f \n    Range(Selection, Selection.End(xlDown)).Select \n    If Not OneRow Then \n        Selection.FillDown \n    End If \n    Selection.Copy \n    Range("H2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False \n \n    If Application.WorksheetFunction.CountIf(Columns("J:J"), False) > 0 Then \n        ActiveSheet.Columns("A:J").AutoFilter Field:=10, Criteria1:="FALSE" \n        Set Rng = ActiveSheet.AutoFilter.Range \n        Rng.Offset(1, 0).Resize(Rng.Rows.Count - 1).Delete Shift:=xlUp \n    End If \n \n    UnprotectAll \n    Sheets(SheetMGDATA).AutoFilterMode = False \n    Sheets(SheetMGDATA).Select \n    Range("A:A,B:B,C:C,D:D,H:H, I:I, J:J").Select \n    Selection.Copy \n    Sheets(SheetAction).Select \n    Range("A1").Select \n    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False \n \n    Sheets(SheetAction).Select \n    \'Main Calculation \n    Range("H2").FormulaR1C1 = "=SUBSTITUTE(SUBSTITUTE(RC[-4],"" "",""""), ""~"","""")" \n    Range("I2").FormulaR1C1 = "=IF(LEFT(RC[-1], 3)=""POS"", RC[-8]&"" - ""&LEFT(RC[-1],LEN(RC[-1])-5), \nRC[-8]&"" - ""&RC[-1])" \n    Range("J2").FormulaR1C1 = "=VLOOKUP(RC[-1], LUT!C1:C10,10,FALSE)/100" \n    Range("K2").FormulaR1C1 = "=1-RC[-1]" \n    Range("L2").FormulaR1C1 = "=VLOOKUP(RC[-3], LUT!C1:C6,6,FALSE)" \n    Range("M2").FormulaR1C1 = "=ROUND(RC[-11]*RC[-3],2)" \n    Range("N2").FormulaR1C1 = "=ROUND(RC[-12]-RC[-1],2)" \n \n    If Not OneRow Then \n        Range("A1").End(xlDown).Offset(0, 7) = "-" \n        Range("H2:N2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("H2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n    End If \n \n    \'Customer Entries \n    Range("P2").FormulaR1C1 = "=""063978""" \n    Range("Q2").FormulaR1C1 = "=IF(RC[-5]=""SAP"", ""756"", ""999"")" \n    Range("R2").FormulaR1C1 = "cr" \n    Range("T2").FormulaR1C1 = "=IF(RC[-8]=""SAP"",VLOOKUP(RC9, LUT!C1:C7,7,FALSE), LEFT(VLOOKUP(RC9, \nLUT!C1:C7,7,FALSE),3)&""-""&RIGHT(VLOOKUP(RC9, LUT!C1:C7,7,FALSE),3) )" \n    Range("U2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C1:C8,8,FALSE)" \n    Range("V2").FormulaR1C1 = "=ABS(RC[-9])*100" \n    Range("W2").FormulaR1C1 = "=IF(RC[-11]=""SAP"", SUBSTITUTE(RC[-19], ""~"",""""), \nLEFT(SUBSTITUTE(SUBSTITUTE(RC[-19], ""~"",""""), "" "", """"),18))" \n    Range("X2").FormulaR1C1 = "=IF(RC[-12]=""SAP"", """", LEFT(VLOOKUP(RC[-15],LUT!C1:C5,5,FALSE),26))" \n    Range("Y2").FormulaR1C1 = "=IF(RC[-13]=""SAP"", TEXT(TODAY(), ""yyyymmdd""), """")" \n    Range("Z2").FormulaR1C1 = "" \n    Range("AA2").FormulaR1C1 = "ITSMO" \n    Range("AB2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C[-27]:C[-12],15,FALSE)&""/""&Home!R37C15" \n \n    If Not OneRow Then \n        Range("A1").End(xlDown).Offset(0, 15) = "-" \n        Range("P2:AB2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Range("Y2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Value = Selection.Value \n    End If \n \n    Range("P2:AB2").Select \n    Range(Selection, Selection.End(xlDown)).Select \n    Selection.Copy \n    Range("P2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False \n \n    \'ATO Entries \n    Range("AD2").FormulaR1C1 = "=""063978""" \n    Range("AE2").FormulaR1C1 = "=""999"""'},
 {'page': 70,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 70 of 214 \n \n\u202f \n    Range("AF2").FormulaR1C1 = "cr" \n    Range("AG2").FormulaR1C1 = "" \n    Range("AH2").FormulaR1C1 = "=""093-003""" \n    Range("AI2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C[-34]:C[-21],13,FALSE)" \n    Range("AJ2").FormulaR1C1 = "=ABS(RC[-22])*100" \n    Range("AK2").FormulaR1C1 = "=VLOOKUP(RC[-28], LUT!C1:C15,14, FALSE)" \n    Range("AL2").FormulaR1C1 = "Australian Taxation Office" \n    Range("AM2").FormulaR1C1 = "" \n    Range("AN2").FormulaR1C1 = "" \n    Range("AO2").FormulaR1C1 = "ITSMO" \n    Range("AP2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C[-41]:C[-26],15,FALSE)&""/""&Home!R37C15" \n \n    If Not OneRow Then \n        Range("A1").End(xlDown).Offset(0, 29) = "-" \n        Range("AD2:AP2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("AD2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n    End If \n \n    \'Clearing Entries \n    Range("AR2").FormulaR1C1 = "=""063978""" \n    Range("AS2").FormulaR1C1 = "=""726""" \n    Range("AT2").FormulaR1C1 = "dr" \n    Range("AU2").FormulaR1C1 = "" \n    Range("AV2").FormulaR1C1 = "=MID(RC[-47],8,6)" \n    Range("AW2").FormulaR1C1 = "=MID(RC[-48],14,8)" \n    Range("AX2").FormulaR1C1 = "=RC[-14]+RC[-28]" \n    Range("AY2").FormulaR1C1 = "=SUBSTITUTE(RC[-47], ""~"","""")" \n    Range("AZ2").FormulaR1C1 = "" \n    Range("BA2").FormulaR1C1 = "=TEXT(TODAY(), ""yyyymmdd"")" \n    Range("BB2").FormulaR1C1 = "" \n    Range("BC2").FormulaR1C1 = "ITSMO" \n    Range("BD2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C[-55]:C[-40],15,FALSE)&""/""&Home!R37C15" \n \n    If Not OneRow Then \n        Range("A1").End(xlDown).Offset(0, 43) = "-" \n        Range("AR2:BD2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("AR2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n    End If \n \n    \'Customer & ATO Notes Generator \n    Range("BF2").FormulaR1C1 = "=MID(RC[-57],8,6)" \n    Range("BG2").FormulaR1C1 = "=MID(RC[-58],14,8)" \n    Range("BH2").FormulaR1C1 = "=VLOOKUP(RC9, LUT!C[-59]:C[-44],15,FALSE)" \n    Range("BI2").FormulaR1C1 = "=Home!R37C15&"" - ""& TEXT(TODAY(), ""dd/mm/yyyy"")&"" TFR TO ""&RC[-\n41]&"" ""&RC[-40]&"" $""& Text(RC[-39]/100,""0.00"")" \n    Range("BJ2").FormulaR1C1 = "=Home!R37C15&"" - ""& TEXT(TODAY(), ""dd/mm/yyyy"")&"" PP $""& Text(RC[-\n26]/100,""0.00"")&"" SENT VIA EFT REF ""&RC[-25]" \n \n    \'Calculation & turn in value only \n    If Not OneRow Then \n        Range("A1").End(xlDown).Offset(0, 57) = "-" \n        Range("BF2:BJ2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("BF2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n    End If \n \n    Range("G2").FormulaR1C1 = "=IF(OR(ISERROR(RC[1]), ISERROR(RC[2]), ISERROR(RC[3]), ISERROR(RC[4]), \nISERROR(RC[5]), ISERROR(RC[6]), ISERROR(RC[7])), ""Exception"", ""-"")" \n    Range("G2").Select \n    Range(Selection, Selection.End(xlDown)).Select \n    If Not OneRow Then \n        Selection.FillDown \n    End If \n    Selection.Value = Selection.Value \n \n    \'sorting ACTION sheet'},
 {'page': 71,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 71 of 214 \n \n\u202f \n    Sheets(SheetAction).Select \n    SortSheet SheetAction, "A", "A2:BJ" & Cells(Rows.Count, "A").End(xlUp).Row \n \n    ThisWorkbook.Worksheets(SheetAction).Columns("A:BJ").AutoFit \n \n    GenerateActionData = True \n    StatMsg GenerateActionData, "Creating Action data" \n \n  \'  UpdateATODetails \nEnd Function \n \nPublic Function CheckExceptions() As Boolean \n \n If Application.WorksheetFunction.CountIf(Sheets(SheetAction).Columns("G:G"), "Exception") > 0 Then \n \n    StatZero "Creating Exception data" \n    MoveExceptions \n    CheckExceptions = True \n    StatMsg CheckExceptions, "Creating Exception data" \n End If \n CheckExceptions = True \nEnd Function \n \nPublic Sub CreateManual(Optional Dummay As Boolean) \n    AppendNewWorksheet SheetManual, SheetAction \n    HeadingAction SheetManual \nEnd Sub \n\'This method will move all the exceptions from action tab to Manual tab \nPrivate Sub MoveExceptions() \n CreateManual \n Sheets(SheetAction).Activate \n \n If Application.WorksheetFunction.CountIf(Columns("G:G"), "Exception") > 0 Then \n    \'Applying filter on exception \n    ActiveSheet.Columns("A:BJ").AutoFilter Field:=7, Criteria1:="Exception" \n \n    \'Copying data from action sheet \n    Sheets(SheetAction).Range(("A2:BJ2"), Selection.End(xlDown)).Copy \n    \' Sheets(SheetManual).Select \n \n \n    \'Pasting data to Manual sheet \n    Sheets(SheetManual).Range("A2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, \nSkipBlanks:=False, Transpose:=False \n \n    Sheets(SheetManual).Range("B:B").NumberFormat = "0.00" \n \n    With ThisWorkbook.Worksheets(SheetAction) \n    Row = 2 \n    While Not IsEmpty(.Range("A" & Row)) \n        If .Range("G" & Row).Value = "Exception" Then \n            .Rows(Row).EntireRow.Delete \n        Else \n            Row = Row + 1 \n        End If \n \n        StatPlus \n    Wend \n    End With \n    \'Removing exception records from Action sheet \n\'    Set Rng = Sheets(SheetAction).AutoFilter.Range \n\'        Rng.Offset(1, 0).Resize(Rng.Rows.count - 1).Delete Shift:=xlUp \n    \'Removing filters from Action sheet \n    Sheets(SheetAction).AutoFilterMode = False \n \n    ThisWorkbook.Worksheets(SheetManual).Columns("A:BJ").AutoFit \n End If \nEnd Sub \n \n\'Public Sub UpdateATODetails() \n\'Sheets(SheetAction).Select \n\'    Dim lrow As Long \n\'    Dim Rng As Range \n\'    lrow = Cells(Rows.Count, "AK").End(xlUp).Row \n\'    Dim a As String \n\'    Set Rng = Range("AK2:" & "AK" & lrow) \n\'        For Each Row In Rng.Rows'},
 {'page': 72,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 72 of 214 \n \n\u202f \n\'            a = Row \n\'        Next Row \n\' \n\' \n\'End Sub \n \n\'@1.25 Module - Lib_BOI \n \n\'------------------------------------------------------- \n\' \n\'       BOI related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit \n \nPublic Sub CreateBOI(Optional Dummy As Boolean) \n    AppendNewWorksheet SheetBOI, SheetAction \n \n    HeadingBOI SheetBOI \nEnd Sub \n \nPublic Sub HeadingBOI(SheetName As String, Optional StartCol As String = "Q") \n    Dim Col As Integer \n \n    With ThisWorkbook.Worksheets(SheetName) \n        .Range("A1").Value = "Collecting BSB" \n        .Range("B1").Value = "Trancode" \n        .Range("C1").Value = "Trantype" \n        .Range("D1").Value = "Override" \n        .Range("E1").Value = "Ledgerbsb" \n        .Range("F1").Value = "acno" \n        .Range("G1").Value = "Amount" \n        .Range("H1").Value = "Detail 1" \n        .Range("I1").Value = "Detail 2" \n        .Range("J1").Value = "noofchqs" \n        .Range("K1").Value = "amtofchqs" \n        .Range("L1").Value = "User1" \n        .Range("M1").Value = "Description" \n        .Range("N1").Value = "Type" \n        .Range("O1").Value = "CHECK" \n \n        With .Range("A1:O1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(217, 217, 217) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n \n        Col = asc(StartCol) \n \n        .Range(Chr(Col + 0) & "1").ColumnWidth = .Range(Chr(Col + 0) & "1").ColumnWidth + 4 \n        .Range(Chr(Col + 1) & "1").ColumnWidth = .Range(Chr(Col + 1) & "1").ColumnWidth + 4 \n        .Range(Chr(Col + 2) & "1").ColumnWidth = .Range(Chr(Col + 2) & "1").ColumnWidth + 4 \n \n        .Range(Chr(Col + 0) & "1").Value = "Balancing - System Use only" \n \n        .Range(Chr(Col + 0) & "3").Value = "Total DR" \n        .Range(Chr(Col + 1) & "3").Value = "Total CR" \n        .Range(Chr(Col + 2) & "3").Value = "Difference should be ""0""" \n        .Range(Chr(Col + 0) & "3").Font.Bold = True \n        .Range(Chr(Col + 1) & "3").Font.Bold = True \n        .Range(Chr(Col + 2) & "3").Font.Bold = True \n        .Range(Chr(Col + 0) & "3").Font.Color = RGB(255, 0, 0) \n        .Range(Chr(Col + 1) & "3").Font.Color = RGB(255, 0, 0) \n        .Range(Chr(Col + 2) & "3").Font.Color = RGB(255, 0, 0) \n        .Range(Chr(Col + 0) & "4").Formula = "=SUMIF(C:C,""dr"",G:G)" \n        .Range(Chr(Col + 1) & "4").Formula = "=SUMIF(C:C,""cr"",G:G)" \n        .Range(Chr(Col + 2) & "4").Formula = "=SUM(" & Chr(Col + 0) & "4-" & Chr(Col + 1) & "4)" \n \n        If SheetName = SheetVerifyBOI Then \n            .Range(Chr(Col) & "6").Value = "Verified By:" \n            .Range(Chr(Col) & "7").Value = "Date:" \n            .Range(Chr(Col) & "8").Value = "Time:" \n \n            .Range(Chr(Col) & "6").HorizontalAlignment = xlRight'},
 {'page': 73,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 73 of 214 \n \n\u202f \n            .Range(Chr(Col) & "7").HorizontalAlignment = xlRight \n            .Range(Chr(Col) & "8").HorizontalAlignment = xlRight \n        End If \n    End With \nEnd Sub \n \nFunction BuildBOI(Optional Dummy As Boolean) As Boolean \n    Dim Row As Long \n    Dim Detail1 As String, Detail2 As String, ValueDate As String \n    Dim Detail2b As String \n \n    StatZero "Building " & SheetBOI & " Bulk Import" \n \n    If IsEmpty(Sheets("Action").Range("A2")) Or IsEmpty(Sheets("Action").Range("P2")) Or \nIsEmpty(Sheets("Action").Range("AD2")) Or IsEmpty(Sheets("Action").Range("AR2")) Or \nIsEmpty(Sheets("Action").Range("BF2")) Then \n        MsgBox "There is no Action entry Found, Please check and make sure Step 2 has been processed \nbefore process this step!" \n        Exit Function \n    End If \n \n    Row = 2 \n \n      \'Call RemoveAnyFilters \n    Sheets(SheetMGDATA).AutoFilterMode = False \n    Sheets(SheetAction).AutoFilterMode = False \n    Sheets(SheetBOI).AutoFilterMode = False \n    If SheetExists(SheetManual) Then \n        Sheets(SheetManual).AutoFilterMode = False \n    End If \n \n    Sheets("Action").Select \n    Range("P2:AB2").Select \n    If Not IsEmpty(Range("P3")) Then \n        Range(Selection, Selection.End(xlDown)).Select \n    End If \n    Selection.Copy \n \n    Sheets(SheetBOI).Select \n    Range("A2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False \n \n    StatPlus \n \n    Sheets("Action").Select \n    Range("AD2:AP2").Select \n    If Not IsEmpty(Range("AD3")) Then \n        Range(Selection, Selection.End(xlDown)).Copy \n    Else \n        Selection.Copy \n    End If \n \n    Sheets(SheetBOI).Select \n    Range("A1").End(xlDown).Offset(1, 0).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, \nSkipBlanks:=False, Transpose:=False \n \n    StatPlus \n \n    Sheets("Action").Select \n    Range("AR2:BD2").Select \n    If Not IsEmpty(Range("AR3")) Then \n        Range(Selection, Selection.End(xlDown)).Copy \n    Else \n        Selection.Copy \n    End If \n \n    Sheets(SheetBOI).Select \n    Range("A1").End(xlDown).Offset(1, 0).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, \nSkipBlanks:=False, Transpose:=False \n \n    StatPlus \n \n    Range("A1").End(xlDown).Offset(0, 13) = "-" \n    Range("N1:O1").Select \n    Range(Selection, Selection.End(xlDown)).Select \n    Selection.FillDown \n    StatPlus'},
 {'page': 74,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 74 of 214 \n \n\u202f \n \n    If Application.WorksheetFunction.CountIf(Columns("G:G"), 0) > 0 Then \n       \'Applying filter on amount 0 \n        ActiveSheet.Columns("A:S").AutoFilter Field:=7, Criteria1:=0 \n \n       \'Removing exception records from BOI sheet \n        Dim Rng As Range \n        Set Rng = Sheets(SheetBOI).AutoFilter.Range \n        Rng.Offset(1, 0).Resize(Rng.Rows.Count - 1).Delete Shift:=xlUp \n \n       \'Removing filters from BOI sheet \n        Sheets(SheetBOI).AutoFilterMode = False \n    End If \n \n \n \n    CopyMacro1 \n \n    With ThisWorkbook.Worksheets(SheetBOI) \n        .Columns("A:O").EntireColumn.AutoFit \n        With .Range("N2:N" & LastRowInCol(SheetBOI, "N") - 1) \n            .HorizontalAlignment = xlCenter \n            .Interior.Color = RGB(252, 213, 180) \n            .Font.Color = RGB(131, 60, 12) \n        End With \n        \'.Range("A:M").NumberFormat = "@" \n \n        VerifyColor .Range("O2:O" & LastRowInCol(SheetBOI, "O") - 1) \n    End With \n \n    BuildBOI = CheckBOI() \n \n    \'sorting BOI sheet \n    Sheets(SheetBOI).Select \n    SortSheet SheetBOI, "A", "A2:O" & Cells(Rows.Count, "A").End(xlUp).Row \n \n    ThisWorkbook.Worksheets(SheetBOI).Columns("A:S").AutoFit \n \n      ThisWorkbook.Worksheets("HOME").Range("RUN_DATE_TIME").Value = Format(Now, "YYYYMMDD_HHMM") \n \n    StatMsg BuildBOI, "Building " & SheetBOI & " Bulk Import" \n \n    If Not BuildBOI Then \n        ErrBox "The " & SheetBOI & " Bulk Import has failed checking!", SheetBOI & " Bulk Import" \n    End If \nEnd Function \n \nPublic Function CheckBOI(Optional LookFor As String = "NO", Optional Col As String = "O", Optional \nSheetName As String = SheetBOI) As Boolean \n    Dim Row As Long \n \n    CheckBOI = True \n \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetName) \n        While Not IsEmpty(.Range(Col & Row)) \n            If .Range(Col & Row).Value = LookFor Then \n                CheckBOI = False \n                Exit Function \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n \n        If Format(.Range("S4").Value, "0") <> "0" Then \n            CheckBOI = False \n            Exit Function \n        End If \n    End With \nEnd Function \n \nPublic Sub CopyMacro1(Optional SheetName As String = SheetBOI) \n    Dim Lastrow As Long \n \n    Lastrow = LastRowInCol(SheetBOI, "A") \n    If Lastrow > 2 Then'},
 {'page': 75,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 75 of 214 \n \n\u202f \n        With ThisWorkbook.Worksheets(SheetName) \n            ThisWorkbook.Worksheets("HOME").Range("Macro1").Copy \n            .Select \n            .Range("O2:O" & Lastrow - 1).Select \n            .Paste \n \n            ThisWorkbook.Worksheets("HOME").Range("Macro2").Copy \n            .Select \n            .Range("N2:N" & Lastrow - 1).Select \n            .Paste \n \n            If SheetName = SheetBOI Then \n                ActiveWindow.Zoom = 85 \n            End If \n \n            With .Range("N2:O" & Lastrow - 1) \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n                .HorizontalAlignment = xlCenter \n                .Interior.ColorIndex = 0    \'no fill \n            End With \n \n            .Range("A1").Select \n        End With \n    End If \nEnd Sub \n \nPrivate Sub Transaction(Code As String, Amount As Double, Account As String, Detail1 As String, Detail2 As \nString, Optional VDate As Date = 0) \n    Dim Row As Long \n    Dim TranType As String, ValueDate As String \n    Dim BackGd As Long, ForeGd As Long \n    Dim AmtStr As String \n \n    AmtStr = Format(Amount, "0.00") \n    AmtStr = Replace(AmtStr, ".", "") \n \n    Row = LastRowInCol(SheetBOI, "A") \n \n    Select Case Code \n        Case "439" \n            BackGd = RGB(255, 199, 206) \n            ForeGd = RGB(156, 0, 6) \n            TranType = "dr" \n            ValueDate = "" \n        Case "726" \n            BackGd = RGB(198, 239, 206) \n            ForeGd = RGB(0, 97, 0) \n            TranType = "dr" \n            ValueDate = Format(VDate, "\'yyyymmdd") \n        Case "489" \n            BackGd = RGB(255, 199, 206) \n            ForeGd = RGB(156, 0, 6) \n            TranType = "cr" \n            ValueDate = "" \n        Case "756" \n            BackGd = RGB(198, 239, 206) \n            ForeGd = RGB(0, 97, 0) \n            TranType = "cr" \n            ValueDate = Format(VDate, "\'yyyymmdd") \n        End Select \n \n    With ThisWorkbook.Worksheets(SheetBOI) \n        .Range("H" & Row & ":I" & Row).NumberFormat = "@" \n \n        .Range("A" & Row).Value = "\'063978"                             \'Collecting BSB \n        .Range("B" & Row).Value = "\'" & Code                            \'Trancode \n        .Range("C" & Row).Value = TranType                              \'Trantype \n        .Range("D" & Row).Value = ""                                    \'Override \n        .Range("E" & Row).Value = "\'" & Mid(Account, 8, 6)              \'Ledgerbsb \n        .Range("F" & Row).Value = "\'" & Mid(Account, 14, Len(Account) - 14 + 1)             \'acno \n        .Range("G" & Row).Value = AmtStr                                \'Amount \n        .Range("H" & Row).Value = Details(Detail1, 22)                  \'Detail 1 \n        .Range("I" & Row).Value = Details(Detail2, 22)                  \'Detail 2 \n        .Range("J" & Row).Value = ValueDate                             \'noofchqs/value date \n        .Range("K" & Row).Value = ""                                    \'amtofchqs \n        .Range("L" & Row).Value = "ITSMO"                               \'ITSMO'},
 {'page': 76,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 76 of 214 \n \n\u202f \n        .Range("M" & Row).Value = ThisWorkbook.Worksheets("HOME").Range("FullName").Value & " / " & \nThisWorkbook.Worksheets("HOME").Range("Phone").Value    \'Description \n        .Range("N" & Row).Value = "DDA"                                 \'noofchqs \n \n        .Rows(Row).EntireRow.NumberFormat = "@" \n        .Range("G" & Row).NumberFormat = "General" \n \n        With .Range("A" & Row & ":M" & Row) \n            .Interior.Color = BackGd \n            .Font.Color = ForeGd \n        End With \n \n        .Range("N" & Row).Interior.Color = RGB(255, 204, 153) \n        .Range("N" & Row).Font.Color = RGB(108, 50, 10) \n \n        With .Range("A" & Row & ":O" & Row).Borders \n            .LineStyle = xlContinuous \n            .Weight = xlThin \n        End With \n    End With \nEnd Sub \n \nPublic Function Details(Text As String, MaxLen As Integer) As String \n    Dim i As Integer \n    Dim Char As String \n \n    Details = "" \n    For i = 1 To Len(Text) \n        Char = Mid(Text, i, 1) \n        If (Char >= "A" And Char <= "Z") Or (Char >= "a" And Char < "z") Or (Char >= "0" And Char <= "9") \nOr Char = " " Then \n            If Len(Details) < MaxLen Then \n                Details = Details & Char \n            Else \n                Exit For \n            End If \n        End If \n    Next i \nEnd Function \n \nPublic Sub StampBOI(Optional Dummay As Boolean) \n    If Not SheetExists(SheetVerifyBOI) Then Exit Sub    \'nothing to stamp \n \n    With ThisWorkbook.Worksheets(SheetVerifyBOI) \n        If CheckBOI("YES", "P", SheetVerifyBOI) Then     \'all are "NO" \n            .Range("S6").Value = ThisWorkbook.Worksheets("HOME").Range("FullName").Value \n            .Range("S7").Value = Date \n            .Range("S8").Value = Time \n \n            .Range("S6").HorizontalAlignment = xlLeft \n            .Range("S7").HorizontalAlignment = xlLeft \n            .Range("S8").HorizontalAlignment = xlLeft \n        End If \n    End With \nEnd Sub \n \n\'@1.26 Module - Lib_Busy \n \n\'------------------------------------------------------- \n\' \n\'       Busy related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit \n \n\'Public Const DefaultNumberOfSheets As Integer = 3  \'HOME, DEBIT, CREDIT \nPublic Const DefaultNumberOfSheets As Integer = 3  \'HOME, LUT, ATO Remaining Amount \n \nPrivate LastPercent As Integer \nPrivate Const NumBars As Long = 50 \n \nPublic Function IsBusy(Optional Dummy As Boolean) As Boolean \n    If ThisWorkbook.Worksheets("HOME").Range("Busy").Value = 1 Then \n        IsBusy = True \n    Else \n        IsBusy = False'},
 {'page': 77,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 77 of 214 \n \n\u202f \n    End If \nEnd Function \n \nPublic Sub BusyOn(Optional Dummy As Boolean) \n    Dim OrgSreenUpdating As Boolean \n \n    Application.Cursor = xlWait \n    If Not IsLocked() Then \n        OrgSreenUpdating = Application.ScreenUpdating \n        Application.ScreenUpdating = True \n \n        Application.StatusBar = "Working..." \n        Application.ScreenUpdating = OrgSreenUpdating \n    End If \n \n    DoBusy 1, RGB(192, 192, 192) \nEnd Sub \n \nPublic Sub BusyOff(Optional Dummy As Boolean) \n    DoBusy 0, RGB(0, 0, 0) \n    Application.Cursor = xlDefault \n    Application.StatusBar = False \n \n    If CountWorksheets() <= DefaultNumberOfSheets Then \n        ThisWorkbook.Worksheets("HOME").Shapes("Clear").TextFrame.Characters.Font.Color = RGB(192, 192, \n192) \n    End If \n \n    GreyEmailRefresh \nEnd Sub \n \nPrivate Sub DoBusy(Flag As Integer, ForeColor As Long) \n    ThisWorkbook.Worksheets("HOME").Range("Busy").Value = Flag \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Shapes("Run").TextFrame.Characters.Font.Color = ForeColor \n        .Shapes("Clear").TextFrame.Characters.Font.Color = ForeColor \n        .Shapes("Exit").TextFrame.Characters.Font.Color = ForeColor \n        .Shapes("ADD LUT").TextFrame.Characters.Font.Color = ForeColor \n    End With \nEnd Sub \n \nPublic Sub ExcelStatusBar(Count As Long, MaxCount As Long) \n    Dim OrgSreenUpdating As Boolean \n    Dim CurrCount As Long \n    Dim Percent As Long \n \n    If Count = 0 And MaxCount = 0 Then \n        OrgSreenUpdating = Application.ScreenUpdating \n        Application.ScreenUpdating = True \n \n        Application.StatusBar = "Working..." \n \n        Sleep 100 \n        Application.ScreenUpdating = OrgSreenUpdating \n        Exit Sub \n    End If \n \n    If Count > MaxCount Then \n        Count = MaxCount \n    End If \n \n    CurrCount = (Count * NumBars) / MaxCount \n    Percent = (CurrCount * 100) / NumBars \n    If Percent = 100 And Count < MaxCount Then \n        CurrCount = NumBars - 1 \n        Percent = 99 \n    End If \n \n    If Percent = 0 Or Percent <> LastPercent Then \n\'        If Percent = 100 And Count <> MaxCount Then \n\'            MsgBox Percent & "%, count=" & Count & ", maxcount=" & MaxCount \n\'        End If \n \n        ThisWorkbook.Worksheets("HOME").Select \n        OrgSreenUpdating = Application.ScreenUpdating \n        Application.ScreenUpdating = True'},
 {'page': 78,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 78 of 214 \n \n\u202f \n \n        Application.StatusBar = "[" & BuildBar(CurrCount) & Space(NumBars - CurrCount) & "] " & Percent & \n"% Complete" \n \n        Sleep 100 \n        Application.ScreenUpdating = OrgSreenUpdating \n \n        LastPercent = Percent \n    End If \nEnd Sub \n \nPrivate Function BuildBar(Num As Long) As String \n    Dim i As Integer \n    Dim Ch As String \n    Dim Bar As String \n \n    Bar = "" \n    Ch = "]" \n    For i = 1 To Num \n        Bar = Bar + Ch \n \n        If Ch = "[" Then \n            Ch = "]" \n        Else \n            Ch = "[" \n        End If \n    Next i \n \n    If Right(Bar, 1) = "[" And Num <> NumBars Then \n        Bar = Left(Bar, Num - 1) & " " \n    End If \n \n    BuildBar = Bar \nEnd Function \n \n\'@1.27 Module - Lib_Clipboard \n \n\'------------------------------------------------------- \n\' \n\'     Clipboard related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit \n \nPrivate Declare PtrSafe Function GlobalUnlock Lib "Kernel32" (ByVal hMem As LongPtr) As Long \nPrivate Declare PtrSafe Function GlobalLock Lib "Kernel32" (ByVal hMem As LongPtr) As LongPtr \nPrivate Declare PtrSafe Function GlobalAlloc Lib "Kernel32" (ByVal wFlags As Long, ByVal dwBytes As \nLongPtr) As LongPtr \nPrivate Declare PtrSafe Function CloseClipboard Lib "user32" () As Long \nPrivate Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hWnd As LongPtr) As Long \nPrivate Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long \nPrivate Declare PtrSafe Function lstrcpy Lib "Kernel32" (ByVal lpString1 As Any, ByVal lpString2 As Any) \nAs LongPtr \nPrivate Declare PtrSafe Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hMem As \nLongPtr) As LongPtr \n \nPrivate Const GHND = &H42 \nPrivate Const CF_TEXT = 1 \n \nPrivate Function ClipBoard_SetData(MyString As String) \n \n    Dim hGlobalMemory As LongPtr, lpGlobalMemory As LongPtr, hClipMemory As LongPtr \n    Dim x As Long \n \n    hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1) \n    lpGlobalMemory = GlobalLock(hGlobalMemory) \n \n    lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString) \n \n    If GlobalUnlock(hGlobalMemory) <> 0 Then \n        ErrBox "Unable to unlock memory!", "Memory" \n        GoTo Skip \n    End If \n \n    If OpenClipboard(0&) = 0 Then \n        ErrBox "Unable to open Clipboard!", "Clipboard"'},
 {'page': 79,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 79 of 214 \n \n\u202f \n        Exit Function \n    End If \n \n    x = EmptyClipboard() \n \n    hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory) \n \nSkip: \n    If CloseClipboard() = 0 Then \n        WarnBox "Unable to close Clipboard!", "Clipboard" \n    End If \nEnd Function \n \nSub CopyText(txt As String) \n    txt = Replace(txt, vbCr, "")        \'get rid of the CR characters \n    txt = Replace(txt, vbLf, vbCrLf) \n \n    Call ClipBoard_SetData(txt) \nEnd Sub \n \n\'@1.28 Module - Lib_DPI \n \nOption Explicit \n \n#If VBA7 Then   \'64 bit \n    Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long \n    Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" (ByVal hDC As LongPtr, ByVal nIndex As \nLong) As Long \n    Private Declare PtrSafe Function GetDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr \n    Private Declare PtrSafe Function ReleaseDC Lib "user32" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr) \nAs Long \n#Else           \'32 bit \n    Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long \n    Private Declare Function GetDeviceCaps Lib "gdi32" (ByVal hDC As Long, ByVal nIndex As Long) As Long \n    Private Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long \n    Private Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, ByVal hDC As Long) As Long \n#End If \n \nPublic Const LOGPIXELSX = 88   \'pixels/inch in X \nPublic Const LOGPIXELSY = 90   \'pixels/inch in y \nPublic Const POINTS_PER_INCH As Long = 72  \'a point is defined as 1/72 inches \n \nPrivate Const SM_CXSCREEN = 0 \nPrivate Const SM_CYSCREEN = 1 \nPrivate Const SM_CXVIRTUALSCREEN As Long = 78 \nPrivate Const SM_CYVIRTUALSCREEN As Long = 79 \nPrivate Const SM_CMONITORS As Long = 80 \n \nPublic Sub DisplayDPI(Optional Dummy As Boolean) \n    MsgBox "Monitors: " & GetSystemMetrics(SM_CMONITORS) & vbLf & vbLf & _ \n    "SM_CXSCREEN: " & GetSystemMetrics(SM_CXSCREEN) & vbLf & _ \n    "SM_CYSCREEN: " & GetSystemMetrics(SM_CYSCREEN) & vbLf & _ \n    "SM_CXVIRTUALSCREEN: " & GetSystemMetrics(SM_CXVIRTUALSCREEN) & vbLf & _ \n    "SM_CYVIRTUALSCREEN: " & GetSystemMetrics(SM_CYVIRTUALSCREEN) & vbLf & vbLf & _ \n    "Application.Left (x): " & Application.Left & vbLf & _ \n    "Application.Top (y): " & Application.Top & vbLf & vbLf & _ \n    "Display DPI: " & PixelsPerInch() \n    \'* PixelsPerInch / POINTS_PER_INCH \nEnd Sub \n \nPublic Function PixelsPerInch() As Long \n    Dim hDC     \'32 bit: Long and 64 bit: LongPtr \n \n    hDC = GetDC(0) \n    PixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX) \n    ReleaseDC 0, hDC \nEnd Function \n \nPublic Function ScaleTop(OrigDPI As Long, y As Double) As Double \n    Dim CurrDPI As Long \n \n    CurrDPI = PixelsPerInch() \n    ScaleTop = y \n \n    If OrigDPI = 96 Then \n        If CurrDPI = 120 Then \n            ScaleTop = y / (531.5331 / 516.5331)'},
 {'page': 80,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 80 of 214 \n \n\u202f \n        End If \n    ElseIf OrigDPI = 120 Then \n        If CurrDPI = 96 Then \n            ScaleTop = y * (531.5331 / 516.5331) \n        End If \n    End If \nEnd Function \n \nPublic Function ScaleLeft(OrigDPI As Long, x As Double) As Double \n    Dim CurrDPI As Long \n \n    CurrDPI = PixelsPerInch() \n    ScaleLeft = x \n \n    If OrigDPI = 96 Then \n        If CurrDPI = 120 Then \n            ScaleLeft = x * (73.63055 / 72.13055) \n        End If \n    ElseIf OrigDPI = 120 Then \n        If CurrDPI = 96 Then \n            ScaleLeft = x / (73.63055 / 72.13055) \n        End If \n    End If \nEnd Function \n \nPublic Function ScaleHeight(OrigDPI As Long, y As Double) As Double \n    ScaleHeight = ScaleTop(OrigDPI, y) \nEnd Function \n \nPublic Function ScaleWidth(OrigDPI As Long, x As Double) As Double \n    ScaleWidth = ScaleLeft(OrigDPI, x) \nEnd Function \n \nSub LoopControls(Optional Dummy As Boolean) \n    Dim ws As Worksheet \n    Dim sh As Shape \n    Dim resp As Integer \n    Dim DPI As Long \n \n    DPI = PixelsPerInch() \n    For Each ws In ActiveWorkbook.Sheets \n        For Each sh In ws.Shapes \n        If ws.Name = "HOME" Then \n            resp = MsgBox2("Worksheet: " & ws.Name & vbLf & vbLf & "DPI: " & DPI & vbLf & TypeName(sh) & " \nName: " & sh.Name & vbLf & vbLf & _ \n                          "Left=" & sh.Left & vbLf & "Top=" & sh.Top & vbLf & "Height=" & sh.Height & vbLf \n& "Width=" & sh.Width, vbOKCancel, "Loop Controls") \n            Select Case resp \n                Case vbOK \n                Case vbCancel \n                    Exit Sub \n            End Select \n        End If \n        Next \n    Next \nEnd Sub \n \n\'@1.29 Module - Lib_Edge \n \nOption Explicit \n \nPrivate Edge As EdgeDriver \nPublic SiteNameEdge As String            \'not used \n \n\'--------------------------------------------------- \n\' \n\' Lib_Internet requires the following references: \n\'   1. Selenium Type Library \n\' \n\'--------------------------------------------------- \n \nPrivate Sub WaitForEdge() \n    StatPlus \n \n    If Not EdgeConnected(False) Then Exit Sub \n \n    Do'},
 {'page': 81,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 81 of 214 \n \n\u202f \n        StatPlus \n    Loop While Edge.ExecuteScript("return document.readyState") <> "complete" \nEnd Sub \n \nPublic Sub ResetEdge(Optional Dummy As Boolean) \n    Set Edge = Nothing \nEnd Sub \n \n\'********************************** \n\' \n\'    Check connection with Edge \n\' \n\'********************************** \n \nPublic Function EdgeConnected(Optional ErrFlag As Boolean = True) As Boolean \n    Dim URL As String \n \n    EdgeConnected = False \n \n    If Not Edge Is Nothing Then \n        On Error GoTo Err \n        URL = Edge.URL    \'hwnd not available \n        On Error GoTo 0 \n \n        EdgeConnected = True \n    Else \n        If ErrFlag = True Then \n            ErrBox "Not connected to Edge browser!", "Edge Browser" \n        End If \n    End If \n \n    Exit Function \nErr: \n    On Error GoTo 0 \n    If ErrFlag = True Then \n        ErrBox "Lost connection with Edge browser!", "Edge Browser" \n    End If \n    Set Edge = Nothing  \'edge must be closed \nEnd Function \n \n\'********************************** \n\' \n\'       Close and quit Edge \n\' \n\'********************************** \n \nPublic Sub CloseEdge(StatusText As String) \n    Dim Flag As Boolean \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    Flag = False \n    If Not Edge Is Nothing Then \n        Flag = True \n \n        Edge.QUIT           \'close edge completely \n        Set Edge = Nothing \n    End If \n \n    StatMsg Flag, StatusText \nEnd Sub \n \n\'********************************** \n\' \n\'            Quit Edge \n\' \n\'********************************** \n \nPublic Sub QuitEdge(Optional Dummy As Boolean) \n    WaitForEdge \n \n    If Edge Is Nothing Then Exit Sub \n \n    Edge.QUIT'},
 {'page': 82,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 82 of 214 \n \n\u202f \n    Set Edge = Nothing \nEnd Sub \n \n\'********************************** \n\' \n\'        Show or Hide Edge \n\' \n\'********************************** \n \nPublic Sub ShowEdge(StatusText As String, ShowFlag As Boolean) \nEnd Sub \n \nPrivate Sub SetVisibliltyEdge() \nEnd Sub \n \n\'********************************** \n\' \n\'        Close Edge by url \n\' \n\'********************************** \n \nPublic Sub CloseEdgeByURL(TargetURL As String) \nEnd Sub \n \n\'********************************** \n\' \n\'       Close Edge by title \n\' \n\'********************************** \n \nPublic Sub CloseEdgeByTitle(TargetTitle As String) \nEnd Sub \n \nPublic Function FindEdgeByURL(TargetURL As String) As Boolean \n    FindEdgeByURL = False \nEnd Function \n \n\'********************************** \n\' \n\'    Get a new instance of Edge \n\' \n\'********************************** \n \nFunction GetNewEdge(StatusText As String, TargetURL As String) As Boolean \n    StatZero StatusText \n \n    Set Edge = Nothing \n    GetNewEdge = False \n \n    If GetSeleniumPath() <> "" Then \n#If Win64 Then \n        Set Edge = CreateObjectSelenium("Selenium.EdgeDriver") \n#Else \n        Set Edge = New EdgeDriver \n#End If \n        If Edge Is Nothing Then \n            ErrBox "Unable to start Edge browser!", "Edge Browser" \n        Else \n            GetNewEdge = True \n        End If \n    Else \n        ErrBox "SeleniumBasic is not installed!", "SeleniumBasic" \n    End If \n \n    StatMsg GetNewEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'      Load URL page in Edge \n\' \n\'********************************** \n \nPublic Function LoadPageEdge(StatusText As String, TargetURL As String, Optional FindURL As String = "") \nAs Boolean \n    Dim EdgeVer As String'},
 {'page': 83,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 83 of 214 \n \n\u202f \n    StatZero StatusText \n \n    On Error GoTo Err \n \n    LoadPageEdge = False \n    If Not Edge Is Nothing Then \n        Edge.Get TargetURL \n \n        WaitForEdge \n \n        LoadPageEdge = True \n    End If \n \n    On Error GoTo 0 \n \n    StatMsg LoadPageEdge, StatusText \n    Exit Function \n \nErr: \n    WriteLog "Error " & Err.Number & ": " & Err.Description \n    On Error GoTo 0 \n \n    If IsEdgeDriverErr(EdgeVer) Then \n        If DownloadEdgeDriver(EdgeVer) Then \n            On Error GoTo Err2 \n            Edge.Get TargetURL      \'try again \n \n            WaitForEdge \n \n            LoadPageEdge = True \n        End If \n    End If \n \nErr2: \n    On Error GoTo 0 \n \n    StatMsg LoadPageEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'     Download new Edge driver \n\' \n\'********************************** \n \nPublic Sub EdgeDriverDownload() \n    Static EdgeVer As String \n \n    If MsgBox2("Do you want to download a new Edge driver?", vbYesNoCancel + vbQuestion, "Download Edge \nDriver") = vbYes Then \n        Application.Cursor = xlWait \n \n        IsEdgeDriverErr EdgeVer \n        If DownloadEdgeDriver(EdgeVer) Then \n            MsgBox2 "Updated to EdgeDriver v" & EdgeVer & "!", vbOKOnly + vbInformation, "EdgeDriver" \n        Else \n            ErrBox "Unable to download EdgeDriver v" & EdgeVer & "!", "Download" \n        End If \n \n        Application.Cursor = xlDefault \n    End If \nEnd Sub \n \n\'********************************** \n\' \n\'       Check title of Edge \n\' \n\'********************************** \n \nPublic Function CheckPageTitleEdge(StatusText As String, title As String) As Boolean \n    StatZero StatusText \n \n    WaitForEdge \n \n    CheckPageTitleEdge = False \n    If Not Edge Is Nothing Then \n        If Edge.title = title Then'},
 {'page': 84,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 84 of 214 \n \n\u202f \n            CheckPageTitleEdge = True \n        End If \n    End If \n \n    StatMsg CheckPageTitleEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'     Get current url of Edge \n\' \n\'********************************** \n \nPublic Function GetURLEdge() As String \n    WaitForEdge \n \n    GetURLEdge = "" \n    If Not Edge Is Nothing Then \n        GetURLEdge = Edge.URL \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'      Get body text in Edge \n\' \n\'********************************** \n \nPublic Function GetBodyEdge() As String \n    GetBodyEdge = "" \n \n    WaitForEdge \n \n    If Not Edge Is Nothing Then \n        GetBodyEdge = Edge.FindElementByTag("body").Attribute("innerHTML") \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'       Switch to next Edge \n\' \n\'********************************** \n \nPublic Function SwitchToNextEdge() As Boolean \n    SwitchToNextEdge = False \n \n    WaitForEdge \n \n    If Not Edge Is Nothing Then \n        On Error GoTo Err \n        Edge.SwitchToNextWindow \n        On Error GoTo 0 \n \n        SwitchToNextEdge = True    \'found next window \n    End If \n    Exit Function \nErr: \n    On Error GoTo 0 \nEnd Function \n \n\'********************************** \n\' \n\'     Switch to previous Edge \n\' \n\'********************************** \n \nPublic Function SwitchToPreviousEdge() As Boolean \n    SwitchToPreviousEdge = False \n \n    WaitForEdge \n \n    If Not Edge Is Nothing Then \n        On Error GoTo Err \n        Edge.SwitchToPreviousWindow \n        On Error GoTo 0'},
 {'page': 85,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 85 of 214 \n \n\u202f \n        SwitchToPreviousEdge = True    \'found next window \n    End If \n    Exit Function \nErr: \n    On Error GoTo 0 \n \nEnd Function \n \n\'********************************** \n\' \n\'     Find error text in Edge \n\' \n\'********************************** \n \nPublic Function FindErrMsgEdge(StatusText As String, Text As String) As Boolean \n    StatZero StatusText \n \n    WaitForEdge \n \n    FindErrMsgEdge = False \n    If Not Edge Is Nothing Then \n        If InStr(1, GetBodyEdge(), Text) > 0 Then \n            FindErrMsgEdge = True \n        End If \n    End If \n    StatMsg Not FindErrMsgEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'        Find text in Edge \n\' \n\'********************************** \n \nPublic Function FindTextInBodyEdge(StatusText As String, Text As String) As Boolean \n    StatZero StatusText \n \n    WaitForEdge \n \n    FindTextInBodyEdge = False \n    If Not Edge Is Nothing Then \n        On Error Resume Next \n        If InStr(1, GetBodyEdge(), Text) > 0 Then \n            FindTextInBodyEdge = True \n        End If \n        On Error GoTo 0 \n    End If \n    StatMsg Not FindTextInBodyEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'   Wait until text not in Edge \n\' \n\'********************************** \n \nPublic Function WaitUntilTextNotInBodyEdge(StatusText As String, Text As String, Optional Seconds As \nInteger = 20) As Boolean \n    Dim Count As Integer \n    Dim StartTime As LongPtr \n    Dim Found As Boolean \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    Found = True \n    If Not Edge Is Nothing Then \n \n        StartTime = GetTickCount() \n        Count = 0 \n \n        While FindTextInBodyEdge("", Text)    \'wait for page to load \n            StatPlus \n \n            If GetTickCount() - StartTime > 1000 Then \n                StartTime = GetTickCount()'},
 {'page': 86,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 86 of 214 \n \n\u202f \n                Count = Count + 1 \n \n                If Count > Seconds Then \n                    Found = False \n                    GoTo Done \n                End If \n            End If \n        Wend \n    Else \n        Found = False \n    End If \nDone: \n    WaitUntilTextNotInBodyEdge = Found \n \n    StatMsg WaitUntilTextNotInBodyEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'     Wait until text in Edge \n\' \n\'********************************** \n \nPublic Function WaitUntilTextInBodyEdge(StatusText As String, Text As String, Optional Seconds As Integer \n= 20) As Boolean \n    Dim Count As Integer \n    Dim StartTime As LongPtr \n    Dim Found As Boolean \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    Found = True \n    If Not Edge Is Nothing Then \n \n        StartTime = GetTickCount() \n        Count = 0 \n \n        While Not FindTextInBodyEdge("", Text)    \'wait for page to load \n            StatPlus \n \n            If GetTickCount() - StartTime > 1000 Then \n                StartTime = GetTickCount() \n                Count = Count + 1 \n \n                If Count > Seconds Then \n                    Found = False \n                    GoTo Done \n                End If \n            End If \n        Wend \n    Else \n        Found = False \n    End If \nDone: \n    WaitUntilTextInBodyEdge = Found \n \n    StatMsg WaitUntilTextInBodyEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'    Find link by Name in Edge \n\' \n\'********************************** \n \nPublic Function FindLinkByNameEdge(StatusText As String, Name As String) As String \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    FindLinkByNameEdge = "" \n    If Not Edge Is Nothing Then'},
 {'page': 87,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 87 of 214 \n \n\u202f \n        Set Tag = Edge.FindElementsByTag("a") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("name") = Name Then \n                FindLinkByNameEdge = Tag(i).Attribute("href") \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg FindLinkByNameEdge <> "", StatusText \nEnd Function \n \n\'********************************** \n\' \n\'  Find link by InnerText in Edge \n\' \n\'********************************** \n \nPublic Function FindLinkByInnerTextEdge(StatusText As String, InnerText As String) As String \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    FindLinkByInnerTextEdge = "" \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("a") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If InStr(1, Tag(i).Attribute("innerHTML"), InnerText) > 0 Then \n                FindLinkByInnerTextEdge = Tag(i).Attribute("href") \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg FindLinkByInnerTextEdge <> "", StatusText \nEnd Function \n \n\'********************************** \n\' \n\' Click link by InnerText in Edge \n\' \n\'********************************** \n \nPublic Function ClickLinkByInnerTextEdge(StatusText As String, InnerText As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    ClickLinkByInnerTextEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("a") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If InStr(1, Tag(i).Attribute("innerHTML"), InnerText) > 0 Then \n                Tag(i).ExecuteScript "arguments[0].click();", Tag(i) \n                ClickLinkByInnerTextEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg ClickLinkByInnerTextEdge, StatusText \nEnd Function'},
 {'page': 88,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 88 of 214 \n \n\u202f \n \n\'********************************** \n\' \n\'  SELECT option by Name in Edge \n\' \n\'********************************** \n \nPublic Function SelectOptionByNameEdge(StatusText As String, Name As String, Opt As Integer, Optional Fire \nAs Boolean = False) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    SelectOptionByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("select") \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("name") = Name Then \n                Tag(i).AsSelect.SelectByIndex Opt \n                SelectOptionByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg SelectOptionByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\' Click INPUT button by Name Edge \n\' \n\'********************************** \n \nPublic Function ClickInputButtonByNameEdge(StatusText As String, Name As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    ClickInputButtonByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("input") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("name") = Name And Tag(i).Attribute("type") = "button" Then \n                Tag(i).ExecuteScript "arguments[0].click();", Tag(i) \n                ClickInputButtonByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg ClickInputButtonByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\' Set INPUT button by File in Edge \n\' \n\'********************************** \n \nPublic Function SetInputByFileEdge(StatusText As String, Path As String, Optional Fire As Boolean = False) \nAs Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText'},
 {'page': 89,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 89 of 214 \n \n\u202f \n \n    WaitForEdge \n \n    SetInputByFileEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("input") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("type") = "file" Then \n                Dim Key As New Selenium.Keys \n \n                ChDir ThisWorkbook.Path \n                Tag(i).SendKeys ThisWorkbook.Path & "\\" & Path \n \n                SetInputByFileEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg SetInputByFileEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'   Click BUTTON by Name in Edge \n\' \n\'********************************** \n \nPublic Function ClickButtonByNameEdge(StatusText As String, Name As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    ClickButtonByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("button") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If InStr(1, Tag(i).Attribute("name"), Name) > 0 Then \n                Tag(i).ExecuteScript "arguments[0].click();", Tag(i) \n                ClickButtonByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg ClickButtonByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\' Click BUTTON by InnerText in Edge \n\' \n\'********************************** \n \nPublic Function ClickButtonByInnerTextEdge(StatusText As String, InnerText As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    ClickButtonByInnerTextEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("button") \n \n        For i = 1 To Tag.Count \n            StatPlus'},
 {'page': 90,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 90 of 214 \n \n\u202f \n \n            If InStr(1, Tag(i).Attribute("innerHTML"), InnerText) > 0 Then \n                Tag(i).ExecuteScript "arguments[0].click();", Tag(i) \n                ClickButtonByInnerTextEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg ClickButtonByInnerTextEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\' Have BUTTON by InnerText in Edge \n\' \n\'********************************** \n \nPublic Function HaveButtonByInnerTextEdge(InnerText As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    WaitForEdge \n \n    HaveButtonByInnerTextEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("button") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If InStr(1, Tag(i).Attribute("innerHTML"), InnerText) > 0 Then \n                HaveButtonByInnerTextEdge = True \n                Exit For \n            End If \n        Next i \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'   Get DIV by InnerText in Edge \n\' \n\'********************************** \n \nPublic Function GetDivByInnerTextEdge(Text As String, ByRef InnerText As String) As Boolean \n    Dim i As Long \n    Dim Tag As Object \n \n    WaitForEdge \n \n    GetDivByInnerTextEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("div") \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If InStr(1, Tag(i).Attribute("outerHTML"), Text) > 0 And InStr(1, \nTag(i).Attribute("outerHTML"), "display: none;") = 0 Then \n                InnerText = Tag(i).Attribute("innerHTML") \n                GetDivByInnerTextEdge = True \n                Exit For \n           End If \n        Next i \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'       Submit a form in Edge \n\' \n\'********************************** \n \nPublic Function SubmitFormByNameEdge(StatusText As String, Name As String, Optional UseClick As Boolean = \nFalse) As Boolean \n    Dim Tag As Object \n    Dim i As Long'},
 {'page': 91,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 91 of 214 \n \n\u202f \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    SubmitFormByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("input") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            \'Debug.Print "input: " & Tag.Attribute("type") & ", " & Tag.Attribute("name") \n            If Tag(i).Attribute("type") = "submit" And Tag(i).Attribute("name") = Name Then \n                If UseClick Then \n                    Tag(i).ExecuteScript "arguments[0].click();", Tag(i) \n                Else \n                    Tag(i).submit \n                End If \n                SubmitFormByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg SubmitFormByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'    Enter INPUT by Name in Edge \n\' \n\'********************************** \n \nPublic Function EnterInputByNameEdge(StatusText As String, Name As String, Value As String, Optional Fire \nAs Boolean = False) As Boolean \n    Dim Tag As Object \n    Dim i As Long \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    EnterInputByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("input") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("name") = Name Then \n                Tag(i).Clear \n                Tag(i).SendKeys Value \n                EnterInputByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg EnterInputByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'   Enter INPUT by Title in Edge \n\' \n\'********************************** \n \nPublic Function EnterInputByTitleEdge(StatusText As String, title As String, Value As String, Optional \nFire As Boolean = False) As Boolean \n    Dim Tag As Object \n    Dim i As Long \n \n    StatZero StatusText \n \n    WaitForEdge'},
 {'page': 92,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 92 of 214 \n \n\u202f \n    EnterInputByTitleEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("input") \n \n        For i = 1 To Tag(i) \n            StatPlus \n \n            If Tag(i).Attribute("title") = title Then \n                Tag(i).Clear \n                Tag(i).SendKeys Value \n                EnterInputByTitleEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg EnterInputByTitleEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'  Enter TEXTAREA by Name in Edge \n\' \n\'********************************** \n \nPublic Function EnterTextAreaByNameEdge(StatusText As String, Name As String, Value As String, Optional \nFire As Boolean = False) As Boolean \n    Dim Tag As Object \n    Dim i As Long \n \n    StatZero StatusText \n \n    WaitForEdge \n \n    EnterTextAreaByNameEdge = False \n    If Not Edge Is Nothing Then \n        Set Tag = Edge.FindElementsByTag("textarea") \n \n        For i = 1 To Tag.Count \n            StatPlus \n \n            If Tag(i).Attribute("name") = Name Then \n                Tag(i).Clear \n                Tag(i).SendKeys Value \n                EnterTextAreaByNameEdge = True \n                Exit For \n            End If \n        Next i \n    End If \n \n    StatMsg EnterTextAreaByNameEdge, StatusText \nEnd Function \n \n\'********************************** \n\' \n\'  Get Table by Headings in Edge \n\' \n\'********************************** \n \nPublic Function GetTableByHeadingsEdge(StatusText As String, HeadingStr As String, ByRef TableArr() As \nString) As Boolean \n    Dim Table As Object, TableRow As Object, TableCol As Object \n    Dim HeaderArr() As String \n    Dim Row As Long, Col As Long, MaxCols As Long \n    Dim Found As Boolean, Headers As Boolean \n    Dim i As Long, x As Long, y As Long, z As Long \n \n    StatZero StatusText \n \n    HeaderArr = Split(HeadingStr, ",") \n \n    WaitForEdge \n \n    GetTableByHeadingsEdge = False \n    If Not Edge Is Nothing Then \n        \'Debug.Print Edge.FindElementsByTag("table").Count & " tables" \n        Set Table = Edge.FindElementsByTag("table")'},
 {'page': 93,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 93 of 214 \n \n\u202f \n        For z = 1 To Table.Count \n            StatPlus \n \n            Found = True \n \n            MaxCols = 0 \n            Row = 0 \n \n            If Table(z).FindElementsByTag("thead").Count > 0 Then \n                Set TableRow = Table(z).FindElementByTag("thead").FindElementsByTag("tr")(1) \n \n                Col = 0 \n                Set TableCol = TableRow.FindElementsByTag("th") \n \n                For x = 1 To TableCol.Count \n                    StatPlus \n \n                    Col = Col + 1 \n                    If Col > MaxCols Then \n                        MaxCols = Col \n                    End If \n                    StatPlus \n                Next x \n \n                Row = Row + 1 \n                StatPlus \n            End If \n \n            Headers = (Row > 0)     \'we have a header \n \n            If Table(z).FindElementsByTag("tbody").Count > 0 Then \n                Set TableRow = Table(z).FindElementByTag("tbody").FindElementsByTag("tr") \n                For x = 1 To TableRow.Count    \'table body \n                    StatPlus \n                    Col = 0 \n                    Set TableCol = TableRow(x).FindElementsByTag("td") \n \n                    For y = 1 To TableCol.Count \n                        StatPlus \n \n                        \'Debug.Print "Row = " & Row & ", Col = " & Col; "" \n                        Col = Col + 1 \n                        If Col > MaxCols Then \n                            MaxCols = Col \n                        End If \n                        StatPlus \n                    Next y \n \n                    Row = Row + 1 \n                    StatPlus \n                Next x \n            End If \n \n            If UBound(HeaderArr) = MaxCols - 1 Then     \'found table with the correct number of columns \n                If Headers Then \n                    Set TableRow = Table(z).FindElementByTag("thead").FindElementsByTag("tr")(1) \n \n                    Col = 0 \n                    Set TableCol = TableRow.FindElementsByTag("th") \n                    For x = 1 To TableCol.Count \n                        StatPlus \n \n                        \'Debug.Print "Found: " & TableCol.Text & ", " & HeaderArr(Col) \n                        If InStr(1, TableCol(x).Text, HeaderArr(Col)) = 0 Then \n                            If TableCol(x).Text <> "" Or HeaderArr(Col) <> "" Then \n                                Found = False \n                            End If \n                        End If \n                        Col = Col + 1 \n                        StatPlus \n                    Next x \n                Else \n                    Set TableRow = Table(z).FindElementByTag("tbody").FindElementsByTag("tr")(1) \n \n                    Col = 0 \n                    Set TableCol = TableRow.FindElementsByTag("td") \n                    For x = 1 To TableCol.Count'},
 {'page': 94,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 94 of 214 \n \n\u202f \n                        StatPlus \n \n                        If InStr(1, TableCol(x).Text, HeaderArr(Col)) = 0 Then \n                            Found = False \n                        End If \n                        Col = Col + 1 \n                        StatPlus \n                    Next x \n \n                End If \n            Else \n                Found = False \n            End If \n \n            If Found Then \n                ReDim TableArr(0 To MaxCols - 1, 0 To Row - 1) \n \n                Row = 0 \n                If Headers Then \n                    Set TableRow = Table(z).FindElementByTag("thead").FindElementsByTag("tr")(1) \n \n                    Col = 0 \n                    Set TableCol = TableRow.FindElementsByTag("th") \n                    For x = 1 To TableCol.Count \n                        StatPlus \n \n                        TableArr(Col, Row) = Trim(Replace(Replace(TableCol(x).Text, vbLf, " "), vbCr, "")) \n                        Col = Col + 1 \n                        StatPlus \n                    Next x \n \n                    Row = Row + 1 \n                End If \n \n                If Table(z).FindElementsByTag("tbody").Count > 0 Then \n                    Set TableRow = Table(z).FindElementByTag("tbody").FindElementsByTag("tr") \n                    For y = 1 To TableRow.Count    \'table body \n                        StatPlus \n                        Col = 0 \n                        Set TableCol = TableRow(y).FindElementsByTag("td") \n                        \'Debug.Print "Cols: " & TableRow.FindElementsByTag("td").Count \n                        For x = 1 To TableCol.Count \n                            StatPlus \n \n                            \'Debug.Print TableCol.Attribute("innerText") \n                            TableArr(Col, Row) = Trim(Replace(Replace(TableCol(x).Text, vbLf, " "), vbCr, \n"")) \n                            Col = Col + 1 \n                            StatPlus \n                        Next x \n \n                        Row = Row + 1 \n                        StatPlus \n                    Next y \n                End If \n \n                GetTableByHeadingsEdge = True     \'found the table \n                Exit For \n            End If \n            StatPlus \n        Next z \n    End If \n \n    StatMsg GetTableByHeadingsEdge, StatusText \nEnd Function \n \nPublic Sub CheckBox1_Hide(Optional Dummy As Boolean) \n\'    ThisWorkbook.Worksheets("HOME").CheckBox1.Visible = False \nEnd Sub \n \nPublic Sub CheckBox1_Show(Optional Dummy As Boolean) \n\'    ThisWorkbook.Worksheets("HOME").CheckBox1.Visible = True \nEnd Sub \n \nPublic Sub CheckBox1_Pos(Optional Dummy As Boolean) \n\'    ThisWorkbook.Worksheets("HOME").CheckBox1.Top = ScaleTop(120, 380) \n\'    ThisWorkbook.Worksheets("HOME").CheckBox1.Left = ScaleLeft(120, 742)'},
 {'page': 95,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 95 of 214 \n \n\u202f \nEnd Sub \nPrivate Function CreateObjectSelenium(TypeName As String) As Object \n    Static Domain As mscorlib.AppDomain \n \n    If Domain Is Nothing Then \n        With New mscoree.CorRuntimeHost \n            .Start: \n            .GetDefaultDomain Domain \n        End With \n    End If \n    Set CreateObjectSelenium = Domain.CreateInstanceFrom("C:\\Program Files\\SeleniumBasic\\Selenium.dll", \nTypeName).Unwrap \nEnd Function \n \n\'@1.30 Module - Lib_EdgeDriver \n \nOption Explicit \n \n\'--------------------------------------------------- \n\' \n\' Lib_EdgeDriver requires the following references: \n\' \n\'   1. Selenium Type Library \n\'   2. Microsoft Shell Controls & Automation \n\' \n\'--------------------------------------------------- \n \nPrivate Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller \nAs LongPtr, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As \nLongPtr) As Long \n \n#If Win64 Then \nPrivate Const EdgeDriverZip As String = "edgedriver_win64.zip"      \'zip download file \n#Else \nPrivate Const EdgeDriverZip As String = "edgedriver_win32.zip"      \'zip download file \n#End If \n \nPrivate Const EdgeDriverExe As String = "edgedriver.exe"            \'driver file in Selenium folder \nPrivate Const MSEdgeDriverExe As String = "msedgedriver.exe"        \'driver file in zip download \n \n\'********************************** \n\' \n\'       Is EdgeDriver Error \n\' \n\'********************************** \n \nPublic Function IsEdgeDriverErr(ByRef EdgeVer As String, Optional ShowErrMsg As Boolean = False) As \nBoolean \n    Dim EdgeVerArr() As String, DriverVer As String, DriverVerArr() As String \n \n    EdgeVer = GetEdgeVersion() \n    DriverVer = GetEdgeDriverVersion() \n \n\'    Debug.Print "EdgeVer: " & EdgeVer \n\'    Debug.Print "DriverVer:" & DriverVer \n \n    EdgeVerArr = Split(EdgeVer, ".") \n    DriverVerArr = Split(DriverVer, ".") \n \n    If DriverVer = "0.0.0.0" Then \n        IsEdgeDriverErr = True     \'assume no error \n        Exit Function \n    End If \n \n    IsEdgeDriverErr = (EdgeVerArr(0) <> DriverVerArr(0))  \'check major versions only \n \n    If ShowErrMsg And IsEdgeDriverErr Then \n        ErrBox "Outdated version of EdgeDriver found!" & vbLf & vbLf & "Edge: v" & GetEdgeVersion() & vbLf \n& "EdgeDriver: v" & GetEdgeDriverVersion() & vbLf & vbLf & "Please update your EdgeDriver to continue...", \n"EdgeDriver" \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'       Edge Browser Version \n\''},
 {'page': 96,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 96 of 214 \n \n\u202f \n\'********************************** \n \nPublic Function GetEdgeVersion() As String \n    Dim WScript As Object \n \n    Set WScript = CreateObject("Wscript.Shell") \n    GetEdgeVersion = WScript.RegRead("HKCU\\Software\\Microsoft\\Edge\\BLBeacon\\Version") \n    Set WScript = Nothing \nEnd Function \n \n\'********************************** \n\' \n\'        EdgeDriver Version \n\' \n\'********************************** \n \nPublic Function GetEdgeDriverVersion() As String \n    Dim ScriptStr As String, ScriptPath As String, Text As String \n    Dim WSh As Object \n    Dim Path As String, OPath As String, VerArr() As String \n    Dim FSO As FileSystemObject \n    Dim TS As TextStream \n    Dim StartTime As LongPtr \n    Dim PID As Long, i As Long \n \n    GetEdgeDriverVersion = "0.0.0.0" \n \n    Path = GetSeleniumPath() \n    OPath = ThisWorkbook.Path & "\\1.txt" \n \n    ChDir ThisWorkbook.Path \n \n    Set WSh = CreateObject("WScript.Shell") \n    If WSh Is Nothing Then \n        ErrBox "WScript.Shell failed!", "Object" \n        Exit Function \n    End If \n    ScriptStr = "cmd.exe /c """ & Path & "\\" & EdgeDriverExe & """ --version >""" & OPath & """" & vbCrLf \n\'& "pause" & vbCrLf \n \n    ScriptPath = Path & "\\Selenium.bat" \n    Open ScriptPath For Output As #1 \n    Print #1, ScriptStr \n    Close #1 \n \n    PID = Shell(ScriptPath, vbHide) \n \n    Set WSh = Nothing \n \n    StartTime = GetTickCount() \n    While Dir(OPath, vbDirectory) = "" And GetTickCount() - StartTime < 15000 \n        StatPlus \n    Wend \n    If Dir(OPath, vbDirectory) = "" Then Exit Function \n \n    StartTime = GetTickCount() \n    While FileLen(OPath) = 0 And GetTickCount() - StartTime < 15000 \n        StatPlus \n    Wend \n    If FileLen(OPath) = 0 Then Exit Function \n \n    KillFile ScriptPath   \'selenium.bat \n \n    If PID = 0 Then Exit Function \n \n    Set FSO = CreateObject("Scripting.FileSystemObject") \n    If FSO Is Nothing Then \n        ErrBox "Scripting.FileSystemObject failed!", "Object" \n        Exit Function \n    End If \n    Set TS = FSO.OpenTextFile(OPath, ForReading) \n    Text = TS.ReadAll \n    VerArr = Split(Text) \n    TS.Close \n \n    On Error Resume Next \n    While Dir(OPath, vbDirectory) <> ""'},
 {'page': 97,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 97 of 214 \n \n\u202f \n        KillFile OPath  \'delete 1.txt \n    Wend \n    On Error GoTo 0 \n \n    GetEdgeDriverVersion = VerArr(UBound(VerArr) - 1) \n \n    Set FSO = Nothing \n    Set TS = Nothing \nEnd Function \n \n\'********************************** \n\' \n\'        Get Selenium Path \n\' \n\'********************************** \n \nPublic Function GetSeleniumPath() As String \n    GetSeleniumPath = Environ("USERPROFILE") & "\\AppData\\Local\\SeleniumBasic" \n \n    If Dir(GetSeleniumPath, vbDirectory) = "" Then \n        GetSeleniumPath = "C:\\Program Files\\SeleniumBasic" \n \n        If Dir(GetSeleniumPath, vbDirectory) = "" Then \n            GetSeleniumPath = ""    \'not installed \n        End If \n    End If \nEnd Function \n \n\'********************************** \n\' \n\'        Download EdgeDriver \n\' \n\'********************************** \n \nPublic Function DownloadEdgeDriver(EdgeVer As String) As Boolean \n    Dim URL As String, Path As String, SelPath As String \n    Dim lResult As Long \n \n    DownloadEdgeDriver = False \n \n    URL = "https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/" & EdgeVer & "/" & \nEdgeDriverZip \n    \'URL = "https://msedgedriver.azureedge.net/" & EdgeVer & "/" & EdgeDriverZip \n    Path = ThisWorkbook.Path & "\\" & EdgeDriverZip \n \n    lResult = URLDownloadToFile(0, URL, Path, 0, 0) \n    If lResult = 0 Then \n        If UnzipFile(Path, ThisWorkbook.Path, MSEdgeDriverExe) Then \n            SelPath = GetSeleniumPath() & "\\" & EdgeDriverExe \n \n            QuitEdge \n \n            If FileExists(SelPath) Then \n                KillFile SelPath    \'delete old edgedriver.exe \n            End If \n \n            Name ThisWorkbook.Path & "\\" & MSEdgeDriverExe As SelPath \n \n            DownloadEdgeDriver = True \n            WriteLog "EdgeDriver: Updated to v" & EdgeVer \n \n            GetNewEdge "", "" \n        End If \n \n        If FileExists(ThisWorkbook.Path & "\\" & MSEdgeDriverExe) Then \n            KillFile ThisWorkbook.Path & "\\" & MSEdgeDriverExe      \'delete msedgedriver.exe \n        End If \n \n        KillFile Path   \'delete edgedriver_win32.zip \n    End If \nEnd Function \n \nPrivate Function UnzipFile(ZipPath As String, UnzipDir As String, FileToUnzip As String) As Boolean \n    Dim ShApp As Shell \n    Dim ZipItems As FolderItems \n    Dim ZipItem As FolderItem'},
 {'page': 98,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 98 of 214 \n \n\u202f \n    UnzipFile = False \n \n    On Error GoTo Err \n \n    Set ShApp = CreateObject("Shell.Application") \n    If ShApp Is Nothing Then \n        ErrBox "Shell.Application failed!", "Object" \n        Exit Function \n    End If \n    Set ZipItems = ShApp.Namespace(ZipPath).Items \n \n    For Each ZipItem In ZipItems \n        If ZipItem.Name = FileToUnzip Or ZipItem.Name = Left(FileToUnzip, Len(FileToUnzip) - 4) Then \n            ShApp.Namespace(UnzipDir).CopyHere ZipItem \n            UnzipFile = True \n            Exit For \n        End If \n    Next ZipItem \n \nErr: \n    On Error GoTo 0 \n \n    Set ZipItems = Nothing \n    Set ShApp = Nothing \nEnd Function \n \nPrivate Function FileExists(FileName As String) As Boolean \n    Dim objFSO As New Scripting.FileSystemObject \n \n    FileExists = objFSO.FileExists(FileName) \n \n    Set objFSO = Nothing \nEnd Function \n \nPrivate Function KillFile(FileName As String) As Boolean \n    Dim StartTime As LongPtr \n \n    On Error Resume Next \n \n    StartTime = GetTickCount() \n    While FileExists(FileName) And GetTickCount() - StartTime < 15000 \n        Kill FileName \n        StatPlus \n    Wend \n \n    On Error GoTo 0 \nEnd Function \n \n\'@1.31 Module - Lib_Email \n \nOption Explicit \n \nPublic FileArr() As String          \'array of signature files \nPublic FileArrSelected As String    \'signature file selected from userform1.listbox \n \nPublic Function IsGreyEmail() \n    IsGreyEmail = (ThisWorkbook.Worksheets("HOME").Range("GreyEmail").Value = 1) \nEnd Function \n \nPublic Sub GreyEmail(Flag As Boolean) \n    If ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run4 Then \n        If Flag = True Then \n            ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Font.Color = RGB(192, 192, \n192) \n            ThisWorkbook.Worksheets("HOME").Range("GreyEmail").Value = 1 \n        Else \n            ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Font.Color = RGB(0, 0, 0) \n            ThisWorkbook.Worksheets("HOME").Range("GreyEmail").Value = 0 \n        End If \n    End If \nEnd Sub \n \nPublic Sub GreyEmailReset(Optional Dummy As Boolean) \n    ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Font.Color = RGB(0, 0, 0) \n    ThisWorkbook.Worksheets("HOME").Range("GreyEmail").Value = 0 \nEnd Sub'},
 {'page': 99,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 99 of 214 \n \n\u202f \nPublic Sub GreyEmailRefresh(Optional Dummy As Boolean) \n    If IsGreyEmail() = True Then \n        GreyEmail True \n    Else \n        GreyEmail False \n    End If \nEnd Sub \n \nPublic Function EmailFirstName(Address As String) As String \n    Dim pos As Integer \n \n    pos = InStr(1, Address, " ") \n    If pos = 0 Then \n        EmailFirstName = "Team" \n    Else \n        EmailFirstName = Trim(Left(Address, pos)) \n    End If \nEnd Function \n \nPublic Function EmailName(Address As String) As String \n    Dim pos As Integer \n \n    pos = InStr(1, Address, "<") \n    If pos = 0 Then \n        EmailName = "Unknown" \n    Else \n        EmailName = Trim(Left(Address, pos - 1)) \n    End If \nEnd Function \n \nPublic Function EmailAddress(Address As String) As String \n    Dim pos As Integer \n \n    pos = InStr(1, Address, "<") \n    If pos = 0 Then \n        EmailAddress = "Unknown@cba.com.au" \n    Else \n        EmailAddress = Trim(Mid(Address, pos + 1, Len(Address) - pos - 1)) \n    End If \nEnd Function \n \nPublic Function SendToEmail(ByRef Outlook As Object, EmailTo As String, CC As String, Subject As String, \nBody As String, FileName As String, Optional EmailFrom As String = "") As Boolean \n    Dim MailMsg As Object \n \n    SendToEmail = True \n    On Error GoTo Err \n \n    Set MailMsg = Outlook.CreateItem(0) \n    StatPlus \n \n    MailMsg.To = EmailTo \n    MailMsg.CC = CC \n    MailMsg.Subject = Subject \n    MailMsg.HTMLBody = Body \n \n    If EmailFrom <> "" Then \n        Set MailMsg.SendUsingAccount = Outlook.Session.Accounts.Item(EmailNumber(Outlook, EmailFrom)) \n    End If \n \n    If FileName <> "" And Dir(FileName) <> "" Then \n        MailMsg.Attachments.Add FileName \n \n        If InStr(1, FileName, "Change Request") = 0 Then \n            Kill FileName     \'delete the temp file \n        End If \n    End If \n \n    MailMsg.display   \'or use .Send \n \n    Set MailMsg = Nothing \n    Exit Function \n \nErr: \n    SendToEmail = False \nEnd Function'},
 {'page': 100,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 100 of 214 \n \n\u202f \nFunction EmailNumber(ByRef Outlook As Object, EmailFrom As String) As Long \n    Dim i As Long \n \n    EmailNumber = 1 \n \n    On Error Resume Next \n    For i = 1 To Outlook.Session.Accounts.Count \n        \'Debug.Print i & ": " & OutLook.Session.Accounts.Item(i).SmtpAddress \n        If Outlook.Session.Accounts.Item(i).SmtpAddress = EmailFrom Then \n            EmailNumber = i \n            Exit Function \n        End If \n \n        StatPlus \n    Next i \n    On Error GoTo 0 \nEnd Function \n \nPublic Function RngtoHTML(SheetName As String, Rng As String, BaseName As String, title As String) As \nString \n    Dim FSO As New FileSystemObject \n    Dim TS As TextStream \n    Dim TempFile As String \n \n    If SheetName = "HOME" Then \n        UnprotectHome \n    End If \n \n    TempFile = GetUniqueFileName(BaseName, ".htm") \n    With ThisWorkbook.PublishObjects.Add(xlSourceRange, _ \n                                         TempFile, _ \n                                         SheetName, _ \n                                         ThisWorkbook.Worksheets(SheetName).Range(Rng).Address, _ \n                                         xlHtmlStatic, _ \n                                         "UPITool_1", _ \n                                         title) \n        .Publish (True) \n    End With \n \n    If SheetName = "HOME" Then \n        ProtectHome \n    End If \n \n    RngtoHTML = "" \n \n    On Error GoTo Err \n    Set TS = FSO.OpenTextFile(TempFile, ForReading) \n    On Error GoTo 0 \n \n    RngtoHTML = Replace(TS.ReadAll, "align=center x:publishsource=", "align=left x:publishsource=") \n    TS.Close \n \n    Kill TempFile \n \nErr: \n    Set TS = Nothing \n    Set FSO = Nothing \nEnd Function \n \nPrivate Function LoadFile(ByRef File As String) As String \n    Dim FSO As Object \n    Dim TS As Object \n \n    Set FSO = CreateObject("Scripting.FileSystemObject") \n    Set TS = FSO.GetFile(File).OpenAsTextStream(1, -2) \n    LoadFile = TS.ReadAll \n    TS.Close \nEnd Function \n \nPrivate Function LoadSig(ByRef SigName As String, ByRef SigDir As String) As String \n    Dim ImageDir As String \n    Dim ImagePath As String \n    Dim HTMText As String \n \n    ImageDir = Replace(SigName & "_files", " ", "%20") \n    ImageDir = Replace(ImageDir, "&", "&amp;")'},
 {'page': 101,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 101 of 214 \n \n\u202f \n    ImagePath = SigDir & SigName & "_files"     \'must be actual path. do not use %20 for space characters \n \n    HTMText = LoadFile(SigDir & SigName & ".htm") \n    LoadSig = Replace(HTMText, ImageDir, ImagePath) \n    If LoadSig = HTMText Then LoadSig = "" \nEnd Function \n \nPublic Function GetSignature() As String \n    Dim SigDir As String, SigFile As String \n    Dim Count As Integer \n \n    Count = 0 \n    SigDir = Environ("appdata") & "\\Microsoft\\Signatures\\" \n    SigFile = Dir(SigDir & "*.htm", vbNormal) \n \n    Do \n        If SigFile <> "" Then \n            Count = Count + 1 \n            ReDim Preserve FileArr(1 To Count) \n            FileArr(Count) = SigFile \n \n            SigFile = Dir   \'next file \n        End If \n \n        StatPlus \n    Loop Until SigFile = "" \n \n    If Count = 0 Then       \'no signature files \n        GetSignature = "" \n    ElseIf Count = 1 Then   \'1 signature file \n        GetSignature = LoadSig(Left(FileArr(1), Len(FileArr(1)) - 4), SigDir) \n    Else                    \'many signature files \n        SignatureForm.Show \n        GetSignature = LoadSig(FileArrSelected, SigDir) \n    End If \n \n    If GetSignature = "" Then \n        GetSignature = "Kind Regards,<br>" & Environ("USERNAME") & " (" & Environ("USERDOMAIN") & ")<br>" \n    End If \nEnd Function \n \nPublic Sub SaveAsWorkBook(Optional Dummy As Boolean) \n    Dim FName As String, Name As String \n \n    FName = GetDailyFilePath() \n    Name = Right(FName, Len(FName) - InStrRev(FName, "\\", -1)) \n \n    StatZero "Encrypting reports" \n    XorWorkBook xEncrypt \n    StatMsg True, "Encrypting reports" \n \n    StatZero "Saving as " & Name \n \n    StatPlus \n    ThisWorkbook.SaveAs FileName:=FName, FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False \n    Application.Cursor = xlWait     \'beforesave sets it to xlDefault \n \n    StatMsg True, "Saving as " & Name \n \n    ProtectHome \n    ThisWorkbook.Worksheets("HOME").Shapes("Lock").TextFrame.Characters.Text = "LOCK" \n \n    StatZero "Decrypting reports" \n    XorWorkBook xDecrypt \n    StatMsg True, "Decrypting reports" \nEnd Sub \n \nPublic Function GetUniqueFileName(BaseName As String, Ext As String, Optional UsePath As String = "") As \nString \n    Dim SaveDirectory As String \n    Dim Path As String \n    Dim TestPath As String \n    Dim Count As Integer \n \n    Path = "" \n    If UsePath = "" Then \n        SaveDirectory = Environ("TEMP") & "\\"'},
 {'page': 102,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 102 of 214 \n \n\u202f \n    Else \n        SaveDirectory = UsePath & "\\" \n    End If \n    BaseName = Replace(Trim(BaseName), "/", "-") \n \n    Count = 1 \n \n    Do \n        If Count > 1 Then \n            TestPath = SaveDirectory & BaseName & " (" & Trim(str(Count)) & ")" & Ext \n        Else \n            TestPath = SaveDirectory & BaseName & Ext \n        End If \n \n        If (Dir(TestPath) = "") Then \n            Path = TestPath     \'unique filename \n        Else \n            Count = Count + 1 \n        End If \n \n        StatPlus \n    Loop Until Path <> "" \n \n    GetUniqueFileName = Path    \'found useable filename \nEnd Function \n \nPublic Sub AddVerifyBOI(Optional Dummy As Boolean) \n    Dim i As Integer, Lastrow As Long \n \n    HeadingBOI SheetVerifyBOI, "R" \n \n    With ThisWorkbook.Worksheets(SheetVerifyBOI) \n        With .Range("P1") \n            .Value = "VERIFY" \n \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(217, 217, 217) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n \n        Lastrow = LastRowInCol(SheetBOI, "A") - 1 \n        If Lastrow > 1 Then \n            .Range("A2:M" & Lastrow).Interior.Color = RGB(242, 242, 242) \n            With .Range("A2") \n                .Value = "Paste Here" \n                .Font.Color = RGB(166, 166, 166) \n                .Interior.ColorIndex = 0    \'no fill \n                .HorizontalAlignment = xlCenter \n            End With \n \n            With .Range("P2:P" & Lastrow) \n                .Formula = "=IF(AND(E2=" & SheetBOI & "!E2,F2=" & SheetBOI & "!F2,G2=" & SheetBOI & \n"!G2),""YES"",""NO"")" \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n            End With \n \n            VerifyColor .Range("P2:P" & Lastrow)    \'conditional formating \n        End If \n \n        For i = 0 To 14 \n            .Range(Chr(asc("A") + i) & "1").ColumnWidth = \nThisWorkbook.Worksheets(SheetBOI).Range(Chr(asc("A") + i) & "1").ColumnWidth \n        Next i \n        .Range("N1").ColumnWidth = ThisWorkbook.Worksheets(SheetBOI).Range("N1").ColumnWidth + 4 \n        .Range("P1").ColumnWidth = ThisWorkbook.Worksheets(SheetBOI).Range("O1").ColumnWidth \n    End With \n \n    CopyMacro1 SheetVerifyBOI \nEnd Sub \n \nPublic Sub AddVerifyDebit(Optional Dummy As Boolean) \n    Dim i As Long, Lastrow As Long \n    Dim srcRng As Range, dstRng As Range'},
 {'page': 103,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 103 of 214 \n \n\u202f \n    With ThisWorkbook.Worksheets(SheetVerifyDr) \n        With .Range("Q5") \n            .Value = "VERIFY" \n \n            .HorizontalAlignment = xlCenter \n            .VerticalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.ColorIndex = 0 \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlMedium \n        End With \n \n        Lastrow = LastRowInCol(SheetDebit, "A") - 1 \n        If Lastrow > 5 Then \n            .Range("A6:P" & Lastrow).Interior.Color = RGB(242, 242, 242) \n            With .Range("A6") \n                .Value = "Paste Here" \n                .Font.Color = RGB(166, 166, 166) \n                .Interior.ColorIndex = 0    \'no fill \n                .HorizontalAlignment = xlCenter \n            End With \n \n            With .Range("Q6:Q" & Lastrow) \n                .HorizontalAlignment = xlCenter \n                .Formula = "=IF(AND(A6=DEBIT!A6,B6=DEBIT!B6),""YES"",""NO"")" \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlMedium \n            End With \n \n            VerifyColor .Range("Q6:Q" & Lastrow)    \'conditional formating \n        End If \n \n        For i = 0 To 16     \'column width \n            .Range(Chr(asc("A") + i) & "1").ColumnWidth = \nThisWorkbook.Worksheets(SheetDebit).Range(Chr(asc("A") + i) & "1").ColumnWidth \n        Next i \n \n        For i = 1 To 5      \'row height \n            .Range("A" & i).RowHeight = ThisWorkbook.Worksheets(SheetDebit).Range("A" & i).RowHeight \n        Next i \n \n        .Range("S6").Value = "Verified By:" \n        .Range("S7").Value = "Date:" \n        .Range("S8").Value = "Time:" \n \n        .Range("S6").HorizontalAlignment = xlRight \n        .Range("S7").HorizontalAlignment = xlRight \n        .Range("S8").HorizontalAlignment = xlRight \n    End With \n \n    Set srcRng = ThisWorkbook.Worksheets(SheetDebit).Range("A1:P5") \n    Set dstRng = ThisWorkbook.Worksheets(SheetVerifyDr).Range("A1:P5") \n \n    srcRng.Copy Destination:=dstRng \n \n    Set srcRng = Nothing \n    Set dstRng = Nothing \n \n    GrayScaleRange SheetVerifyDr, 5, 16 \nEnd Sub \n \nPublic Sub AddVerifyCredit(Optional Dummy As Boolean) \n    Dim i As Long, Lastrow As Long \n    Dim srcRng As Range, dstRng As Range \n \n    With ThisWorkbook.Worksheets(SheetVerifyCr) \n        With .Range("Q5") \n            .Value = "VERIFY" \n \n            .HorizontalAlignment = xlCenter \n            .VerticalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.ColorIndex = 0 \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlMedium \n        End With'},
 {'page': 104,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 104 of 214 \n \n\u202f \n        Lastrow = LastRowInCol(SheetCredit, "A") - 1 \n        If Lastrow > 5 Then \n            .Range("A6:P" & Lastrow).Interior.Color = RGB(242, 242, 242) \n            With .Range("A6") \n                .Value = "Paste Here" \n                .Font.Color = RGB(166, 166, 166) \n                .Interior.ColorIndex = 0    \'no fill \n                .HorizontalAlignment = xlCenter \n            End With \n \n            With .Range("Q6:Q" & Lastrow) \n                .HorizontalAlignment = xlCenter \n                .Formula = "=IF(AND(A6=CREDIT!A6,B6=CREDIT!B6),""YES"",""NO"")" \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlMedium \n            End With \n \n            VerifyColor .Range("Q6:Q" & Lastrow)    \'conditional formating \n        End If \n \n        For i = 0 To 16     \'column width \n            .Range(Chr(asc("A") + i) & "1").ColumnWidth = \nThisWorkbook.Worksheets(SheetDebit).Range(Chr(asc("A") + i) & "1").ColumnWidth \n        Next i \n \n        For i = 1 To 5      \'row height \n            .Range("A" & i).RowHeight = ThisWorkbook.Worksheets(SheetDebit).Range("A" & i).RowHeight \n        Next i \n \n        .Range("S6").Value = "Verified By:" \n        .Range("S7").Value = "Date:" \n        .Range("S8").Value = "Time:" \n \n        .Range("S6").HorizontalAlignment = xlRight \n        .Range("S7").HorizontalAlignment = xlRight \n        .Range("S8").HorizontalAlignment = xlRight \n    End With \n \n    Set srcRng = ThisWorkbook.Worksheets(SheetCredit).Range("A1:P5") \n    Set dstRng = ThisWorkbook.Worksheets(SheetVerifyCr).Range("A1:P5") \n \n    srcRng.Copy Destination:=dstRng \n \n    Set srcRng = Nothing \n    Set dstRng = Nothing \n \n    GrayScaleRange SheetVerifyCr, 5, 16 \nEnd Sub \n \nPublic Function CheckVerify(SheetName As String, Optional LookFor As String = "NO") As Boolean \n    Dim Row As Long \n \n    CheckVerify = True \n \n    Row = 6 \n    With ThisWorkbook.Worksheets(SheetName) \n        While Not IsEmpty(.Range("Q" & Row)) \n            If .Range("Q" & Row).Value = LookFor Then \n                CheckVerify = False \n                Exit Function \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n    End With \nEnd Function \n \nPublic Sub StampVerify(SheetName As String) \n    If Not SheetExists(SheetName) Then Exit Sub         \'nothing to stamp \n \n    With ThisWorkbook.Worksheets(SheetName) \n        If CheckVerify(SheetName, "YES") Then     \'all are "NO" \n            .Range("T6").Value = ThisWorkbook.Worksheets("HOME").Range("FullName").Value \n            .Range("T7").Value = Date \n            .Range("T8").Value = Time'},
 {'page': 105,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 105 of 214 \n \n\u202f \n            .Range("T6").ColumnWidth = .Range("T6").ColumnWidth + 4 \n            .Range("T7").ColumnWidth = .Range("T6").ColumnWidth + 4 \n            .Range("T8").ColumnWidth = .Range("T6").ColumnWidth + 4 \n \n            .Range("T6").HorizontalAlignment = xlLeft \n            .Range("T7").HorizontalAlignment = xlLeft \n            .Range("T8").HorizontalAlignment = xlLeft \n        End If \n    End With \nEnd Sub \n \nPublic Sub VerifyColor(Rng As Range) \n    With Rng \n        .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""YES""" \n        With .FormatConditions(1).Font \n            .Color = -16752384 \n            .TintAndShade = 0 \n        End With \n        With .FormatConditions(1).Interior \n            .PatternColorIndex = xlAutomatic \n            .Color = 13561798 \n            .TintAndShade = 0 \n        End With \n        .FormatConditions(1).StopIfTrue = False \n \n        .FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""NO""" \n        .FormatConditions(.FormatConditions.Count).SetFirstPriority \n        With .FormatConditions(1).Font \n            .Color = -16383844 \n            .TintAndShade = 0 \n        End With \n        With .FormatConditions(1).Interior \n            .PatternColorIndex = xlAutomatic \n            .Color = 13551615 \n            .TintAndShade = 0 \n        End With \n        .FormatConditions(1).StopIfTrue = False \n \n        .HorizontalAlignment = xlCenter \n    End With \nEnd Sub \n \nPrivate Sub GrayScaleRange(SheetName As String, Rows As Long, Cols As Long) \n    Dim i As Long, j As Long, Color As Long \n \n    For i = 1 To Cols     \'grayscale \n        For j = 1 To Rows \n            Color = ThisWorkbook.Worksheets(SheetName).Range(Chr(asc("A") + i - 1) & j).Interior.Color \n \n            If Color <> RGB(255, 255, 255) Then \n                ThisWorkbook.Worksheets(SheetName).Range(Chr(asc("A") + i - 1) & j).Interior.Color = \nGrayScale(Color) \n            End If \n        Next j \n    Next i \nEnd Sub \n \nPrivate Function GrayScale(Color As Long) As Long \n    Dim r As Long, g As Long, b As Long \n \n    r = (Color \\ 256 ^ 0 And 255) * 0.287 \n    g = (Color \\ 256 ^ 1 And 255) * 0.589 \n    b = (Color \\ 256 ^ 2 And 255) * 0.114 \n \n    GrayScale = RGB(r + g + b, r + g + b, r + g + b) \nEnd Function \n \n\'@1.32 Module - Lib_Interaction \n \n\'------------------------------------------------------- \n\' \n\'       Interaction tab related subroutines and functions \n\' \n\'------------------------------------------------------- \n \n\'Option Explicit'},
 {'page': 106,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 106 of 214 \n \n\u202f \nPublic Const SheetInteraction As String = "INTERACTION" \n \nPublic Sub CreateInteraction(Optional Dummay As Boolean) \n    AppendNewWorksheet SheetInteraction, SheetBOI \n    HeadingInteraction SheetInteraction \nEnd Sub \n \n \nPublic Sub HeadingInteraction(SheetName As String) \n    Dim Col As Integer \n \n    With ThisWorkbook.Worksheets(SheetName) \n        .Range("A1").Value = "Merchant Acc Num" \n        .Range("B1").Value = "Garn Reference" \n        .Range("C1").Value = "Customer Notes" \n \n        With .Range("A1:C1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(0, 176, 240) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n \n    End With \nEnd Sub \n \nPublic Sub RemoveAnyFilters(Optional Dummay As Boolean) \n \n    Sheets(SheetMGDATA).AutoFilterMode = False \n    Sheets(SheetAction).AutoFilterMode = False \n    Sheets(SheetBOI).AutoFilterMode = False \n    Sheets(SheetInteraction).AutoFilterMode = False \n    If SheetExists(SheetManual) Then \n        Sheets(SheetManual).AutoFilterMode = False \n    End If \n \nEnd Sub \n \nPublic Function GenerateInteractionData() As Boolean \n    GenerateInteractionData = False \n    StatZero "Building " & PCase(SheetInteraction) & " Report" \n \n    On Error GoTo Err \n \n    RemoveAnyFilters \n \n    Sheets(SheetAction).Select \n \n    \'Merchant Acc Number \n    Dim lrow As Long \n    lrow = Cells(Rows.Count, "BF").End(xlUp).Row \n    Sheets(SheetInteraction).Select \n    Range("A2").Formula = "=CONCATENATE(ACTION!BF2,ACTION!BG2)" \n    If lrow > 2 Then \n        Range("A2").AutoFill Destination:=Range("A2:A" & lrow) \n    End If \n \n    \'Garn Reference \n    Range("B2").Formula = "=RIGHT(ACTION!BH2,LEN(ACTION!BH2)-5)" \n    If lrow > 2 Then \n        Range("B2").AutoFill Destination:=Range("B2:B" & lrow) \n    End If \n \n    \'Customer Notes \n    Range("C2").Formula = "=CONCATENATE(ACTION!BI2,"" / "",RIGHT(ACTION!BJ2,LEN(ACTION!BJ2)-20))" \n    If lrow > 2 Then \n        Range("C2").AutoFill Destination:=Range("C2:C" & lrow) \n    End If \n \n    \'Merchant Acc Number cell color filling \n    Range("A2:A" & lrow).Interior.Color = RGB(255, 230, 153) \n    Range("A2:A" & lrow).Borders.LineStyle = xlContinuous \n \n    StatPlus \n \n    \'sorting Interaction sheet'},
 {'page': 107,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 107 of 214 \n \n\u202f \n    Sheets(SheetInteraction).Select \n    SortSheet SheetInteraction, "A", "A2:C" & Cells(Rows.Count, "A").End(xlUp).Row \n \n    ThisWorkbook.Worksheets(SheetInteraction).Columns("A:C").AutoFit \n \n    GenerateInteractionData = True \n \n    StatMsg GenerateInteractionData, "Building " & PCase(SheetInteraction) & " Report" \n    Exit Function \nErr: \n    GenerateInteractionData = False \n    StatMsg GenerateInteractionData, "Building " & PCase(SheetInteraction) & " Report" \n \nEnd Function \n \nPublic Sub SortSheet(SheetName As String, ColumnName As String, ColRange As String) \n \nColumns(ColumnName & ":" & ColumnName).Select \nActiveWorkbook.Worksheets(SheetName).Sort.SortFields.Clear \nActiveWorkbook.Worksheets(SheetName).Sort.SortFields.Add Key:=Range(ColumnName & "2"), _ \n    SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal \nWith ActiveWorkbook.Worksheets(SheetName).Sort \n    .SetRange Range(ColRange) \n    .Header = xlNo \n    .MatchCase = False \n    .Orientation = xlTopToBottom \n    .SortMethod = xlPinYin \n    .Apply \nEnd With \n \nEnd Sub \n \n\'@1.33 Module - Lib_Log \n \nOption Explicit \n \nPrivate Const FileName As String = "Access Log" \nPrivate Const FileExt As String = ".txt" \nPrivate Const MaxLen As Long = 5242880         \'max file length 5mb \n \n \nPublic Sub WriteLog(Text As String) \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim LogFile As TextStream \n    Dim Path As String, Line As String \n \n    Path = Application.ThisWorkbook.Path & "\\" & FileName & FileExt \n \n    If CheckLog(Path) Then \n        Set LogFile = objFSO.OpenTextFile(Path, ForAppending) \n \n        Text = Replace(Text, vbLf, " ") \n        If Text = "" Then \n            Line = "" \n        Else \n            Line = "[" & Date & " " & Time & "][" & Environ("username") & ":" & \nThisWorkbook.Worksheets("HOME").Range("Access2") & "] " \n        End If \n \n        LogFile.WriteLine Line & Text \n \n        LogFile.Close \n        Set LogFile = Nothing \n    End If \nEnd Sub \n \nPublic Function SearchLog(Text As String) As Boolean \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim Path As String \n    Dim Count As Long \n \n    Count = 1 \n    Path = Application.ThisWorkbook.Path & "\\" & FileName & FileExt \n \nAgain: \n    UnHideLog Path \n    SearchLog = DoSearch(Path, Text)'},
 {'page': 108,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 108 of 214 \n \n\u202f \n    HideLog Path \n \n    If Not SearchLog Then \n        Count = Count + 1 \n        Path = Application.ThisWorkbook.Path & "\\" & FileName & " (" & Trim(str(Count)) & ")" & FileExt \n \n        If objFSO.FileExists(Path) Then GoTo Again \n    End If \nEnd Function \n \nPrivate Function DoSearch(Path As String, Text As String) As Boolean \n    Dim objFSO As New FileSystemObject \n    Dim LogFile As TextStream \n    Dim Line As String \n \n    DoSearch = False \n \n    On Error GoTo Err \n    Set LogFile = objFSO.OpenTextFile(Path, ForReading, False, TristateMixed) \n    On Error GoTo 0 \n \n    Do Until LogFile.AtEndOfStream \n        Line = LogFile.ReadLine \n        If InStr(1, Line, Text) > 0 Then \n            DoSearch = True \n            GoTo Err \n        End If \n \n        DoEvents \n    Loop \n \nErr: \n    LogFile.Close \n    Set LogFile = Nothing \nEnd Function \n \nPrivate Function CheckLog(Path As String) As Boolean \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim LogFile As TextStream \n \n    CheckLog = False \n    On Error GoTo Err \n \n    If Not objFSO.FileExists(Path) Then     \'create the log file \n        If Not CreateLog(Path) Then GoTo Err \n    End If \n \n    If FileLen(Path) > MaxLen Then \n        Name Path As NewLogName(FileName, FileExt) \n \n        If Not CreateLog(Path) Then GoTo Err \n    End If \n \n    CheckLog = True \nErr: \n    On Error GoTo 0 \nEnd Function \n \nPrivate Function CreateLog(Path As String) As Boolean \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim LogFile As TextStream \n \n    CreateLog = False \n \n    On Error GoTo Err \n    Set LogFile = objFSO.CreateTextFile(Path, True) \n    LogFile.Close \n    HideLog Path \n \n    CreateLog = True \nErr: \n    On Error GoTo 0 \n    Set LogFile = Nothing \nEnd Function \n \nPrivate Sub HideLog(Path As String) \n    Dim objFSO As New Scripting.FileSystemObject'},
 {'page': 109,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 109 of 214 \n \n\u202f \n    Dim File As File \n \n    Set File = objFSO.GetFile(Path) \n    File.Attributes = File.Attributes Or Hidden Or System  \'hide the file \n    Set File = Nothing \nEnd Sub \n \nPrivate Sub UnHideLog(Path As String) \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim File As File \n \n    Set File = objFSO.GetFile(Path) \n    File.Attributes = File.Attributes And Not System        \'remove system attr \n    Set File = Nothing \nEnd Sub \n \nPrivate Function NewLogName(BaseName As String, Ext As String) As String \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim SaveDirectory As String \n    Dim Path As String \n    Dim TestPath As String \n    Dim Count As Integer \n \n    SaveDirectory = Application.ThisWorkbook.Path & "\\" \n    BaseName = Replace(Trim(BaseName), "/", "-") \n \n    Path = "" \n    Count = 1 \n    Do \n        If Count > 1 Then \n            TestPath = SaveDirectory & BaseName & " (" & Trim(str(Count)) & ")" & Ext \n        Else \n            TestPath = SaveDirectory & BaseName & Ext \n        End If \n \n        If Not objFSO.FileExists(TestPath) Then \n            Path = TestPath     \'unique filename \n        Else \n            Count = Count + 1 \n        End If \n    Loop Until Path <> "" \n \n    Set objFSO = Nothing \n    MsgBox Path \n    NewLogName = Path    \'found useable filename \nEnd Function \n \n\'@1.34 Module - Lib_Messages \n \n\'------------------------------------------------------- \n\' \n\'    Status Window related subroutines and functions \n\' \n\' Dependencies include: \n\'   1. Cells: Status on HOME sheet \n\' \n\' Last Update: 3/2/2019 \n\'------------------------------------------------------- \n \nOption Explicit \n \nPrivate Type RECT \n    Left As Long \n    Top As Long \n    Right As Long \n    Bottom As Long \nEnd Type \n \n#If Win64 Then \n    Public Declare PtrSafe Function GetTickCount Lib "Kernel32" Alias "GetTickCount64" () As LongPtr \n    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongPtrA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long) As LongPtr \n#Else \n    Public Declare PtrSafe Function GetTickCount Lib "Kernel32" () As LongPtr \n    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long) As LongPtr \n#End If'},
 {'page': 110,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 110 of 214 \n \n\u202f \n \nPrivate Declare PtrSafe Function UnhookWindowsHookEx Lib "user32" (ByVal hHook As LongPtr) As Long \nPrivate Declare PtrSafe Function GetCurrentThreadId Lib "Kernel32" () As Long \nPrivate Declare PtrSafe Function SetWindowsHookEx Lib "user32" Alias "SetWindowsHookExA" (ByVal idHook As \nLong, ByVal lpfn As LongPtr, ByVal hmod As LongPtr, ByVal dwThreadId As Long) As LongPtr \nPrivate Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hWnd As LongPtr, ByVal hWndInsertAfter \nAs LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As \nLong \nPrivate Declare PtrSafe Function GetWindowRect Lib "user32" (ByVal hWnd As LongPtr, ByRef lpRect As RECT) \nAs Long \n \n \nPrivate Const GWL_HINSTANCE = (-6) \nPrivate Const SWP_NOSIZE = &H1 \nPrivate Const SWP_NOZORDER = &H4 \nPrivate Const SWP_NOACTIVATE = &H10 \nPrivate Const HCBT_ACTIVATE = 5 \nPrivate Const WH_CBT = 5 \n \nPrivate plMsgHook As LongPtr \n \nPublic ErrStatEnable As Boolean        \'prevent other status messages being displayed \n \nPrivate WriteTextDelay As Long \nPrivate StartTimeRepl As LongPtr \nPrivate CountRepl As Integer \nPrivate WaitPreText As String \nPrivate WaitPostText As String \n \nPrivate MaxLines As Integer             \'scroll after max lines \nPrivate Buffer As String                \'status buffer \n \n\'********************************** \n\' \n\'   Has output messages stopped \n\' \n\'********************************** \n \nPublic Function IsStatsError() \n    IsStatsError = Not ErrStatEnable \nEnd Function \n \n\'********************************** \n\' \n\'       Allow output messages \n\' \n\'********************************** \n \nPublic Sub StatReset(Optional Dummy As Boolean) \n    ErrStatEnable = True \nEnd Sub \n \n\'********************************** \n\' \n\'       Clear Status window \n\' \n\'********************************** \n \nPublic Sub StatClear(Optional Milliseconds As Long = 400) \n    ErrStatEnable = True \n    WriteTextDelay = Milliseconds \n \n    WriteText "" \n \n    WaitPreText = "" \n    WaitPostText = "" \nEnd Sub \n \n\'********************************** \n\' \n\' Initalise a message busy elipses \n\' \n\'********************************** \n \nPublic Sub StatZero(Text As String) \n    Dim WaitFor As String, PostText As String \n    Dim pos As Integer'},
 {'page': 111,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 111 of 214 \n \n\u202f \n \n    If Text = "" Then Exit Sub \n \n    StartTimeRepl = -1 \n    CountRepl = 0 \n \n    pos = InStr(1, Text, " ") \n    If pos > 0 Then \n        WaitFor = Left(Text, pos) \n        PostText = Right(Text, Len(Text) - pos) \n    Else \n        WaitFor = "" \n        PostText = Text \n    End If \n \n    WaitPreText = WaitFor \n    WaitPostText = PostText \n \n    If Left(Text, 8) = "Waiting " Or Left(Text, 9) = "|Waiting " Then \n        StartTimeRepl = GetTickCount() + 1000 \n    End If \nEnd Sub \n \n\'********************************** \n\' \n\' Plus one to message busy elipses \n\' \n\'********************************** \n \nPublic Sub StatPlus(Optional Dummy As Boolean) \n    If GetTickCount() - StartTimeRepl > 1500 Or StartTimeRepl = -1 Then \n        StartTimeRepl = GetTickCount() \n        StatTick CountRepl \n        CountRepl = CountRepl + 1 \n    End If \n    DoEvents \nEnd Sub \n \nPrivate Sub StatTick(Count As Integer) \n    Dim Tail() As String \n \n    Tail = Split(" .| ..| ...| ....| .....", "|") \n \n    If WaitPreText <> "" Then \n        DoStatMsg True, WaitPreText & WaitPostText & Tail(Count Mod 5), "", "" \n    End If \nEnd Sub \n \n\'********************************** \n\' \n\'     Display a status message \n\' \n\'********************************** \n \nPublic Sub StatMsg(Flag As Boolean, Text As String) \n    Dim TextOutput As String \n    Dim pos As Integer \n \n    If Text = "" Then Exit Sub \n \n    If Left(Text, 8) = "Waiting " Or Left(Text, 9) = "|Waiting " Then \n        TextOutput = GetText() \n        pos = InStrRev(TextOutput, "  " & Text, -1) \n        If pos > 0 And Right(TextOutput, 2) = "." & vbLf Then \n            TextOutput = Left(TextOutput, pos - 1)  \'remove the Waiting line \n            SetText TextOutput \n        End If \n        Exit Sub \n    End If \n \n    If InStr(1, Text, "?") = 0 Then \n        DoStatMsg Flag, Text, " ... OK", " ... Fail" \n    Else \n        DoStatMsg Flag, Text, " ... Yes", " ... No" \n        ErrStatEnable = True    \'don\'t stop other status messages \n    End If'},
 {'page': 112,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 112 of 214 \n \n\u202f \n    StartTimeRepl = -1 \n    CountRepl = 0 \n \n    WaitPreText = "" \n    WaitPostText = "" \nEnd Sub \n \n\'********************************** \n\' \n\'     Display a text message \n\' \n\'********************************** \n \nPublic Sub StatText(Text As String) \n    DoStatMsg True, Text, "", "" \n \n    StartTimeRepl = -1 \n    CountRepl = 0 \n \n    WaitPreText = "" \n    WaitPostText = "" \nEnd Sub \n \nPrivate Sub DoStatMsg(Flag As Boolean, Text As String, OK As String, Fail As String) \n    Dim pos As Integer \n    Dim Count As Integer \n    Dim TextOutput As String \n \n    If ErrStatEnable = False Or Text = "" Then Exit Sub  \'nothing to show \n \n    TextOutput = GetText() \n    If WaitPreText <> "" Then \n        pos = InStrRev(TextOutput, "  " & WaitPreText, -1) \n        If pos > 0 And Right(TextOutput, 2) = "." & vbLf Then \n            TextOutput = Left(TextOutput, pos - 1)  \'remove the Waiting line \n            SetText TextOutput \n        End If \n    End If \n \n    If Flag Then \n        Text = Text & OK & vbLf \n    Else \n        Text = Text & Fail & vbLf \n    End If \n    Text = TextOutput + "  " & Text \n \n    If MaxLines = 0 Then \n        MaxLines = GetMaxLines() \n    End If \n \n    Count = 0 \n    pos = Len(Text) - 1 \n    Do While pos > 0 And Count < MaxLines \n        pos = InStrRev(Text, vbLf, pos) - 1 \n        Count = Count + 1 \n    Loop \n \n    If Count >= MaxLines Then \n        Text = Right(Text, Len(Text) - pos - 1) \n    End If \n \n    WriteText Text \n    ErrStatEnable = Flag \nEnd Sub \nPrivate Sub WriteText(Text As String) \n    Dim OrgSreenUpdating As Boolean \n \n    ThisWorkbook.Worksheets("HOME").Activate \n \n    SetText Text \n    ThisWorkbook.Worksheets("HOME").Range("Status").Value = Replace(Text, "|", "  ") \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = True \n    Sleep WriteTextDelay \n \n    Application.ScreenUpdating = OrgSreenUpdating'},
 {'page': 113,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 113 of 214 \n \n\u202f \nEnd Sub \n \nPrivate Function GetText() As String \n    GetText = Buffer \nEnd Function \n \nPrivate Sub SetText(Text As String) \n    Buffer = Text \nEnd Sub \n \nPrivate Function GetMaxLines() As Integer \n    Dim Addr As String \n    Dim Arr() As String \n \n    Addr = Replace(Range("Status").MergeArea.Address, ":", "") \n    Arr = Split(Addr, "$") \n    GetMaxLines = CInt(Arr(4)) - CInt(Arr(2)) \nEnd Function \n \n\'********************************** \n\' \n\'      Set focus to Workbook \n\' \n\'********************************** \n \nPublic Sub SetFocus(Optional Dummy As Boolean) \n    On Error Resume Next \n    AppActivate Application.Caption \n    On Error GoTo 0 \nEnd Sub \n \n\'********************************** \n\' \n\'    Display a warning message \n\' \n\'********************************** \n \nPublic Sub WarnBox(Text As String, Warn As String) \n    MsgBox2 Text, vbOKOnly & vbExclamation, Warn & " Warning" \nEnd Sub \n \n\'********************************** \n\' \n\'     Display an error message \n\' \n\'********************************** \n \nPublic Sub ErrBox(Text As String, Err As String) \n    MsgBox2 Text, vbOKOnly & vbCritical, Err & " Error" \nEnd Sub \n \n\'********************************** \n\' \n\'      Sleep for milliseconds \n\' \n\'********************************** \n \nPublic Sub Sleep(Milliseconds As Long) \n    Dim StartTime As LongPtr \n \n    StartTime = GetTickCount() \n    Do \n        DoEvents \n    Loop While GetTickCount() - StartTime < Milliseconds \nEnd Sub \n \n\'********************************** \n\' \n\'      Delay for milliseconds \n\' \n\'********************************** \n \nSub Delay(Milliseconds As Long) \n    Dim StartTime As LongPtr \n \n    StartTime = GetTickCount() \n    Do'},
 {'page': 114,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 114 of 214 \n \n\u202f \n    Loop While GetTickCount() - StartTime < Milliseconds \nEnd Sub \n \n\'********************************** \n\' \n\'    Centre MsgBox in Workbook \n\' \n\'********************************** \n \nPublic Function MsgBox2(Prompt As String, Optional Buttons As VbMsgBoxStyle = vbOKOnly, Optional title As \nString = "") As VbMsgBoxResult \n    Dim lInstance As LongPtr \n    Dim lThreadID As Long \n \n    SetFocus \n \n    lInstance = GetWindowLong(Application.hWnd, GWL_HINSTANCE) \n    lThreadID = GetCurrentThreadId() \n \n    plMsgHook = SetWindowsHookEx(WH_CBT, AddressOf CenterMsgCallBack, lInstance, lThreadID) \n \n \n    MsgBox2 = MsgBox(Prompt, Buttons, title) \n    WriteLog "MsgBox: " & title & ": " & Prompt & " (Ret=" & GetvbText(MsgBox2) & ")" \nEnd Function \n \nPrivate Function GetvbText(Ret As Long) \n    Select Case Ret \n        Case vbNo \n            GetvbText = "No" \n        Case vbYes \n            GetvbText = "Yes" \n        Case vbOK \n            GetvbText = "OK" \n        Case vbCancel \n            GetvbText = "Cancel" \n        Case vbAbort \n            GetvbText = "Abort" \n        Case Else \n            GetvbText = Ret \n    End Select \nEnd Function \n \nPrivate Function CenterMsgCallBack(ByVal lMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long \n    Dim rcFormRect As RECT \n    Dim rcRectMsg As RECT \n    Dim lxPos As Long, lyPos As Long \n \n    \'HCBT_ACTIVATE = MSG sent when MsgBox is activated \n    \'wParam = handle to MsgBox \n \n    If lMsg = HCBT_ACTIVATE Then \n        GetWindowRect Application.hWnd, rcFormRect \n        GetWindowRect wParam, rcRectMsg \n \n        lxPos = (rcFormRect.Left + (rcFormRect.Right - rcFormRect.Left) / 2) - ((rcRectMsg.Right - \nrcRectMsg.Left) / 2) \n        lyPos = (rcFormRect.Top + (rcFormRect.Bottom - rcFormRect.Top) / 2) - ((rcRectMsg.Bottom - \nrcRectMsg.Top) / 2) \n        SetWindowPos wParam, -1, lxPos, lyPos, 0, 0, SWP_NOSIZE \n \n        UnhookWindowsHookEx plMsgHook \n    End If \n \n    CenterMsgCallBack = False \nEnd Function \n \n\'@1.35 Module - Lib_Misc \n \n\'------------------------------------------------------- \n\' \n\'     Worksheet related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit'},
 {'page': 115,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 115 of 214 \n \n\u202f \nPrivate MOScreen As Boolean \n \nPublic Sub AddNewWorksheet(Name As String) \n    Name = UCase(Name) \n \n    DeleteWorksheet Name \n    Sheets.Add(Before:=Sheets(SheetDebit)).Name = Name \nEnd Sub \n \nPublic Sub AppendNewWorksheet(Name As String, Optional NameTab As String = SheetCredit) \n    Name = UCase(Name) \n \n    DeleteWorksheet Name \n    Sheets.Add(After:=Sheets(NameTab)).Name = Name \nEnd Sub \n \nPublic Sub DeleteWorksheet(Name As String) \n    Name = UCase(Name) \n \n    If SheetExists(Name) Then \n            Application.DisplayAlerts = False \n            Sheets(Name).Delete \n            Application.DisplayAlerts = True \n    End If \nEnd Sub \n \nPublic Function SheetExists(Name As String) As Boolean \n    Dim Sheet As Worksheet \n \n    SheetExists = False \n    For Each Sheet In ThisWorkbook.Worksheets \n        If Name = UCase(Sheet.Name) Then \n            SheetExists = True \n            Exit Function \n        End If \n        DoEvents \n    Next Sheet \nEnd Function \n \nPublic Function CountWorkbooks() As Integer \n    Dim Wb As Workbook \n \n    CountWorkbooks = 0 \n    For Each Wb In Workbooks \n        CountWorkbooks = CountWorkbooks + 1 \n    Next \nEnd Function \n \nPublic Function CountWorksheets() As Integer \n    Dim Sheet As Worksheet \n \n    CountWorksheets = 0 \n    For Each Sheet In ThisWorkbook.Worksheets \n        CountWorksheets = CountWorksheets + 1 \n    Next Sheet \nEnd Function \n \nPublic Function GetToolName() As String \n    GetToolName = Replace(ThisWorkbook.Worksheets("HOME").Range("I1").Value, "TOOL", "Tool") \nEnd Function \n \n\'return full path of MG Tool dd.mm.yyyy.xlsm \nPublic Function GetDailyFilePath() As String \n    GetDailyFilePath = GetUniqueFileName(Replace(GetToolName(), "Merchant Garnishee", "MG") & " " & \nFormat(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd.mm.yy"), ".xlsm", ThisWorkbook.Path) \nEnd Function \n \n\'return full path of MGTool_ddmmyyyy_hhmm.xlsm or MGTool_26082021_1040.csv \nPublic Function GetPPSFilePath(Ext As String) As String \n    GetPPSFilePath = Replace(Replace(GetToolName(), "Merchant Garnishee", "MG"), " ", "") & "_" & \nFormat(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "yyyymmdd") & "_" & Format(Time, "hhmm") \n \n    If Ext = ".csv" Then \n        GetPPSFilePath = GetPPSFilePath & Ext                       \'overwrite any existing .csv file \n    Else \n        GetPPSFilePath = GetUniqueFileName(GetPPSFilePath, Ext)  \'use temp folder \n    End If'},
 {'page': 116,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 116 of 214 \n \n\u202f \nEnd Function \n \nPublic Function GetFName(FileName As String) \n    Dim pos As Long \n \n    GetFName = FileName \n    pos = InStrRev(FileName, "\\") \n    If pos > 0 Then \n        GetFName = Mid(FileName, pos + 1) \n    End If \nEnd Function \n \nPublic Function LastColInRow(Name As String, InRow As Long) As String \n    With ThisWorkbook.Worksheets(Name) \n        LastColInRow = ColLetter(.Cells(InRow, .Columns.Count).End(xlToLeft).Column) \n    End With \nEnd Function \n \nPublic Function LastRowInCol(Name As String, InCol As String) As Long \n    With ThisWorkbook.Worksheets(Name) \n        If IsEmpty(.Range(InCol & 1).Value) Then \n            LastRowInCol = 1 \n        Else \n            LastRowInCol = .Range(InCol & .Rows.Count).End(xlUp).Row + 1 \n        End If \n    End With \nEnd Function \n \nPublic Function ColLetter(ByVal Num As Integer) As String \n    ColLetter = "" \n    While Num > 0 \n        ColLetter = Chr(asc("A") + (Num - 1) Mod 26) + ColLetter \n        Num = Int((Num - 1) / 26) \n    Wend \nEnd Function \n \nPublic Function ColNumber(Letters As String) As Long \n    Dim i As Long, Multi As Long \n \n    ColNumber = 0 \n    Multi = 1 \n    For i = Len(Letters) To 1 Step -1 \n        ColNumber = ColNumber + (asc(Mid(Letters, i, 1)) - asc("A") + 1) * Multi \n        Multi = Multi + 25 \n    Next i \nEnd Function \n \nPublic Sub CopyColumn(srcSheet As String, SrcCol As String, dstSheet As String, dstCol As String) \n    Dim srcRng As Range, dstRng As Range \n \n    Set srcRng = ThisWorkbook.Worksheets(srcSheet).Columns(SrcCol) \n    Set dstRng = ThisWorkbook.Worksheets(dstSheet).Columns(dstCol) \n \n    srcRng.Copy Destination:=dstRng \n \n    Set srcRng = Nothing \n    Set dstRng = Nothing \nEnd Sub \n \nPublic Sub CopyRow(srcSheet As String, srcRow As Long, dstSheet As String, dstRow As Long) \n    Dim srcRng As Range, dstRng As Range \n \n    Set srcRng = ThisWorkbook.Worksheets(srcSheet).Rows(srcRow) \n    Set dstRng = ThisWorkbook.Worksheets(dstSheet).Rows(dstRow) \n \n    srcRng.Copy Destination:=dstRng \n \n    Set srcRng = Nothing \n    Set dstRng = Nothing \nEnd Sub \n \nPublic Function PCase(Name As String) \n    PCase = StrConv(Name, vbProperCase) \nEnd Function \n \nPublic Function PadLeft(Text As String, Num As Integer, Optional Char As String = " ") As String \n    PadLeft = Right(String(Num, Char) & Text, Num)'},
 {'page': 117,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 117 of 214 \n \n\u202f \nEnd Function \n \nPublic Function PadRight(Text As String, Num As Integer, Optional Char As String = " ") As String \n    PadRight = Left(Text & String(Num, Char), Num) \nEnd Function \n \nPublic Sub EnableMacroOptimisations(Optional Dummay As String) \n    MOScreen = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    Application.Calculation = xlCalculationManual \n    Application.EnableEvents = False \n    Application.DisplayScrollBars = False \n    \'ActiveWindow.DisplayWorkbookTabs = False \n    Application.DisplayStatusBar = True \nEnd Sub \n \nPublic Sub DisableMacroOptimisations(Optional Dummay As String) \n    Application.Calculation = xlCalculationAutomatic \n    Application.EnableEvents = True \n    Application.DisplayScrollBars = True \n    Application.DisplayStatusBar = True \n    Application.ScreenUpdating = True \n    ActiveWindow.DisplayWorkbookTabs = True \n    Application.ScreenUpdating = MOScreen \nEnd Sub \n \nPublic Function IsDemo() As Boolean \n    Dim Username As String \n \n    Username = UCase(Environ("username")) \n    IsDemo = (Username = "CINCL3" Or Username = "BAIBKO" Or Username = "TALCEVLI" Or Username = "VIJAYSH") \nEnd Function \n \n\'@1.36 Module - Lib_PPS \n \nOption Explicit \n \n\'------------------------------------------------------- \n\' \n\' Pega Payment System related subroutines and functions \n\' \n\' Last Update: 10/07/2021 \n\'------------------------------------------------------- \n \n\'API Keys: \n\'Admin - AeximMcVHnccJFMlojSIdRTv5n6e7LaT* \n\'Test  - mKdU15cXHsP1PkP5TbwbQ1WDNruIs1-p* \n\' \n\'Note: Test website with the following test login\'s: \n\'          1. 00197352 pega1234 - FU \n\'          2. 00153681 pega1234 - SA \n\' \n \n#Const UsePPS = 1     \'1=prod, 2=test \n \n\'Payment classification: \n\'   1 - payment repair \n\'   2 - payment instruction \n\'   3 - payment dispute \n\'   4 - payment remediation \n\'   5 - payment internal \nPrivate Const PaymentClass As Long = 2   \'payment classification to select \n \n#If UsePPS = 1 Then     \'prod \n    Public Const OpenURL_PPS As String = "https://wm-ps.cmp.cba/prweb/sso"                                     \n\'URL for production PPS \n    Private Const CloseURL_PPS As String = "https://wm-ps.cmp.cba/prweb/"                                      \n\'URL to close PPS \n    Private Const FindURL_DashPPS As String = "pyActivity=%40baseclass.doUIAction"                             \n\'unique URL to find "Your Dashboard" \n    Private Const FindURL_PopupPPS As String = "pyActivity=CBAGrp-CBA-PUP-Work-Bulkupload.NewFromFlow"         \n\'unique URL to find the popup \n \n#ElseIf UsePPS = 2 Then \'test \n    Public Const OpenURL_PPS As String = "https://wm-ps-\nuat.cmp.dev.cba/prweb/AeximMcVHnccJFMlojSIdRTv5n6e7LaT*/!STANDARD?pyActivity=%40baseclass.doUIAction&isSDM'},
 {'page': 118,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 118 of 214 \n \n\u202f \n=true&action=display&label=Dashboard&className=Data-\nPortal&harnessName=BusinessUser&accessFromServer=false&contentID=e053266f-fc92-dc5b-e831-\nb5ff2ce9176a&dynamicContainerID=5ee1bb7a-4dfd-4c17-9afa-\n3ca619dd02cc&SkipConflictCheck=true&readOnly=false&api=display&portalName=Inputter&portalThreadName=STANDA\nRD&tabIndex=1&pzHarnessID=HID4620D6C5387413E86EA7F90E4E8547D7&fromBrowserHistory=true" \n    Private Const CloseURL_PPS As String = "https://wm-ps-uat.cmp.dev.cba/prweb/" \n    Private Const FindURL_DashPPS As String = "pyActivity=%40baseclass.doUIAction" \n    Private Const FindURL_PopupPPS As String = "pyActivity=CBAGrp-CBA-PUP-Work-Bulkupload.NewFromFlow" \n#End If \n \nPrivate CancelUpload As Boolean     \'BU cancelled dup upload \n \n\'############################ \n \n#If UsePPS = 2 Then \nSub TestPPS() \n    If Not IsMasterPassword() Then Exit Sub \n \n    BusyOn \n \n    StatClear \n \n    If ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = "" Then \n        ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value = CDate(Format(Date, "dd/mm/yyyy"))  \'set \nRUNDATE if not set \n    End If \n \n    If BulkUploadBOI() Then \n        Debug.Print "All good! " & Time \n    Else \n        Debug.Print "Not successful!" & Time \n    End If \n \n    BusyOff \nEnd Sub \n#End If \n \n\'############################ \n \nPublic Function BulkUploadBOI() As Boolean \n    Dim FileName As String, CaseName As String \n    Dim CheckFlag As Boolean \n \n    BulkUploadBOI = False \n \n    CheckFlag = CheckBOI() \n    StatMsg CheckFlag, SheetBOI & " Check all YES?" \n    If Not CheckFlag Then Exit Function \n \n    If Not WriteBOIToCSV(FileName) Then Exit Function \n \n    ResetEdge \n \n    CloseEdgeByURL CloseURL_PPS \n \n    If PPSLogin() Then \n        If PPSBulkUpload(FileName, CaseName) Then \n            PPSLogout \n \n            If Not CancelUpload Then \n                \'MsgBox2 "Case " & CaseName & " will be Ready for Review in PPS shortly.", vbOKOnly + \nvbInformation, "Bulk Upload Success" \n                WriteLog "MsgBox: Case " & CaseName & " will be Ready for Review in PPS shortly." \n            End If \n            BulkUploadBOI = True \n        Else \n            CloseEdgeByURL CloseURL_PPS     \'something went wrong \n        End If \n    End If \n \n    Kill ThisWorkbook.Path & "\\" & FileName   \'remove the .CSV bulk upload \nEnd Function \n \nPrivate Function PPSOpen() \n    Dim TargetURL As String \n \n    PPSOpen = False'},
 {'page': 119,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 119 of 214 \n \n\u202f \n \n    SiteNameEdge = "Pega Platform" \n    TargetURL = OpenURL_PPS  \'PPS webpage \n \n    If Not GetNewEdge("Starting Edge", TargetURL) Then Exit Function \n    If Not LoadPageEdge("", TargetURL, CloseURL_PPS) Then Exit Function   \'look for the close URL which \nshould be your dashboard \n \n    PPSOpen = True \nEnd Function \n \nPrivate Function PPSLogin() As Boolean \n    PPSLogin = False \n \n    If Not EdgeConnected(False) Then \n        If Not PPSOpen() Then \n            ErrBox "Unable to find PPS SSO!", "Edge" \n            Exit Function \n        End If \n    End If \n \n    If FindErrMsgEdge("", "disable compatibility mode by accessing") Then             \'check for common \nerror \n        ErrBox "Compatibility mode for IE is not supported!" & vbLf & vbLf & "Please switch off \nCompatibilty mode in IE to continue...", SiteNameEdge \n        CloseEdge "Closing Edge" \n        Exit Function \n    ElseIf FindErrMsgEdge("", "You are using an unsupported browser.") Then \n        ErrBox "You are using an unsupported Browser!" & vbLf & vbLf & "Please contact PS \nTransformation@cba.com.au to continue...", "PPS SSO" \n        CloseEdge "Closing Edge" \n    ElseIf FindErrMsgEdge("", "Unable to process the SAML WebSSO request") Then \n        ErrBox "You do not have access to PPS SSO!" & vbLf & vbLf & "Please contact PS \nTransformation@cba.com.au to continue...", "PPS SSO" \n        CloseEdge "Closing Edge" \n        Exit Function \n    ElseIf FindErrMsgEdge("", "Unauthenticated or not available") Then \n        ErrBox "You do not have access to PPS SSO!" & vbLf & vbLf & "Please contact PS \nTransformation@cba.com.au to continue...", "PPS SSO" \n        CloseEdge "Closing Edge" \n        Exit Function \n    End If \n \n    If Not FindTextInBodyEdge("", "Your dashboard") Then \n        If IsDemo() Then \n\'            If Not EnterInputByNameIE("Entering Username", "UserIdentifier", "00197352", True) Then   \'BU \n\'                ErrBox "Unable to find login page!", SiteNameEdge \n\'                CloseEdge "Closing Edge" \n\'                Exit Function \n\'            End If \n \n            If Not EnterInputByNameEdge("|Entering Username", "UserIdentifier", "00153681", True) Then   \n\'SA \n                ErrBox "Unable to find login page!", SiteNameEdge \n                CloseEdge "Closing Edge" \n                Exit Function \n            End If \n            EnterInputByNameEdge "|Entering Password", "Password", "pega1234", True \n \n            ClickButtonByInnerTextEdge "|Pressing Log in button", "Log in" \n \n            If FindErrMsgEdge("", "The information you entered was not recognized.") Then             \n\'check for common error \n                ErrBox "Incorrect Username or Password!", SiteNameEdge \n                CloseEdge "Closing Edge" \n                Exit Function \n            End If \n \n            If WaitUntilTextInBodyEdge("", "Your dashboard") Then \n                PPSLogin = True     \'logged in PPS site \n            End If \n        Else \n            ErrBox "Unable to find your Dashboard!" & vbLf & vbLf & "Please try again to continue...", \n"Dashboard" \n        End If \n    Else \n        PPSLogin = True         \'auto login into prod PPS site'},
 {'page': 120,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 120 of 214 \n \n\u202f \n    End If \nEnd Function \n \nPrivate Function DupCheck(CaseTable() As String, NumPay As Long, Amt As String, DefRet As Long) As Long \n    Dim i As Long \n \n    \'PrintArr CaseTable \n \n    DupCheck = DefRet \n \n    For i = 0 To UBound(CaseTable, 2) \n        If Left(CaseTable(2, i), 11) = Format(Date, "dd-mmm-yyyy") And CaseTable(3, i) = "Bulk Upload" And \nCaseTable(4, i) = CStr(NumPay) And CaseTable(5, i) = Amt Then \n            DupCheck = MsgBox2("Case " & CaseTable(1, i) & ", in your dashboard, may be a duplicate of \ntoday\'s bulk upload!" & vbLf & vbLf & "Do you want to continue with today\'s bulk upload?" & vbLf & vbLf & \n"Press ""Yes"" to upload, ""No"" to skip the upload and ""Cancel"" to stop running.", vbQuestion + \nvbYesNoCancel, "PPS Duplicate") \n            Exit For \n        End If \n \n        StatPlus \n    Next i \nEnd Function \n \nPrivate Function PPSCheckDuplicate() As Long \n    Dim NumPay As Long, Ret As Long \n    Dim CaseTable() As String, Amt As String \n \n    PPSCheckDuplicate = vbOK \n \n    NumPay = LastRowInCol(SheetBOI, "A") - 2 \n    Amt = Format(ThisWorkbook.Worksheets(SheetBOI).Range("Q4").Value / 100, "$#,##0.00") \n \n    If GetTableByHeadingsEdge("|Retrived your cases?", ",Case ID,Created on,Payment type,No of \npayments,Payment amount,Rejected item,Reason,Payment status", CaseTable) Then \n        PPSCheckDuplicate = DupCheck(CaseTable, NumPay, Amt, PPSCheckDuplicate) \n \n        If PPSCheckDuplicate = vbYes Then \n            Exit Function   \'BU selected Yes to upload file \n        End If \n    End If \n \n    While FindTextInBodyEdge("", ">Next<") \n        If Not ClickLinkByInnerTextEdge("|Clicking Next button", "Link") Then \n            ErrBox "Failed to click Next button!", "Button" \n            PPSCheckDuplicate = vbCancel \n            Exit Function \n        End If \n \n        If GetTableByHeadingsEdge("|Retrived your cases?", ",Case ID,Created on,Payment type,No of \npayments,Payment amount,Rejected item,Reason,Payment status", CaseTable) Then \n            PPSCheckDuplicate = DupCheck(CaseTable, NumPay, Amt, PPSCheckDuplicate) \n \n            If PPSCheckDuplicate = vbYes Then \n                Exit Function   \'BU selected Yes to upload file \n            End If \n        End If \n    Wend \nEnd Function \n \nPrivate Function PPSBulkUpload(FileName As String, ByRef CaseName As String) As Boolean \n    Dim Count As Long \n    Dim InnerText As String \n    Dim IsPopup As Boolean \n \n    PPSBulkUpload = False \n    CancelUpload = False \n \n    Select Case PPSCheckDuplicate() \n        Case vbCancel: \n            CancelUpload = True \n            Exit Function           \'fail and stop \n        Case vbYes, vbOK: \n                                    \'continue \n        Case vbNo: \n            CancelUpload = True \n            PPSBulkUpload = True    \'skip the upload'},
 {'page': 121,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 121 of 214 \n \n\u202f \n            Exit Function \n    End Select \n \n    If HaveButtonByInnerTextEdge("Standard") Then \n        If ClickButtonByNameEdge("|Pressing Down-Caret button", "DashboardHeader_pyDisplayHarness_55") \nThen \n            ClickLinkByInnerTextEdge "|Selecting Bulk Upload option", "Bulk Upload" \n        Else \n            StatReset   \'reset error generated by missing Down-Caret button \n            ClickButtonByNameEdge "|Pressing Standard + button", "DashboardHeader_pyDisplayHarness_38"    \n\'Standard + button \n        End If \n    Else \n        ClickButtonByInnerTextEdge "|Pressing Bulk Upload button", "Bulk Upload" \n    End If \n \n    If IsStatsError() Then                                              \'check we have displayed the bulk \nupload form \n        ErrBox "Failed to open the Bulk Upload popup!", SiteNameEdge \n        PPSLogout \n        Exit Function \n    End If \n \n    IsPopup = True \n    If FindTextInBodyEdge("", "Attach one Bulk upload file to the case (required)") Then \n        IsPopup = False \n    End If \n \n    If IsPopup Then     \'capture payment opens in new window \n        If Not FindEdgeByURL(FindURL_PopupPPS) Then \n            ErrBox "Failed to find the Bulk Upload window!", SiteNameEdge \n            PPSLogout \n            Exit Function \n        End If \n    End If \n \n    If Not EnterInputByNameEdge("|Entering File Path", "$PpyWorkPage$pFilePathURL", GetDailyFilePath(), \nTrue) Then  \'must do this first \n        ErrBox "Failed to enter file path!", "Input" \n        GoTo Skip \n    End If \n \n    Count = 0 \nAgain: \n    \'press the browse button to select the .csv file \n    If Not SetInputByFileEdge("|Pressing Browse button", FileName, True) Then \n        ErrBox "Failed to press the Browse button!", "Button" \n        GoTo Skip \n    End If \n \n    If WaitUntilTextInBodyEdge("", FileName & "</span>", 15) Then \n \n        \'select classification \n        If Not SelectOptionByNameEdge("|Selecting Payment Classification", \n"$PpyWorkPage$pPaymentClassificationValue", PaymentClass, True) Then \n            ErrBox "Failed to select the Payment Classification option!", "Menu Option" \n            GoTo Skip \n        End If \n \n        \'Add the reference document \n        If Not ClickLinkByInnerTextEdge("|Clicking Document Reference link", "Document Reference (0)") \nThen \n            ErrBox "Failed to click on the Document Reference link!", "Link" \n            GoTo Skip \n        End If \n \n        WaitUntilTextInBodyEdge "", "Document Reference</div>", 15 \n \n        If Not EnterInputByNameEdge("|Entering Title", "$PpyWorkPage$ppyTitle", GetDailyFilePath(), True) \nThen \n            ErrBox "Failed to input Document Tilte!", "Input" \n            GoTo Skip \n        End If \n \n        If Not EnterInputByNameEdge("|Entering Path", "$PpyWorkPage$pDocumentReferenceLink", \nGetDailyFilePath(), True) Then \n            ErrBox "Failed to input Document Path!", "Input"'},
 {'page': 122,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 122 of 214 \n \n\u202f \n            GoTo Skip \n        End If \n \n        If Not ClickButtonByNameEdge("|Clicking Add button", "DocumentReference_pyWorkPage_75") Then \n            ErrBox "Failed to press the Add button!", "Button" \n            GoTo Skip \n        End If \n \n        If Not ClickButtonByNameEdge("|Pressing Save button", "DocumentModalTemplate_pyWorkPage_7") Then \n            ErrBox "Failed to press the Save button!", "Button" \n            GoTo Skip \n        End If \n \n        \'submit the case \n        If Not ClickButtonByNameEdge("|Pressing Submit button", "pyCaseActionAreaButtons_pyWorkPage_33") \nThen       \'submit the .csv file \n            ErrBox "Failed to press the Submit button!", "Button" \n            GoTo Skip \n        End If \n \n        If WaitUntilTextInBodyEdge("", "Return to dashboard", 60) Then \n            If GetDivByInnerTextEdge("successfully", InnerText) Then \n                Dim Pos1 As Long, Pos2 As Long \n \n                CaseName = "Unknown" \n                Pos1 = InStr(1, InnerText, "Case ") \n                If Pos1 > 0 Then \n                    Pos1 = Pos1 + 5 \n                    Pos2 = InStr(Pos1, InnerText, " ") \n                    If Pos2 > 0 Then \n                        CaseName = Mid(InnerText, Pos1, Pos2 - Pos1) \n                    End If \n                End If \n \n                WriteLog "Submitted: Case " & CaseName \n                ThisWorkbook.Worksheets("HOME").Range("PPS_BID").Value = CaseName \n                StatMsg True, "|Case " & CaseName & " submitted?" \n \n                PPSBulkUpload = True \n            Else \n                StatMsg False, "|Case submitted?" \n                ErrBox "Case success message not found!", "Success Message" \n                \'fall out \n            End If \n        Else \n            ErrBox "Time out waiting for Submission!", "Submit" \n            \'fall out \n        End If \n    Else \n        If FindErrMsgEdge("", "The file name " & FileName & " was identified to be a duplicate. Please \nupload a new file.") Then \n            Debug.Print "Duplicate file!" \n            ErrBox "The file name " & FileName & " was identified to be a duplicate!" & vbLf & vbLf & \n"Please upload a new file...", "Duplicate File Name" \n            \'fall out \n        Else \n            Debug.Print "did not find remove!! " & Time \n            Count = Count + 1 \n            If Count <= 3 Then GoTo Again \n \n            Debug.Print "Not good!! " & Time \n            ErrBox "Failed to upload " & FileName & " to PPS!" & vbLf & vbLf & "The server may be busy. \nPlease try again in 15 minutes...", "Upload File" \n            \'fall out \n        End If \n    End If \n \nSkip: \n    If IsPopup Then \n        If Not FindEdgeByURL(FindURL_DashPPS) Then   \'go back to Your Dashboard \n            ErrBox "Unable to find Your Dashboard!", SiteNameEdge \n            PPSLogout \n            Exit Function \n        End If \n    End If \nEnd Function'},
 {'page': 123,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 123 of 214 \n \n\u202f \nPrivate Function PPSLogout() As Boolean \n    PPSLogout = False \n \n    If FindTextInBodyEdge("", "Your dashboard") Then \n        ClickLinkByInnerTextEdge "|Clicking Log out", "Log out" \n    End If \n \n    CloseEdge "Closing Edge" \n \n    CloseEdgeByURL CloseURL_PPS     \'close any left over windows \n \n    PPSLogout = True \n \n    StatReset    \'keep going \nEnd Function \n \nPrivate Function WriteBOIToCSV(ByRef FileName As String) As Boolean \n    Dim objFSO As New Scripting.FileSystemObject \n    Dim CSVFile As TextStream \n    Dim Row As Long, Col As Long, i As Long \n    Dim Line As String \n \n    WriteBOIToCSV = False \n \n    FileName = GetPPSFilePath(".csv") \n \n    Set CSVFile = objFSO.CreateTextFile(ThisWorkbook.Path & "\\" & FileName, True) \n \n    Row = 1 \n    With ThisWorkbook.Worksheets(SheetBOI) \n        While Not IsEmpty(.Range("A" & Row)) \n            Line = "" \n            For i = ColNumber("A") To ColNumber("O") \n                If Line <> "" Then \n                    Line = Line & "," \n                End If \n                Line = Line & .Range(ColLetter(i) & Row).Value \n \n                StatPlus \n            Next i \n \n            CSVFile.WriteLine Line \n \n            Row = Row + 1 \n        Wend \n \n        Line = "" & vbCrLf & _ \n               ",,,,,,,,,,,,,,,,Balancing - System Use only" & vbCrLf & _ \n               ",,,,,,,,,,,,,,,," & vbCrLf & _ \n               ",,,,,,,,,,,,,,,,Total DR,Total CR,Difference should be ""0""" & vbCrLf & _ \n               ",,,,,,,,,,,,,,,," & .Range("Q4").Value & "," & .Range("R4").Value & "," & \n.Range("S4").Value & "" \n \n        CSVFile.WriteLine Line \n    End With \n \n    CSVFile.Close \n    Set CSVFile = Nothing \n \n    WriteBOIToCSV = True \nEnd Function \n \nPublic Sub CreateCSV() \n    Dim FileName As String \n    Dim Done As Boolean \n \n    If Not IsMasterPassword() Then Exit Sub \n \n    BusyOn \n \n    StatClear \n \n    Done = False \n    StatZero "Creating CSV file" \n    StatPlus \n \n    If Not SheetExists(SheetBOI) Then'},
 {'page': 124,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 124 of 214 \n \n\u202f \n        ErrBox SheetBOI & " is missing!", SheetBOI \n    Else \n        Done = WriteBOIToCSV(FileName) \n \n        If Not Done Then \n            ErrBox "Unable to create .CSV file!", "File" \n        End If \n    End If \n \n    StatMsg Done, "Creating CSV file" \n    BusyOff \nEnd Sub \n \n\'@1.37 Module - Lib_Password \n \n\'---------------------------------------------------------------------- \n\' \n\'      Password related subroutines and functions \n\' \n\' Dependencies include: \n\'   1. Modules: Lib_Messages, Lib_Staff, Lib_Email \n\'   2. Forms: PasswordForm, PasswdChgForm \n\'   3. Cells: Hash, Hash2, Hash3, Hash4, Expiry, Access2, UserName and FullName on HOME sheet \n\' \n\' Last Update: 15/02/2021 \n\'---------------------------------------------------------------------- \n \nOption Explicit \n \n\'used by PasswordForm \nPublic InputPassword As String \nPublic PasswordPrompt As String \nPublic PasswordTitle As String \nPublic PasswordCancel As Boolean \n \nPublic Const Have_BOI As Boolean = True   \'have BOI password \nPublic Const Have_Adj As Boolean = False   \'have Adjustment password \n \n\'used by PasswdChgForm \nPublic PasswordChange1 As String    \'changed passwords \nPublic PasswordChange2 As String \nPublic PasswordChange3 As String \nPublic PasswordChange4 As String \nPublic PasswordExpiry As Date \n \nPublic Const Hash_BU As String = "Hash"         \'business user hash \nPublic Const Hash_MU As String = "Hash2"        \'manager user hash \nPublic Const Hash_BOI As String = "Hash3"       \'BOI user hash \nPublic Const Hash_ADJ As String = "Hash4"       \'adjustment user hash \n \nPublic Const MasterPwd As String = "jdGtlXdX"   \'master password \n \n\'--------------------------------------------------------------- \n\' Do *NOT* forget to set the same password for the VBA code!! \n\' \n\' Go to Tool -> VBAProject Properties, then click on the \n\' Protection tab and set the password. \n\'--------------------------------------------------------------- \n \nPrivate Function InputPasswordBox(Prompt, title) As String \n    PasswordPrompt = Prompt \n    PasswordTitle = title \n    PasswordCancel = False \n \n    PasswordForm.Show  \'password dialog \n \n    If InputPassword <> "" Then \n        InputPasswordBox = BASE64SHA1(InputPassword) \n    End If \nEnd Function \n \nPublic Function IsMasterPassword() As Boolean \n    IsMasterPassword = (BASE64SHA1(InputPassword) = MasterPwd) \nEnd Function \n \nPublic Function IsBusinessPassword() As Boolean \n    IsBusinessPassword = (BASE64SHA1(InputPassword) = GetHash(Hash_BU))'},
 {'page': 125,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 125 of 214 \n \n\u202f \nEnd Function \n \nPublic Function IsManagerPassword() As Boolean \n    IsManagerPassword = (BASE64SHA1(InputPassword) = GetHash(Hash_MU)) \nEnd Function \n \nPublic Function IsExpiredPassword() \n    IsExpiredPassword = (Date > ThisWorkbook.Worksheets("HOME").Range("Expiry").Value And Not \nIsMasterPassword()) \nEnd Function \n \nPublic Function FailPasswordWithLock() As Boolean \n    Dim pwd1 As String \n \n    If IsLockout() Then \n        ErrBox "To many failed password attempts!" & vbLf & vbLf & "Please wait until " & \nFormat(DateAdd("n", 61, LockoutLast), "hh:nnam/pm") & " before trying again...", "Password" \n        FailPasswordWithLock = True \n        Exit Function \n    End If \n \n    With ThisWorkbook.Worksheets("HOME") \n        pwd1 = InputPasswordBox("Please enter the password:", "Password Required") \n        If pwd1 <> GetHash(Hash_BU) And pwd1 <> GetHash(Hash_MU) And pwd1 <> MasterPwd Then \n            If PasswordCancel = False Then \n                ErrBox "The password is incorrect!", "Password" \n                IncLockout \n            End If \n            FailPasswordWithLock = True     \'exit sub \n        Else \n            If Date > .Range("Expiry").Value And pwd1 <> MasterPwd Then \n                ErrBox "This password has expired!" & vbLf & vbLf & "To obtain a new password email PS \nTransformation@cba.com.au", "Password" \n                FailPasswordWithLock = True     \'exit sub \n                IncLockout \n \n            ElseIf .Range("FullName").Value = "UNAUTHORISED" And pwd1 <> MasterPwd Then \n                ErrBox "User " & .Range("UserName").Value & " is not authorised to Edit any reports!" & \nvbLf & vbLf & "Press OK to continue with Read Only access...", "Access" \n                FailPasswordWithLock = True     \'exit sub \n                IncLockout \n \n            ElseIf Not CheckAccess(pwd1) Then \n                ErrBox "User " & .Range("UserName").Value & " is not authorised to use this password!", \n"Access" \n                FailPasswordWithLock = True     \'exit sub \n                IncLockout \n \n            Else \n                If Date > DateAdd("d", -5, .Range("Expiry").Value) And pwd1 <> MasterPwd Then \n                    WarnBox "This password will expire in " & DateDiff("d", Date, .Range("Expiry").Value) \n& " day(s)!" & vbLf & vbLf & "To obtain a new password email PS Transformation@cba.com.au", "Password" \n                End If \n \n                FailPasswordWithLock = False    \'continue \n                InitLockout \n            End If \n        End If \n    End With \nEnd Function \n \nPublic Function FailPassword() As Boolean \n    Dim pwd1 As String \n \n    With ThisWorkbook.Worksheets("HOME") \n        pwd1 = InputPasswordBox("Please enter the password:", "Password Required") \n        If pwd1 <> GetHash(Hash_BU) And pwd1 <> GetHash(Hash_MU) And pwd1 <> MasterPwd Then \n            If PasswordCancel = False Then \n                ErrBox "The password is incorrect!", "Password" \n            End If \n            FailPassword = True     \'exit sub \n        Else \n            If Date > .Range("Expiry").Value And pwd1 <> MasterPwd Then \n                ErrBox "This password has expired!" & vbLf & vbLf & "To obtain a new password email PS \nTransformation@cba.com.au", "Password" \n                FailPassword = True     \'exit sub'},
 {'page': 126,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 126 of 214 \n \n\u202f \n            ElseIf .Range("FullName").Value = "UNAUTHORISED" And pwd1 <> MasterPwd Then \n                ErrBox "User " & .Range("UserName").Value & " is not authorised to Edit any reports!" & \nvbLf & vbLf & "Press OK to continue with Read Only access...", "Access" \n                FailPassword = True     \'exit sub \n \n            ElseIf Not CheckAccess(pwd1) Then \n                ErrBox "User " & .Range("UserName").Value & " is not authorised to use this password!", \n"Access" \n                FailPassword = True     \'exit sub \n \n            Else \n                If Date > DateAdd("d", -5, .Range("Expiry").Value) And pwd1 <> MasterPwd Then \n                    WarnBox "This password will expire in " & DateDiff("d", Date, .Range("Expiry").Value) \n& " day(s)!" & vbLf & vbLf & "To obtain a new password email PS Transformation@cba.com.au", "Password" \n                End If \n \n                FailPassword = False    \'continue \n            End If \n        End If \n    End With \nEnd Function \n \nPrivate Function CheckAccess(pwd As String) As Boolean \n    With ThisWorkbook.Worksheets("HOME") \n        CheckAccess = False \n \n        If pwd = MasterPwd Then \n            CheckAccess = True \n            .Range("Access2").Value = "ADMIN" \n        ElseIf pwd = GetHash(Hash_BU) And (.Range("Access").Value = "USER" Or .Range("Access").Value = \n"ADMIN") Then \n            CheckAccess = True \n            .Range("Access2").Value = "USER" \n        ElseIf pwd = GetHash(Hash_MU) And (.Range("Access").Value = "MAN" Or .Range("Access").Value = \n"ADMIN") Then \n            CheckAccess = True \n            .Range("Access2").Value = "MAN" \n        End If \n    End With \nEnd Function \n \nPrivate Function LockoutCount(Optional Value As Long = -1) As Long \n    If Value <> -1 Then \n        SaveSetting GetToolName(), "Password", "LockoutCount", Value \n    End If \n \n    LockoutCount = GetSetting(GetToolName(), "Password", "LockoutCount", 0) \nEnd Function \n \nPrivate Function LockoutLast(Optional DateValue As Date = #12/31/9999#) As Date \n    If DateValue <> #12/31/9999# Then \n        SaveSetting GetToolName(), "Password", "LockoutLast", DateValue \n    End If \n \n    LockoutLast = GetSetting(GetToolName(), "Password", "LockoutLast", DateAdd("h", -2, Now)) \nEnd Function \n \nPrivate Sub InitLockout() \n    On Error Resume Next \n    DeleteSetting GetToolName(), "Password", "LockoutCount" \n    DeleteSetting GetToolName(), "Password", "LockoutLast" \n    On Error GoTo 0 \nEnd Sub \n \nPrivate Sub IncLockout() \n    Dim Secs As Long \n \n    Secs = DateDiff("s", LockoutLast, Now) \n \n    If Secs > 3600 Then     \'been over 1 hour since last password fail \n        LockoutLast Now \n        LockoutCount 1 \n    Else \n        LockoutCount LockoutCount + 1     \'next failed attempt \n    End If \nEnd Sub'},
 {'page': 127,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 127 of 214 \n \n\u202f \nPrivate Function IsLockout() As Boolean \n    Dim Secs As Long \n \n    Secs = DateDiff("s", LockoutLast, Now) \n \n    IsLockout = (LockoutCount >= 5 And Secs <= 3600) \nEnd Function \n \nPublic Sub ResetLockout() \n    If FailPassword() Then \n        Exit Sub \n    End If \n \n    If Not IsMasterPassword() Then \n        ErrBox "The Administrator Password is required to change the Business User and Manager \nPasswords!", "Change Password" \n        Exit Sub \n    End If \n \n    InitLockout     \'reset the lockout \nEnd Sub \n \n\'Sub ResetAllHashs() \n\'    ThisWorkbook.Worksheets("HOME").Range(Hash_BU).Value = BASE64SHA1("test") \n\'    ThisWorkbook.Worksheets("HOME").Range(Hash_MU).Value = BASE64SHA1("test") \n\' \n\'    ThisWorkbook.Worksheets("HOME").Range(Hash_BOI).Value = EncodeBase64(StrToBytes(XorEnc("test"))) \n\'    ThisWorkbook.Worksheets("HOME").Range(Hash_ADJ).Value = EncodeBase64(StrToBytes(XorEnc("test"))) \n\'End Sub \n \nPublic Function GetHash(Rng As String) As String \n    Dim HashArr() As String \n \n    HashArr() = Split(ThisWorkbook.Worksheets("HOME").Range(Rng).Value, ",") \n \n    GetHash = HashArr(0)    \'return first hash \n    If Rng = Hash_BOI Or Rng = Hash_ADJ Then \n        GetHash = BytesToStr(DecodeBase64(GetHash)) \n        If Left(GetHash, 2) = "\'\'" Then                 \'remove a signal quote \n            GetHash = Mid(GetHash, 2) \n        End If \n        GetHash = XorDec(GetHash)                       \'decrypt password \n    End If \nEnd Function \n \nPublic Sub SetHash(Rng As String, Value As String) \n    Dim HashArr() As String, HashStr As String \n    Dim i As Long, UBnd As Long \n \n    HashArr() = Split(Value & "," & ThisWorkbook.Worksheets("HOME").Range(Rng).Value, ",") \n \n    HashStr = "" \n    UBnd = UBound(HashArr) \n    If UBnd > 14 Then \n        UBnd = 14 \n    End If \n \n    For i = 0 To UBnd     \'only last 15 hashs \n        If HashStr <> "" Then \n            HashStr = HashStr & "," \n        End If \n        HashStr = HashStr & HashArr(i) \n \n        StatPlus \n    Next i \n \n    ThisWorkbook.Worksheets("HOME").Range(Rng).Value = HashStr \nEnd Sub \n \nPublic Function FindHash(Rng As String, ByVal Value As String) As Boolean \n    FindHash = (InStr(1, ThisWorkbook.Worksheets("HOME").Range(Rng).Value, Value) > 0) \nEnd Function \n \nPublic Sub ChangePassword() \n    Dim Text As String \n \n    If FailPassword() Then'},
 {'page': 128,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 128 of 214 \n \n\u202f \n        Exit Sub \n    End If \n \n    If Not IsMasterPassword() Then \n        ErrBox "The Administrator Password is required to change the Business User and Manager \nPasswords!", "Change Password" \n        Exit Sub \n    End If \n \n    PasswdChgForm.Show \n \n    If PasswordCancel = True Then Exit Sub \n \n    SetHash Hash_BU, BASE64SHA1(PasswordChange1) \n    SetHash Hash_MU, BASE64SHA1(PasswordChange2) \n \n    If Have_BOI Then SetHash Hash_BOI, EncodeBase64(StrToBytes(XorEnc(PasswordChange3))) \n    If Have_Adj Then SetHash Hash_ADJ, EncodeBase64(StrToBytes(XorEnc(PasswordChange4))) \n \n    ThisWorkbook.Worksheets("HOME").Range("Expiry").Value = DateValue(PasswordExpiry) \nEnd Sub \n \n\'Public Sub test() \n\'    PasswordChange1 = "RELBU20a" \n\'    PasswordChange2 = "RELMU20v" \n\'    PasswordChange3 = "BOIMU20a" \n\'    PasswordChange4 = "ADJMU20v" \n\'    PasswordExpiry = DateAdd("m", 6, Date) \n\' \n\'    PasswordEmails \n\' \n\'    Debug.Print "Hash BU: " & ThisWorkbook.Worksheets("HOME").Range(Hash_BU).Value \n\'    Debug.Print "Hash MU: " & ThisWorkbook.Worksheets("HOME").Range(Hash_MU).Value \n\'    Debug.Print "Hash BOI: " & ThisWorkbook.Worksheets("HOME").Range(Hash_BOI).Value \n\'    Debug.Print "Hash ADJ: " & ThisWorkbook.Worksheets("HOME").Range(Hash_ADJ).Value \n\'End Sub \n \n\' \n\' Copy Lib_Staff and Lib_Password modules to new tool and import PasswdChgForm into new tool \n\' \n\' Remember to update: \n\'   1. the SendToEmail() in Lib_Email to not delete the attachment! \n\'   2. the OK_Click() in PasswdChgForm to call PasswordEmails() \n\' \n\' some functions need to be changed from private to public, complie to find these functions \n\' \n \nPublic Function PasswordEmails(Optional Dummy As Boolean) As Boolean \n    Dim EmailTo As String, CC As String, Subject As String, Body As String, Sig As String, Tool As String, \nCRPath As String \n    Dim ManEmail As String, POREmail As String, PassHtml As String, WordPass As String \n    Dim Outlook As Object \n    Dim Flag As Boolean \n \n    On Error Resume Next \n    Set Outlook = CreateObject("Outlook.Application") \n    Outlook.ActiveWindow.WindowState = 1 \n    On Error GoTo 0 \n \n    If Outlook Is Nothing Then \n        ErrBox "Failed to start OutLook!", "OutLook" \n        Exit Function \n    End If \n \n    Sig = GetSignature() \n \n    Tool = GetToolName() \n    CRPath = "I:\\Business & Change Enablement\\Transformation Manager\\Supported Technology\\_Change \nRequests\\Change Request - Template.xlsx" \n    ManEmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_MAN").Value \n    POREmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_POR").Value \n    PassHtml = PasswordsToHTML() \n    WordPass = "Password" \n    If PassHtml <> "" Then \n        WordPass = "passwords" \n    End If'},
 {'page': 129,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 129 of 214 \n \n\u202f \n    EmailTo = ManEmail \n    CC = POREmail & ";PS_transformation@cba.com.au" \n    Subject = "New MU Password for " & Tool \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Manager Users,<br><br>" & _ \n           "The new Manager User password for the " & Tool & " will be <b>" & PasswordChange2 & "</b> and \nwill expire next on the " & Format(PasswordExpiry, "d/m/yyyy") & ".<br><br>" & _ \n           PassHtml & _ \n           "<u><b>Action Required</b></u><br><br>" & _ \n           "<li>Please commence using the " & WordPass & " for the " & Tool & " from " & \nFormat(Application.WorkDay(Now, 1), "dddd d/m/yyyy") & ".<br><br>" & _ \n           "Should you have any questions, please contact the <a \nhref=""mailto:PS_Transformation@cba.com.au"">PS_Transformation@cba.com.au</a> mailbox.<br><br>" & _ \n           "Regards, PSU Transformation Team<br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    PasswordEmails = SendToEmail(Outlook, EmailTo, CC, Subject, Body, "", "PS_transformation@cba.com.au") \n    If Not PasswordEmails Then Exit Function \n \n    EmailTo = ManEmail \n    CC = POREmail & ";PS_transformation@cba.com.au" \n    Subject = "User Access Review (UAR) - " & Tool \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Manager/Delegates,<br><br>" & _ \n           "User access reviews (UAR) are required to be completed on a 6 monthly cycle for the " & Tool & \n".<br><br>" & _ \n           "<u><b>Action Required</b></u><br><br>" & _ \n           "<ol start=1><li>Please review the following User Access List and Email Distribution Lists for \nthe " & Tool & ":</ol>" & _ \n           "<blockquote>" & StaffListToHTML() & "<br>" & _ \n           "Manager: " & EmailListHtml(ManEmail) & "<br>" & _ \n           "Delegate: " & EmailListHtml(POREmail) & "</blockquote>" & _ \n           "<ol start=2><li>If team members no longer require access to the  " & Tool & ", please complete \nthe attached Change Request Template and return it to the <a \nhref=""mailto:PS_Transformation@cba.com.au"">PS_Transformation@cba.com.au</a> mailbox.</li></ol>" & _ \n           "<ol start=3><li>If no changes are required - please send a return email to the <a \nhref=""mailto:PS_Transformation@cba.com.au"">PS_Transformation@cba.com.au</a> mailbox advising \'UAR has \nbeen completed - No changes are required\'.</ol>" & _ \n           "Should you have any questions, please contact the <a \nhref=""mailto:PS_Transformation@cba.com.au"">PS_Transformation@cba.com.au</a> mailbox.</li><br><br>" & _ \n           "Regards, PSU Transformation Team<br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    PasswordEmails = SendToEmail(Outlook, EmailTo, CC, Subject, Body, CRPath, \n"PS_transformation@cba.com.au") \n    If Not PasswordEmails Then Exit Function \n \n    EmailTo = BUEmailList \n    CC = "PS_transformation@cba.com.au" \n    Subject = "New BU Password for " & Tool \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Team,<br><br>" & _ \n           "The new Business User password for the " & Tool & " will be <b>" & PasswordChange1 & "</b> and \nwill expire next on the " & Format(PasswordExpiry, "d/m/yyyy") & ".<br><br>" & _ \n           "<u><b>Action Required</b></u><br><br>" & _ \n           "<li>Please commence using the password for the " & Tool & " from " & \nFormat(Application.WorkDay(Now, 1), "dddd d/m/yyyy") & ".<br><br>" & _ \n           "Should you have any questions, please contact the <a \nhref=""mailto:PS_Transformation@cba.com.au"">PS_Transformation@cba.com.au</a> mailbox.<br><br>" & _ \n           "Regards, PSU Transformation Team<br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    PasswordEmails = SendToEmail(Outlook, EmailTo, CC, Subject, Body, "", "PS_transformation@cba.com.au") \n    If Not PasswordEmails Then Exit Function \n \n    Set Outlook = Nothing \nEnd Function \n \nPublic Function PasswordsToHTML() As String \n    Dim Row As Long, Count As Long \n    Dim Header As String, Body As String, Tail As String, BgColor As String, WordPass As String'},
 {'page': 130,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 130 of 214 \n \n\u202f \n \n    PasswordsToHTML = "" \n    If Not Have_BOI And Not Have_Adj Then Exit Function \n \n    Body = "" \n    BgColor = "" \n    Count = 1 \n    WordPass = "password" \n \n    If Have_BOI Then \n        Body = Body & "<tr>" & vbLf & _ \n            "<td align=""center""" & BgColor & ">" & Count & ".</td>" & vbLf & _ \n            "<td align=""left""" & BgColor & ">PPS Upload</td>" & vbLf & _ \n            "<td align=""center""" & BgColor & ">" & PasswordChange3 & "</td>" & vbLf & _ \n            "</tr>" & vbLf \n \n            Count = Count + 1 \n    End If \n \n    If Have_Adj Then \n        Body = Body & "<tr>" & vbLf & _ \n            "<td align=""center""" & BgColor & ">" & Count & ".</td>" & vbLf & _ \n            "<td align=""left""" & BgColor & ">Adjustment</td>" & vbLf & _ \n            "<td align=""center""" & BgColor & ">" & PasswordChange4 & "</td>" & vbLf & _ \n            "</tr>" & vbLf \n \n            Count = Count + 1 \n    End If \n \n    If Count = 3 Then \n        WordPass = "passwords" \n    End If \n \n    Header = "The new email attachment " & WordPass & " are as follows:<br><br>" & vbLf & _ \n        "<style>" & vbLf & _ \n        "table, th, td {border: 1px solid black; border-collapse:collapse; padding-left: 10px; padding-\nright: 10px; font-family: Calibri, Verdana; font-size:10pt;}" & vbLf & _ \n        "</style>" & vbLf & _ \n        "<blockquote><table>" & vbLf & _ \n        "<tr>" & vbLf & _ \n        "<th align=""center"" bgcolor=""#DADBDC""><b>#</b></th>" & vbLf & _ \n        "<th align=""center"" bgcolor=""#DADBDC""><b>Attachment</b></th>" & vbLf & _ \n        "<th align=""center"" bgcolor=""#DADBDC""><b>New Password</b></th>" & vbLf & _ \n        "</tr>" & vbLf \n \n    Tail = "</table></blockquote><br>" & vbLf \n \n    PasswordsToHTML = Header & Body & Tail \nEnd Function \n \nPrivate Function EscapeHtml(Text As String) As String \n    EscapeHtml = Text \n \n    EscapeHtml = Replace(EscapeHtml, "&", "&amp;")  \'must do & first \n    EscapeHtml = Replace(EscapeHtml, "<", "&lt;") \n    EscapeHtml = Replace(EscapeHtml, ">", "&gt;") \nEnd Function \n \nPrivate Function EmailListHtml(EmailList As String) As String \n    Dim EmailArr() As String \n    Dim i As Long \n \n    EmailListHtml = "" \n    EmailArr() = Split(EmailList, ";") \n    For i = 0 To UBound(EmailArr) \n        If EmailListHtml <> "" Then \n            EmailListHtml = EmailListHtml & "; " \n        End If \n        EmailListHtml = EmailListHtml & "<a href=""mailto:" & EmailAddress(EmailArr(i)) & """>" & \nEscapeHtml(Trim(EmailArr(i))) & "</a>" \n    Next i \nEnd Function \n \nPublic Function PasswordGenerator(ByVal Length As Long) As String \n    Dim Char As Integer \n    Dim c As Long \n    Dim str As String'},
 {'page': 131,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 131 of 214 \n \n\u202f \n    Dim Index As Integer \n \n    Randomize Timer \n \n    For c = 1 To Length \n        Index = Int(4 * Rnd() + 1) \n \n        \'Randomly pick a char from the random set \n        Select Case Index \n            Case 1 \n                Char = Int((asc("Z") - asc("A") + 1) * Rnd() + asc("A")) \n            Case 2 \n                Char = Int((asc("z") - asc("a") + 1) * Rnd() + asc("a")) \n            Case 3 \n                Char = Int((asc("9") - asc("0") + 1) * Rnd() + asc("0")) \n            Case 4 \n                Char = Int((asc("&") - asc("#") + 1) * Rnd() + asc("#")) \n            Case Else \n                Char = "" \n        End Select \n \n        str = str & Chr(Char) \n    Next c \n \n    PasswordGenerator = str \nEnd Function \n \nPublic Function BASE64SHA1(ByVal sTextToHash As String) \n    Dim asc As Object \n    Dim enc As Object \n    Dim TextToHash() As Byte \n    Dim SharedSecretKey() As Byte \n    Dim bytes() As Byte \n    Const cutoff As Long = 8 \n \n    Set asc = CreateObject("System.Text.UTF8Encoding") \n    Set enc = CreateObject("System.Security.Cryptography.HMACSHA1") \n \n    On Error Resume Next \n \n    TextToHash = asc.GetBytes_4(sTextToHash) \n    SharedSecretKey = asc.GetBytes_4(sTextToHash) \n    enc.Key = SharedSecretKey \n \n    bytes = enc.ComputeHash_2((TextToHash)) \n    BASE64SHA1 = EncodeBase64(bytes) \n    BASE64SHA1 = Left(BASE64SHA1, cutoff) \n \n    Set asc = Nothing \n    Set enc = Nothing \nEnd Function \n \nPublic Function StrToBytes(ByVal Data As String) As Byte() \n    StrToBytes = VBA.StrConv(Data, VbStrConv.vbFromUnicode, 1033) \nEnd Function \n \nPublic Function BytesToStr(ByRef bytes() As Byte) As String \n    BytesToStr = VBA.StrConv(bytes(), VbStrConv.vbUnicode, 1033) \nEnd Function \n \nPublic Function EncodeBase64(ByRef arrData() As Byte) As String \n    Dim objXML As Object \n    Dim objNode As Object \n \n    Set objXML = CreateObject("MSXML2.DOMDocument") \n    Set objNode = objXML.createElement("b64") \n \n    objNode.DataType = "bin.base64" \n    objNode.nodeTypedValue = arrData \n    EncodeBase64 = objNode.Text \n \n    Set objNode = Nothing \n    Set objXML = Nothing \nEnd Function \n \nPrivate Function DecodeBase64(ByVal Data As String) As Byte() \n    Dim objXML As Object'},
 {'page': 132,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 132 of 214 \n \n\u202f \n    Dim objNode As Object \n \n    Set objXML = CreateObject("MSXML2.DOMDocument") \n    Set objNode = objXML.createElement("b64") \n \n    objNode.DataType = "bin.base64" \n    objNode.Text = Data \n    DecodeBase64 = objNode.nodeTypedValue \n \n    Set objNode = Nothing \n    Set objXML = Nothing \nEnd Function \n \n\'@1.38 Module - Lib_Protect \n \n\'---------------------------------------------------------- \n\' \n\' Protection and Locking related subroutines and functions \n\' \n\'---------------------------------------------------------- \n \nOption Explicit \n \nPrivate Const PreEnc As String = "==" \nPublic Const xEncrypt As Boolean = True \nPublic Const xDecrypt As Boolean = False \n \nPublic Sub ProtectAll(Optional Dummy As Boolean) \n    Dim Sheet As Worksheet \n \n    EnableMacroOptimisations \n \n    ProtectHome \n    ShowHome \n \n    For Each Sheet In ThisWorkbook.Worksheets \n        If Sheet.Name <> "HOME" Then \n            ProtectSheet2 Sheet.Name \n            DoEvents \n        End If \n    Next Sheet \n \n    XorWorkBook xEncrypt        \'XorWorkBook is defined in module RUN_1 \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Shapes("Lock").TextFrame.Characters.Text = "EDIT" \n        .Activate \n    End With \n \n    DisableMacroOptimisations \nEnd Sub \n \nPublic Sub UnprotectAll(Optional Dummy As Boolean) \n    Dim Sheet As Worksheet \n \n    EnableMacroOptimisations \n \n    UnlockStaff \n \n    For Each Sheet In ThisWorkbook.Worksheets \n        If Sheet.Name <> "HOME" And Sheet.Name <> SheetLast Then \n            UnprotectSheet2 Sheet.Name \n            DoEvents \n        End If \n    Next Sheet \n \n    UnprotectSheet SheetLast    \'SheetLast is defined in module RUN_1 \n \n    XorWorkBook xDecrypt        \'XorWorkBook is defined in module RUN_1 \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Shapes("Lock").TextFrame.Characters.Text = "LOCK" \n        .Activate \n    End With \n \n    DisableMacroOptimisations'},
 {'page': 133,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 133 of 214 \n \n\u202f \n    \'change formatting of ATO Remaining AMount \n   Dim lrow As Long \n   With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        lrow = .Cells(Rows.Count, "A").End(xlUp).Row \n        With .Range("A1:H" & lrow) \n                .HorizontalAlignment = xlCenter \n                \'.Font.Bold = True \n                \'.Interior.Color = RGB(146, 208, 80) \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n                .NumberFormat = "$#,##0.00" \n                .Font.Size = "9" \n        End With \n   End With \nEnd Sub \n \nPrivate Sub UnprotectVerify(Optional Dummy As Boolean) \n    EnableMacroOptimisations \n \n    With ThisWorkbook.Worksheets("HOME") \n        UnlockStaff \n \n        UnprotectSheet SheetVerifyCr \n        UnprotectSheet SheetVerifyBOI \n        UnprotectSheet SheetVerifyDr \n        UnprotectSheet SheetQA \n        UnprotectSheet SheetATORemainingAmount \n \n        UnprotectSheet SheetLast    \'SheetLast is defined in module RUN_1 \n \n        XorWorkBook xDecrypt        \'XorWorkBook is defined in module RUN_1 \n \n        StampBOI \n        StampVerify SheetVerifyCr \n        StampVerify SheetVerifyDr \n \n        .Shapes("Lock").TextFrame.Characters.Text = "LOCK" \n \n        .Activate \n \n \n    End With \n \n    DisableMacroOptimisations \n \n    \'change formatting of ATO Remaining AMount \n   Sheets(SheetATORemainingAmount).Select \n   Dim lrow As Long \n   lrow = Cells(Rows.Count, "A").End(xlUp).Row \n   With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        With .Range("A1:H" & lrow) \n                .HorizontalAlignment = xlCenter \n                \'.Font.Bold = True \n                \'.Interior.Color = RGB(146, 208, 80) \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n                .NumberFormat = "$#,##0.00" \n                .Font.Size = "9" \n        End With \n   End With \nEnd Sub \n \nPublic Sub UnprotectHome(Optional Dummy As Boolean) \n    DoUnprotect "HOME" \nEnd Sub \n \nPublic Sub ProtectHome(Optional Dummy As Boolean) \n    DoUnprotect "HOME" \n    LockStaff \n    DoProtect "HOME"    \'always lock HOME page \nEnd Sub \n \nPrivate Sub ProtectSheet(Name As String) \n    If SheetExists(Name) Then \n        ProtectSheet2 Name \n    End If \nEnd Sub'},
 {'page': 134,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 134 of 214 \n \n\u202f \n \nPrivate Sub ProtectSheet2(Name As String) \n    With ThisWorkbook.Sheets(Name) \n        DoUnprotect Name \n        LockSheet Name     \'lock all cells first \n        DoProtect Name \n    End With \nEnd Sub \n \nPublic Sub UnprotectSheet(Name As String) \n    If SheetExists(Name) Then \n        UnprotectSheet2 Name \n         DoEvents \n    End If \nEnd Sub \n \nPublic Sub UnprotectSheet2(Name As String) \n    If IsMasterPassword() Then \n        DoUnprotect Name \n        UnlockSheet Name \n    Else \n        DoUnprotect Name \n        DoProtectUser Name      \'allow sellecting locked cells and autofilter and sort \n        UnlockSheet Name \n    End If \nEnd Sub \n \nPrivate Sub DoProtect(Name As String) \n    With ThisWorkbook.Worksheets(Name) \n        .Protect Password:=MasterPwd, AllowFormattingCells:=False, UserInterFaceOnly:=True \n        .EnableSelection = xlNoSelection \n    End With \nEnd Sub \n \nPrivate Sub DoProtectUser(Name As String) \n    With ThisWorkbook.Worksheets(Name) \n        .Protect Password:=MasterPwd, AllowFormattingCells:=False, AllowSorting:=True, \nAllowFiltering:=True, UserInterFaceOnly:=True \n        .EnableSelection = xlUnlockedCells \n    End With \nEnd Sub \n \nPrivate Sub DoUnprotect(Name As String) \n    ThisWorkbook.Sheets(Name).Unprotect Password:=MasterPwd \nEnd Sub \n \nPrivate Sub LockSheet(Name As String) \n    With ThisWorkbook.Worksheets(Name) \n        .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = True \n        .EnableSelection = xlUnlockedCells \n    End With \nEnd Sub \n \nPrivate Sub UnlockSheet(Name As String) \n    With ThisWorkbook.Worksheets(Name) \n        If IsMasterPassword() Then \n            .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = False \n        ElseIf Name = SheetVerifyBOI And IsManagerPassword() Then \n            .Range("A2:M" & LastRowInCol(SheetBOI, "A")).Locked = False \n            .EnableSelection = xlNoRestrictions \n        ElseIf Name = SheetVerifyDr And IsManagerPassword() Then \n            .Range("A6:P" & LastRowInCol(SheetDebit, "A") - 1).Locked = False \n            .EnableSelection = xlNoRestrictions \n        ElseIf Name = SheetVerifyCr And IsManagerPassword() Then \n            .Range("A6:P" & LastRowInCol(SheetCredit, "A") - 1).Locked = False \n            .EnableSelection = xlNoRestrictions \n        ElseIf Name = SheetATORemainingAmount And IsManagerPassword() Then \n            .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = False \n        ElseIf Name = SheetATORemainingQA Then \n            .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = True \n            .Range("PREV_AMOUNT_REMAINING").Locked = False \n            .EnableSelection = xlNoRestrictions \n        Else \n            .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = True \n            .EnableSelection = xlNoRestrictions \n        End If \n    End With'},
 {'page': 135,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 135 of 214 \n \n\u202f \nEnd Sub \n \nPublic Function XorSheet(SheetName As String, EncFlag As Boolean, Row As Long, ParamArray Cols() As \nVariant) As Boolean \n    Dim N As Long, LBnd As Long, UBnd As Long \n    Dim LoopCol As String \n \n    If Not SheetExists(SheetName) Then Exit Function \n \n    LBnd = LBound(Cols) \n    UBnd = UBound(Cols) \n    LoopCol = CStr(Cols(LBnd))  \'first column must not contain empty cells \n \n    If EncFlag = xEncrypt Then \n        If IsXorEnc(ThisWorkbook.Worksheets(SheetName).Range(LoopCol & Row).Value) Then \n            XorSheet = True \n            Exit Function \n        End If \n    Else \n        If Not IsXorEnc(ThisWorkbook.Worksheets(SheetName).Range(LoopCol & Row).Value) Then \n            XorSheet = True \n            Exit Function \n        End If \n    End If \n \n    For N = LBnd To UBnd \n        XorColumn SheetName, LoopCol, CStr(Cols(N)), Row, EncFlag \n \n        StatPlus \n    Next N \n \n    XorSheet = True \nEnd Function \n \nPrivate Sub XorColumn(SheetName As String, LoopCol As String, Col As String, ByVal Row As Long, EncFlag As \nBoolean) \n    On Error Resume Next \n    With ThisWorkbook.Worksheets(SheetName) \n        While Not IsEmpty(.Range(LoopCol & Row)) \n            If Not (SheetName = SheetATORemainingAmount And (Col = "E" Or Col = "F" Or Col = "G" Or Col = \n"H")) Then \n                .Range(Col & Row).NumberFormat = "@" \n            End If \n \n            If EncFlag = True Then \n                .Range(Col & Row).Value = XorEnc(.Range(Col & Row).Value) \n            Else \n                .Range(Col & Row).Value = XorDec(.Range(Col & Row).Value) \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n        .Columns(Col).EntireColumn.AutoFit \n    End With \n    On Error GoTo 0 \nEnd Sub \n \nPrivate Function IsXorEnc(ByVal Data As String) \n    IsXorEnc = (Right(Data, Len(PreEnc)) = PreEnc) \nEnd Function \n \nPublic Function XorEnc(ByVal Data As String) As String \n    XorEnc = "" \n    If Len(Data) > 0 Then \n        If IsXorEnc(Data) Then \n            XorEnc = Data   \'already encrypted \n        Else \n            XorEnc = XorEscape(XorData(Data, xEncrypt))    \'encryption \n            If Left(XorEnc, 1) = "\'" Then \n                XorEnc = "\'" & XorEnc \n            End If \n        End If \n    End If \nEnd Function \n \nPublic Function XorDec(ByVal Data As String) As String'},
 {'page': 136,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 136 of 214 \n \n\u202f \n    XorDec = "" \n    If Len(Data) > 0 Then \n        If IsXorEnc(Data) Then \n            Data = XorUnEscape(Left(Data, Len(Data) - Len(PreEnc))) \n            XorDec = XorData(Data, xDecrypt)     \'decryption \n        Else \n            XorDec = Data   \'already decrypted \n        End If \n    End If \nEnd Function \n \nPrivate Function XorEscape(Text As String) \n    Dim OutText As String, Ch As String \n    Dim i As Long \n \n    OutText = "" \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n \n        If Ch = vbLf Then \n            OutText = OutText + "\\n" \n        ElseIf Ch = vbCr Then \n            OutText = OutText + "\\r" \n        ElseIf Ch = vbTab Then \n            OutText = OutText + "\\t" \n        ElseIf Ch = vbBack Then \n            OutText = OutText + "\\b" \n        ElseIf Ch = "\\" Then \n            OutText = OutText + "\\\\" \n        Else \n            OutText = OutText + Ch \n        End If \n \n        StatPlus \n    Next i \n \n    XorEscape = OutText \nEnd Function \n \nPrivate Function XorUnEscape(Text As String) \n    Dim OutText As String, Ch As String \n    Dim i As Long \n \n    OutText = "" \n    For i = 1 To Len(Text) \n        Ch = Mid(Text, i, 1) \n \n        If Ch = "\\" Then \n            i = i + 1 \n            Ch = Mid(Text, i, 1) \n \n            If Ch = "n" Then \n                OutText = OutText & vbLf \n            ElseIf Ch = "r" Then \n                OutText = OutText & vbCr \n            ElseIf Ch = "t" Then \n                OutText = OutText & vbTab \n            ElseIf Ch = "b" Then \n                OutText = OutText & vbBack \n            ElseIf Ch = "\\" Then \n                OutText = OutText & "\\" \n            End If \n        Else \n            OutText = OutText & Ch \n        End If \n \n        StatPlus \n    Next i \n \n    XorUnEscape = OutText \nEnd Function \n \nPrivate Function XorData(ByVal Data As String, ByVal EncFlag As Boolean) As String \n    Dim l As Long, i As Long \n    Dim ByteIn() As Byte, ByteOut() As Byte, ByteKey() As Byte \n \n    ByteIn = Data'},
 {'page': 137,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 137 of 214 \n \n\u202f \n    ByteOut = Data \n    ByteKey = MasterPwd \n    l = LBound(ByteKey) \n    For i = LBound(ByteIn) To UBound(ByteIn) - 1 Step 2 \n        ByteOut(i) = ((ByteIn(i) + Not EncFlag) Xor ByteKey(l)) - EncFlag   \'avoid Chr(0) by using EncFlag \nflag \n        l = l + 2 \n        If l > UBound(ByteKey) Then l = LBound(ByteKey) \n    Next i \n \n    XorData = ByteOut \n    If EncFlag = xEncrypt Then \n        XorData = XorData & PreEnc \n    End If \nEnd Function \n \nPublic Sub DebugFlags(Optional Dummay As Boolean) \n    Dim Text As String \n \n    Text = "Sheet: " & ActiveSheet.Name & vbLf & vbLf \n    With ActiveSheet \n        Text = Text & "Range(""A1:B1"").Locked: " & .Range("A1:B1").Locked & vbLf & vbLf \n \n        If .Name = "HOME" Then \n            Text = Text & "StaffTable Locked: " & .Range(StaffTable).Locked & vbLf & _ \n                   "EmailTable Locked: " & .Range(EmailTable).Locked & vbLf & vbLf \n        End If \n \n        If .EnableSelection = xlNoRestrictions Then Text = Text & ".EnableSelection: xlNoRestrictions" \n        If .EnableSelection = xlUnlockedCells Then Text = Text & ".EnableSelection: xlUnlockedCells" \n        If .EnableSelection = xlNoSelection Then Text = Text & ".EnableSelection: xlNoSelection" \n        Text = Text & vbLf \n    End With \n \n    MsgBox Text \nEnd Sub \n \nPublic Function IsLocked() As Boolean \n    IsLocked = (ThisWorkbook.Worksheets("HOME").Shapes("Lock").TextFrame.Characters.Text = "EDIT") \nEnd Function \n \nPublic Sub Click_Lock() \n    Dim OrgSreenUpdating As Boolean \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    With ThisWorkbook.Worksheets("HOME") \n        If .Shapes("Lock").TextFrame.Characters.Text = "EDIT" Then \n            If Not FailPasswordWithLock() Then \n                If IsManagerPassword() Then \n                    Application.Cursor = xlWait \n                    UnprotectVerify \n                Else \n                    Application.Cursor = xlWait \n                    UnprotectAll \n                    If Not IsExpiredPassword() Then \n                        BusyOff \n                    End If \n                End If \n            End If \n            WriteLog "Press: EDIT button" \n        Else \n            ThisWorkbook.Worksheets("HOME").Range("Access2").Value = "" \n            Application.Cursor = xlWait \n            ProtectAll \n            BusyOn \n            WriteLog "Press: LOCK button" \n        End If \n    End With \n \n    If IsManagerPassword() Or IsMasterPassword() Then \n        ThisWorkbook.Worksheets("HOME").Shapes("ADD LUT").Visible = True \n    Else \n        ThisWorkbook.Worksheets("HOME").Shapes("ADD LUT").Visible = False \n    End If'},
 {'page': 138,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 138 of 214 \n \n\u202f \n    Application.Cursor = xlDefault \n    Application.ScreenUpdating = OrgSreenUpdating \nEnd Sub \n \nPublic Function DecryptData(ByVal Data As String) As String \n DecryptData = XorDec(Data) \nEnd Function \n \n\'@1.39 Module - Lib_QA \n \nOption Explicit \n \nPublic Const NotChecked As String = "N/A" \n \nPrivate ListMan() As Long     \'all manual cases \nPrivate ListAuto() As Long    \'all automated cases \n \nPrivate ListQA() As Long      \'all cases to QA \n \n\'#########################################################################################################\n######## \n\' \n\' Rules to peform a QA for each type of tool \n\' \n\' Set UseRule to one of the following: \n\'   -1: silently skip QA \n\'    0: no rules (default to stop compile errors) \n\'    1: UPI Tool \n\'    2: LSD Tool \n\'    3: BPay Tool \n \n#Const UseRule = 4     \'set manually to which tool to use \n \nPrivate Function QA_IsEmptyData(Row As Long) As Boolean \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_IsEmptyData = IsEmpty(ThisWorkbook.Worksheets(SheetReplacement).Range("C" & Row)) \n \n    #ElseIf UseRule = 3 Then \n        QA_IsEmptyData = IsEmpty(ThisWorkbook.Worksheets(SheetSAP).Range("C" & Row)) \n \n    #ElseIf UseRule = 4 Then    \'gaurav added Need to be confirmed \n        QA_IsEmptyData = IsEmpty(ThisWorkbook.Worksheets(SheetInteraction).Range("A" & Row)) \n    #End If \nEnd Function \n \nPrivate Function QA_IsValidData(Row As Long) As Boolean \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_IsValidData = (IsValidCard(QA_GetReplCard(Row)) Or QA_GetReplCard(Row) = "None" Or \nQA_GetReplCard(Row) = "Not Found") \n \n    #ElseIf UseRule = 3 Then \n        QA_IsValidData = True   \'always valid \n    #ElseIf UseRule = 4 Then    \'gaurav added Need to be confirmed \n        QA_IsValidData = True \n    #End If \nEnd Function \n \nPrivate Sub QA_SkipDuplicates(ByRef Row As Long) \n    #If UseRule = 1 Or UseRule = 2 Then \n        While QA_GetReplCard(Row) = QA_GetReplCard(Row + 1) \n            StatPlus \n            Row = Row + 1   \'skip duplicates \n        Wend \n    #ElseIf UseRule = 3 Then \n        \'nothing to skip \n    #ElseIf UseRule = 4 Then    \'gaurav added Need to be confirmed \n        \'nothing to skip \n    #End If \nEnd Sub \n \nPrivate Function QA_IsHighlighted(Row As Long) As Boolean \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_IsHighlighted = (ThisWorkbook.Worksheets(SheetReplacement).Range("C" & Row).Interior.Color = \nRGB(255, 255, 128)) \n \n    #ElseIf UseRule = 3 Then \n        QA_IsHighlighted = False     \'there are no highlighted cases'},
 {'page': 139,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 139 of 214 \n \n\u202f \n    #ElseIf UseRule = 3 Then     \'gaurav added Need to be confirmed \n        QA_IsHighlighted = (ThisWorkbook.Worksheets(SheetInteraction).Range("A" & Row).Interior.Color = \nRGB(255, 230, 153)) \n    #End If \nEnd Function \n \nPublic Function QA_IsManual(Row As Long) As Boolean \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_IsManual = (ThisWorkbook.Worksheets(SheetReplacement).Range("K" & Row).Value = "MANUAL") \n \n    #ElseIf UseRule = 3 Then \n        QA_IsManual = False         \'there are no manual cases \n    #End If \nEnd Function \n \nPrivate Function QA_IsCredit(Row As Long) As Boolean \n    QA_IsCredit = (QA_GetSign(Row) = "-") \nEnd Function \n \nPublic Function QA_GetSign(Row As Long) As String \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_GetSign = ThisWorkbook.Worksheets(SheetReplacement).Range("I" & Row).Value \n \n    #ElseIf UseRule = 3 Then \n        QA_GetSign = ""         \'always positive \n    #End If \nEnd Function \n \nPublic Function QA_GetAmount(Row As Long) As Double \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_GetAmount = ThisWorkbook.Worksheets(SheetReplacement).Range("H" & Row).Value \n \n    #ElseIf UseRule = 3 Then \n        QA_GetAmount = ThisWorkbook.Worksheets(SheetSAP).Range("G" & Row).Value \n    #End If \nEnd Function \n \nPublic Function QA_GetCard(Row As Long) As String \n    \'this will be the clickable column A in the QA report \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_GetCard = ThisWorkbook.Worksheets(SheetReplacement).Range("B" & Row).Value           \'cancelled \ncard \n \n    #ElseIf UseRule = 3 Then \n        QA_GetCard = ThisWorkbook.Worksheets(SheetSAP).Range("C" & Row).Value \n \n    #ElseIf UseRule = 4 Then    \'gaurav added need to be verifed \n        QA_GetCard = ThisWorkbook.Worksheets(SheetInteraction).Range("A" & Row).Value \n    #End If \nEnd Function \n \nPublic Function QA_GetReplCard(Row As Long) As String \n    \'this will be column B in the QA report \n    #If UseRule = 1 Or UseRule = 2 Then \n        QA_GetReplCard = ThisWorkbook.Worksheets(SheetReplacement).Range("C" & Row).Value       \n\'replacement card \n \n    #ElseIf UseRule = 3 Then \n        QA_GetReplCard = ThisWorkbook.Worksheets(SheetSAP).Range("D" & Row).Value \n \n    #ElseIf UseRule = 4 Then  \'gaurav added need to be verifed \n        QA_GetReplCard = ThisWorkbook.Worksheets(SheetInteraction).Range("B" & Row).Value \n \n    #End If \nEnd Function \n \n\'added by gaurav \nPublic Function QA_GetCustNotes(Row As Long) As String \n\'If UseRule = 4 Then \n    QA_GetCustNotes = ThisWorkbook.Worksheets(SheetInteraction).Range("C" & Row).Value \n\'End If \nEnd Function \n \nPublic Function QA_GetInfo1(Row As Long) As String \n    #If UseRule = 1 Or UseRule = 2 Then \n        If Row = 1 Then \n            QA_GetInfo1 = "Replacement Card:"'},
 {'page': 140,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 140 of 214 \n \n\u202f \n        Else \n            QA_GetInfo1 = QA_GetReplCard(Row) \n        End If \n    #ElseIf UseRule = 3 Then \n        If Row = 1 Then \n            QA_GetInfo1 = "SAP Account:" \n        Else \n            QA_GetInfo1 = Replace(ThisWorkbook.Worksheets(SheetSAP).Range("B" & Row).Value, "SAPSPAU", "") \n            QA_GetInfo1 = Left(QA_GetInfo1, 3) & "-" & Mid(QA_GetInfo1, 4, 3) & " " & Mid(QA_GetInfo1, 7) \n        End If \n    #End If \nEnd Function \n \nPublic Function QA_GetInfo2(Row As Long) As String \n    If Row = 1 Then \n        QA_GetInfo2 = "Amount:" \n    Else \n        QA_GetInfo2 = Format(QA_GetSign(Row) & CStr(QA_GetAmount(Row)), "$#,##0.00") \n    End If \nEnd Function \n \nPublic Function QA_GetInfo3(Row As Long) As String \n    #If UseRule = 1 Or UseRule = 2 Then \n        If Row = 1 Then \n            QA_GetInfo3 = "Trancode:" \n        Else \n            QA_GetInfo3 = ThisWorkbook.Worksheets(SheetReplacement).Range("D" & Row).Value & " " & \nThisWorkbook.Worksheets(SheetReplacement).Range("E" & Row).Value \n        End If \n    #ElseIf UseRule = 3 Then \n        If Row = 1 Then \n            QA_GetInfo3 = "Date:" \n        Else \n            QA_GetInfo3 = ThisWorkbook.Worksheets(SheetSAP).Range("F" & Row).Value \n        End If \n    #End If \nEnd Function \n \nPublic Function QA_GetInfo4(Row As Long) As String \n    #If UseRule = 1 Or UseRule = 2 Then \n        If Row = 1 Then \n            QA_GetInfo4 = "Date:" \n        Else \n            QA_GetInfo4 = ThisWorkbook.Worksheets(SheetReplacement).Range("G" & Row).Value \n        End If \n    #ElseIf UseRule = 3 Then \n        If Row = 1 Then \n            QA_GetInfo4 = "Biller Code:" \n        Else \n            QA_GetInfo4 = ThisWorkbook.Worksheets(SheetSAP).Range("I" & Row).Value \n        End If \n    #End If \nEnd Function \n \nPublic Function QA_GetInfo5(Row As Long) As String \n    #If UseRule = 1 Or UseRule = 2 Then \n        If Row = 1 Then \n            QA_GetInfo5 = "Merchant:" \n        Else \n            QA_GetInfo5 = ThisWorkbook.Worksheets(SheetReplacement).Range("J" & Row).Value \n        End If \n    #ElseIf UseRule = 3 Then \n        If Row = 1 Then \n            QA_GetInfo5 = "Biller Name:" \n        Else \n            QA_GetInfo5 = ThisWorkbook.Worksheets(SheetSAP).Range("J" & Row).Value \n        End If \n    #End If \nEnd Function \n \n\'#########################################################################################################\n######## \n \nPublic Sub AddQA(TargetMan As Long, TargetAuto As Long, FillWithAutoFlag As Boolean) \n    Dim Row As Long, i As Long \n \n    If Not CheckRules() Then Exit Sub'},
 {'page': 141,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 141 of 214 \n \n\u202f \n \n    If Not IsEmpty(ThisWorkbook.Worksheets(SheetQA).Range("A1")) Then \n        \'update each replacement card in sheet QA only if the card has changed. \n        \'when a card has changed, set the QA PASS value back to N/A for rechecking \n        \'UpdateQA \n        UpdateMGQA \n        Exit Sub \n    End If \n \n    StatZero "Adding " & SheetQA & " Report" \n \n    PickCases TargetMan, TargetAuto, FillWithAutoFlag \n \n    With ThisWorkbook.Worksheets(SheetQA) \n \n        .Range("A1").Value = QA_GetCard(1) \n        .Range("B1").Value = Replace(QA_GetReplCard(1), " ", vbLf) \n        .Range("C1").Value = Replace(QA_GetCustNotes(1), " ", vbLf) \n        .Range("D1").Value = "QA" & vbLf & "PASS" \n        .Range("E1").Value = "NOTES" \n \n        Row = 2 \n        For i = 1 To UBound(ListQA) \n            .Range("A" & Row & ":E" & Row).NumberFormat = "@" \n            .Range("A" & Row).Value = QA_GetCard(ListQA(i)) \n            .Range("B" & Row).Value = QA_GetReplCard(ListQA(i)) \n            .Range("C" & Row).Value = QA_GetCustNotes(ListQA(i)) \n            .Range("D" & Row).Value = NotChecked \n            .Range("E" & Row).Value = "" \n            .Range("F" & Row).Value = ListQA(i) \n \n            StatPlus \n            Row = Row + 1 \n        Next i \n \n        .Columns("F").EntireColumn.Font.Color = RGB(255, 255, 255) \n    End With \n \n    FormatTable SheetQA, "C" \n    ThisWorkbook.Worksheets(SheetQA).Columns("E:E").ColumnWidth = 70 \n \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("A" & Row)) \n            .Range("A" & Row).Interior.Color = RGB(255, 255, 128) \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n \n        VerifyColor .Range("D2:D" & UBound(ListQA) + 1) \n \n        With .Range("D2:D" & UBound(ListQA) + 1) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n    End With \n \n    StatMsg True, "Adding " & SheetQA & " Report" \n \n  SendQAEmail     \'create an email for delegate \nEnd Sub \n \nPrivate Sub UpdateQA() \n    Dim Row As Long \n    Dim CCNumber As String \n \n    StatZero "Updating " & SheetQA & " Report" \n \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("C" & Row)) \n            CCNumber = GetNewQA(.Range("A" & Row).Value) \n \n            If .Range("B" & Row).Value <> CCNumber Then \n                .Range("B" & Row).Value = CCNumber \n                .Range("C" & Row).Value = NotChecked'},
 {'page': 142,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 142 of 214 \n \n\u202f \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n    End With \n \n    StatMsg True, "Updating " & SheetQA & " Report" \nEnd Sub \n \nPrivate Sub UpdateMGQA() \n    Dim Row As Long \n    Dim CCNumber As String \n \n    StatZero "Updating " & SheetQA & " Report" \n \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("D" & Row)) \n            CCNumber = GetNewQA(.Range("A" & Row).Value) \n \n            If .Range("B" & Row).Value <> CCNumber Then \n                .Range("B" & Row).Value = CCNumber \n                .Range("D" & Row).Value = NotChecked \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n    End With \n \n    StatMsg True, "Updating " & SheetQA & " Report" \nEnd Sub \n \nPrivate Function GetNewQA(CCNum As String) As String \n    Dim Row As Long, CountAuto As Long \n \n    GetNewQA = CCNum \n \n    Row = 2 \n    While Not QA_IsEmptyData(Row) \n        QA_SkipDuplicates Row \n \n        If QA_GetCard(Row) = CCNum Then \n            GetNewQA = QA_GetReplCard(Row) \n            Exit Function \n        End If \n \n        StatPlus \n        Row = Row + 1 \n    Wend \nEnd Function \n \nPrivate Function CheckRules() As Boolean \n    CheckRules = True \n \n    Select Case UCase(ThisWorkbook.Worksheets("HOME").Range("I1").Value) \n        Case "UPI TOOL" \n            #If UseRule <> 1 Then \n                CheckRules = False \n            #End If \n        Case "LSD TOOL" \n            #If UseRule <> 2 Then \n                CheckRules = False \n            #End If \n        Case "BPAY BA TOOL" \n            #If UseRule <> 3 Then \n                CheckRules = False \n            #End If \n         Case "MERCHANT GARNISHEE TOOL" \n            #If UseRule <> 4 Then \n                CheckRules = False \n            #End If \n        Case Else \n                CheckRules = False \n    End Select'},
 {'page': 143,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 143 of 214 \n \n\u202f \n    If Not CheckRules Then \n        #If UseRule <> -1 Then   \'skip QA \n            ErrBox "QA rules are not set in the QA Module!" & vbLf & vbLf & "Please set the respective \nrules in the QA module...", "QA Rules" \n        #End If \n    End If \nEnd Function \n \n\'Public Sub TestQA() \n\'\'    If Not IsMasterPassword() Then \n\'\'        ErrBox "TestQA required Admin access!", "Admin Access" \n\'\'        Exit Sub \n\'\'    End If \n\' \n\'    BusyOn \n\'    StatClear \n\' \n\'    AppendQAWorksheet SheetLast \n\' \n\'    AddQA 10, 15, True \n\' \n\'    QAComplete \n\'    QAPass \n\' \n\'    BusyOff \n\'End Sub \n \nPrivate Sub PrintList(SheetName As String, List() As Long, PreText As String) \n    Dim i As Long \n \n    Debug.Print \n    Debug.Print \n \n    With ThisWorkbook.Worksheets(SheetName) \n        If UBound(List) < 1 Then \n                Debug.Print PreText & " list is empty" \n        Else \n            For i = LBound(List) To UBound(List) \n                Debug.Print PreText & " " & PadLeft(CStr(i), 2) & ": " & PadLeft(CStr(List(i)), 3) & " " & \n_ \n                PadLeft(Format(QA_GetSign(List(i)) & QA_GetAmount(List(i)), "$#,##0.00"), 13) \n            Next i \n        End If \n    End With \nEnd Sub \n \nPrivate Sub PickCases(TargetMan As Long, TargetAuto As Long, FillWithAutoFlag As Boolean) \n    Dim CountOther As Long, ToDo As Long, ToDo2 As Long, i As Long  \', Row As Long \n    Dim ForDate As String \n \n    BuildLists \n \n    If UBound(ListMan) = 0 And TargetAuto = 0 And FillWithAutoFlag = False Then Exit Sub    \'there are no \nmanual cases to QA \n \n    ForDate = Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "ddd d/mm/yyyy") \n \n\'    If FillWithAutoFlag Then \n\'        WriteLog "QA: Target " & TargetMan & "/" & UBound(ListMan) & " manual and " & TargetAuto & "/" & \nUBound(ListAuto) & " automated for " & ForDate \n\'    Else \n\'        WriteLog "QA: Target " & TargetMan & "/" & UBound(ListMan) & " manual for " & ForDate \n\'    End If \n \n    ToDo2 = 0 \n    CountOther = 0 \n    ToDo = CalculateToDo(ListMan, TargetMan, CountOther) \n \n\'    WriteLog "QA: Test1 Todo=" & ToDo & ", Todo2=" & ToDo2 & ", CountOther=" & CountOther \n \n    If FillWithAutoFlag Then \n        ToDo2 = CalculateToDo(ListAuto, TargetAuto, CountOther) \n    End If \n \n\'    WriteLog "QA: Test2 Todo=" & ToDo & ", Todo2=" & ToDo2 & ", CountOther=" & CountOther \n \n    CountOther = CountOther + ToDo2'},
 {'page': 144,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 144 of 214 \n \n\u202f \n    If CountOther > UBound(ListAuto) Then        \'enough cases check \n        CountOther = UBound(ListAuto) \n    End If \n \n\'    WriteLog "QA: Test3 Todo=" & ToDo & ", CountOther=" & CountOther \n \n    WriteLog "QA: Picking " & ToDo & "/" & UBound(ListMan) & " manual and " & CountOther & "/" & \nUBound(ListAuto) & " automated for " & ForDate \n \n    \'------------------------------------------------------- \n    \' \n    \' Step 1: add the largest credit and debit transactions \n    \' \n    \'------------------------------------------------------- \n \n    Move100K ListMan                                \'move trans over 100K \n    Move100K ListAuto \n \n    i = Int(TargetMan / 3) \n    If i Mod 2 = 1 Then \n        i = i - 1 \n    End If \n \n    MoveLargest ListMan, i, True, ToDo              \'largest credits \n    MoveSmallest ListMan, i, True, ToDo             \'smallest credits \n \n    i = Int(TargetAuto / 3) \n    If i Mod 2 = 1 Then \n        i = i - 1 \n    End If \n \n    MoveLargest ListAuto, i, False, CountOther       \'largest debits \n    MoveSmallest ListAuto, i, False, CountOther      \'smallest debits \n \n    \'------------------------------------------------------- \n    \' \n    \' Step 2: add random cases from remaining manual cases \n    \' \n    \'------------------------------------------------------- \n \n    While ToDo > 0 \n        i = Int((UBound(ListMan) - LBound(ListMan) + 1) * Rnd() + LBound(ListMan)) \n \n        AppendList ListQA, ListMan(i) \n        \'Debug.Print "process " & ToDo & " random man row " & ListMan(i) \n        DeleteListIndex ListMan, i \n \n        StatPlus \n        ToDo = ToDo - 1 \n    Wend \n \n    \'--------------------------------------------------------- \n    \' \n    \' Step 3: add random cases from remaining automated cases \n    \' \n    \'--------------------------------------------------------- \n \n    While CountOther > 0 \n        i = Int((UBound(ListAuto) - LBound(ListAuto) + 1) * Rnd() + LBound(ListAuto)) \n \n        AppendList ListQA, ListAuto(i) \n        \'Debug.Print "process " & CountOther & " random auto row " & ListAuto(i) \n        DeleteListIndex ListAuto, i \n \n        StatPlus \n        CountOther = CountOther - 1 \n    Wend \n \n    ShuffleList ListQA \n    \'PrintList SheetSAP, ListQA, "Pick" \nEnd Sub \n \nPrivate Function CalculateToDo(List() As Long, ByVal MinTarget As Long, ByRef CountEx As Long) As Long \n    Dim Count As Long, CountPer As Long, ToDo As Long \n \n    Count = UBound(List) - CountEx'},
 {'page': 145,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 145 of 214 \n \n\u202f \n    CountPer = Count * 10 / 100 \n    If MinTarget = 0 Then \n        CountPer = 0 \n    End If \n \n    ToDo = CountPer \n    If CountPer < MinTarget Then \n        ToDo = MinTarget \n        If Count < MinTarget Then \n            ToDo = Count \n        End If \n    End If \n \n    If ToDo < MinTarget Then \n        CountEx = CountEx + MinTarget - Count \n    End If \n \n    CalculateToDo = ToDo \nEnd Function \n \nPrivate Sub Move100K(List() As Long) \n    Dim i As Long \n \n    If UBound(List) > 0 Then \n        i = LBound(List) \n        While i <= UBound(List) \n            If QA_GetAmount(List(i)) >= 100000# Then \n                AppendList ListQA, List(i) \n \n                DeleteListIndex List, i \n            End If \n \n            i = i + 1 \n            StatPlus \n        Wend \n    End If \nEnd Sub \n \nPrivate Sub MoveLargest(List() As Long, Count As Long, CrFlag As Boolean, ByRef ToDo As Long) \n    Dim i As Long, j As Long \n \n    If UBound(List) = 0 Then Exit Sub \n \n    For j = 1 To Count \n        If UBound(List) > 0 Then \n            For i = LBound(List) To UBound(List) \n                If QA_IsCredit(List(i)) = CrFlag Then \n                    AppendList ListQA, List(i) \n \n                    DeleteListIndex List, i \n                    ToDo = ToDo - 1 \n                    Exit For \n                End If \n \n                StatPlus \n            Next i \n        End If \n \n        StatPlus \n    Next j \nEnd Sub \n \nPrivate Sub MoveSmallest(List() As Long, Count As Long, CrFlag As Boolean, ByRef ToDo As Long) \n    Dim i As Long, j As Long \n \n    If UBound(List) = 0 Then Exit Sub \n \n    For j = 1 To Count \n        If UBound(List) > 0 Then \n            For i = UBound(List) To LBound(List) Step -1 \n                If QA_IsCredit(List(i)) = CrFlag Then \n                    AppendList ListQA, List(i) \n \n                    DeleteListIndex List, i \n                    ToDo = ToDo - 1 \n                    Exit For \n                End If'},
 {'page': 146,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 146 of 214 \n \n\u202f \n \n                StatPlus \n            Next i \n        End If \n \n        StatPlus \n    Next j \nEnd Sub \n \nPrivate Sub DeleteListIndex(List() As Long, Index As Long) \n    Dim i As Long, UBnd As Long \n \n    If Index < 1 Then Exit Sub \n \n    UBnd = UBound(List) \n    If UBnd < 1 Then Exit Sub \n \n    For i = Index + 1 To UBnd \n        List(i - 1) = List(i) \n \n        StatPlus \n    Next \n \n    If UBnd = 1 Then \n        ReDim List(UBnd - 1) \n    Else \n        ReDim Preserve List(1 To UBnd - 1) \n    End If \nEnd Sub \n \nPrivate Sub AppendList(List() As Long, Value As Long) \n    Dim Index As Long \n \n    Index = UBound(List) + 1 \n    If Index = 1 Then \n        ReDim List(1 To 1) \n    Else \n        ReDim Preserve List(1 To Index) \n    End If \n \n    List(Index) = Value \nEnd Sub \n \nPrivate Function BuildLists() As Long \n    Dim Row As Long, CountAuto As Long \n \n    ReDim ListMan(0) \n    ReDim ListAuto(0) \n    ReDim ListQA(0) \n \n    BuildLists = 0 \n    CountAuto = 0 \n \n    Row = 2 \n    While Not QA_IsEmptyData(Row) \n        QA_SkipDuplicates Row \n \n        If QA_IsValidData(Row) Then \n            If QA_IsHighlighted(Row) Then \n                BuildLists = BuildLists + 1 \n            Else \n                CountAuto = CountAuto + 1 \n            End If \n        End If \n \n        StatPlus \n        Row = Row + 1 \n    Wend \n \n    If BuildLists > 0 Then \n        ReDim ListMan(1 To BuildLists) \n    End If \n \n    If CountAuto > 0 Then \n        ReDim ListAuto(1 To CountAuto) \n    End If'},
 {'page': 147,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 147 of 214 \n \n\u202f \n    FillLists \n \n\'    PrintList SheetSAP, ListMan, " Man"    \'debug \n\'    PrintList SheetSAP, ListAuto, "Auto"   \'debug \nEnd Function \n \nPrivate Sub FillLists() \n    Dim Row As Long, ManIndex As Long, AutoIndex As Long \n \n    ManIndex = 1 \n    AutoIndex = 1 \n \n    Row = 2 \n    While Not QA_IsEmptyData(Row) \n        QA_SkipDuplicates Row \n \n        If QA_IsValidData(Row) Then \n            If QA_IsHighlighted(Row) Then \n                ListMan(ManIndex) = Row \n                ManIndex = ManIndex + 1 \n            Else \n                ListAuto(AutoIndex) = Row \n                AutoIndex = AutoIndex + 1 \n            End If \n        End If \n \n        StatPlus \n        Row = Row + 1 \n    Wend \n \n    If UBound(ListMan) > 1 Then \n        SortList ListMan, LBound(ListMan), UBound(ListMan) \n    End If \n \n    If UBound(ListAuto) > 1 Then \n        SortList ListAuto, LBound(ListAuto), UBound(ListAuto) \n    End If \nEnd Sub \n \nPrivate Sub SortList(List() As Long, RowLBound As Long, RowUBound As Long) \n    Dim PivotVal As Double \n    Dim tmpLow As Long, tmpHi As Long, tmpVal As Long \n \n    tmpLow = RowLBound \n    tmpHi = RowUBound \n \n    With ThisWorkbook.Worksheets("HOME") \n        PivotVal = QA_GetAmount(List((RowLBound + RowUBound) \\ 2)) \n \n        While (tmpLow <= tmpHi)     \'divide \n            While QA_GetAmount(List(tmpLow)) < PivotVal And tmpLow < RowUBound \n                tmpLow = tmpLow + 1 \n            Wend \n \n            While PivotVal < QA_GetAmount(List(tmpHi)) And tmpHi > RowLBound \n                tmpHi = tmpHi - 1 \n            Wend \n \n            If (tmpLow <= tmpHi) Then \n                tmpVal = List(tmpLow) \n                List(tmpLow) = List(tmpHi) \n                List(tmpHi) = tmpVal \n \n                tmpLow = tmpLow + 1 \n                tmpHi = tmpHi - 1 \n            End If \n \n            StatPlus \n        Wend \n    End With \n \n    If (RowLBound < tmpHi) Then SortList List, RowLBound, tmpHi     \'conquer \n    If (tmpLow < RowUBound) Then SortList List, tmpLow, RowUBound   \'conquer \nEnd Sub \n \nPrivate Sub ShuffleList(List() As Long) \n    Dim i As Long, j As Long, Temp As Long'},
 {'page': 148,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 148 of 214 \n \n\u202f \n \n    Randomize \n    For i = LBound(List) To UBound(List) \n        j = CLng(((UBound(List) - i) * Rnd) + i) \n        If i <> j Then \n            Temp = List(i) \n            List(i) = List(j) \n            List(j) = Temp \n        End If \n    Next i \nEnd Sub \n \nPublic Sub AppendQAWorksheet(SheetAfter As String) \n    If Not CheckRules() Then Exit Sub \n \n    If Not SheetExists(SheetQA) Then \n        AppendNewWorksheet SheetQA, SheetAfter \n    Else \n        ThisWorkbook.Worksheets(SheetQA).Move After:=ThisWorkbook.Worksheets(SheetAfter) \n    End If \nEnd Sub \n \nPublic Function QAComplete() As Boolean \n    Dim Row As Long \n \n    QAComplete = True \n    Row = 2 \n \n    If Not CheckRules() Then Exit Function       \'nothing to QA \n \n    If Not SheetExists(SheetQA) Then Exit Function \n\'    If IsEmpty(ThisWorkbook.Worksheets(SheetQA).Range("C" & Row)) Then Exit Function \n    If IsEmpty(ThisWorkbook.Worksheets(SheetQA).Range("D" & Row)) Then Exit Function \n \n    StatZero "QA completed?" \n \n    With ThisWorkbook.Worksheets(SheetQA) \n        \'While Not IsEmpty(.Range("C" & Row)) \n         \'   If .Range("C" & Row).Value = NotChecked Then \n        While Not IsEmpty(.Range("D" & Row)) \n            If .Range("D" & Row).Value = NotChecked Then \n                QAComplete = False \n                GoTo Done \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n    End With \n \nDone: \n    StatMsg QAComplete, "QA completed?" \n \n    If Not QAComplete Then \n        ErrBox "QA has not been completed!" & vbLf & vbLf & "Please wait for the Delegate to complete QA \nbefore continuing...", "QA" \n    End If \nEnd Function \n \nPrivate Function IsManualQA(RepCard As String) As Boolean \n    Dim Row As Long \n \n    IsManualQA = False \n \n    Row = 2 \n    While Not QA_IsEmptyData(Row) \n        QA_SkipDuplicates Row \n \n        If QA_GetReplCard(Row) = RepCard Then \n            If QA_IsManual(Row) Then \n                IsManualQA = True \n                Exit Function \n            End If \n        End If \n \n        StatPlus \n        Row = Row + 1'},
 {'page': 149,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 149 of 214 \n \n\u202f \n    Wend \nEnd Function \n \nPublic Function QAPass() As Boolean \n    Dim Row As Long \n    Dim CCNumber As String \n \n    QAPass = True \n    Row = 2 \n \n    If Not CheckRules() Then Exit Function       \'nothing to QA \n \n    If Not SheetExists(SheetQA) Then Exit Function \n    If IsEmpty(ThisWorkbook.Worksheets(SheetQA).Range("C" & Row)) Then Exit Function \n \n    StatZero "QA passed?" \n \n    CCNumber = "" \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("C" & Row)) \n            If .Range("C" & Row).Value = "NO" Or .Range("C" & Row).Value = NotChecked Then \n                QAPass = False \n                CCNumber = .Range("B" & Row).Value \n                GoTo Done \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n    End With \n \nDone: \n    StatMsg QAPass, "QA passed?" \n \n    If Not QAPass Then \n        If IsManualQA(CCNumber) Then \n            ErrBox "QA has not passed!" & vbLf & vbLf & "Please correct the transaction(s) that did not \npass QA and resubmit for checking...", "QA" \n        Else \n            ErrBox "QA has not passed!" & vbLf & vbLf & "Please email PS Transformation@cba.com.au to \nproceed...", "QA" \n        End If \n        ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run3  \'go back to update \n    End If \nEnd Function \n \nPublic Function IsQAComplete() As Boolean \n    Dim Row As Long \n \n    IsQAComplete = True \n \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("C" & Row)) \n            If .Range("C" & Row).Value = NotChecked Then \n                IsQAComplete = False \n                Exit Function \n            End If \n \n            DoEvents \n            Row = Row + 1 \n        Wend \n    End With \nEnd Function \n \nPublic Sub LogQA(Optional Dummy As Boolean) \n    Dim Row As Long, RowRepl As Long \n    Dim Failed As Boolean \n    Dim Text As String \n \n    Failed = False \n \n    Row = 2 \n    \'RowRepl = ThisWorkbook.Worksheets(SheetQA).Range("E" & Row).Value \n    RowRepl = ThisWorkbook.Worksheets(SheetQA).Range("F" & Row).Value \n    With ThisWorkbook.Worksheets(SheetQA) \n        While Not IsEmpty(.Range("D" & Row))'},
 {'page': 150,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 150 of 214 \n \n\u202f \n            If .Range("D" & Row).Value = "NO" Then \n                Failed = True \n                WriteLog "QA: Row " & Row & " has failed QA" \n            End If \n \n            DoEvents \n            Row = Row + 1 \n        Wend \n    End With \n \n    Text = "Passed" \n    If Failed Then \n        Text = "Failed" \n       \' ThisWorkbook.Worksheets("HOME").Shapes("Run").TextFrame.Characters.Text = Run3  \'go back to \nupdate \n    End If \n    WriteLog "QA: " & Text & " for " & Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "ddd \nd/mm/yyyy") \nEnd Sub \n \nPrivate Sub SendQAEmail(Optional Dummy As Boolean) \n    Dim EmailTo As String, CC As String, Subject As String, Body As String, Sig As String, TName As \nString, URL As String \n    Dim RunDate As String, Amount As String \n    Dim ManEmail As String, POREmail As String \n    Dim Outlook As Object \n    Dim Flag As Boolean \n \n    If UBound(ListQA) = 0 Then Exit Sub     \'No QA to email to complete \n \n    StatZero "Starting Outlook" \n \n    StatPlus \n    On Error Resume Next \n    Set Outlook = CreateObject("Outlook.Application") \n    Outlook.ActiveWindow.WindowState = 1 \n    On Error GoTo 0 \n    StatPlus \n \n    If Outlook Is Nothing Then \n        StatMsg False, "Starting Outlook" \n        ErrBox "Failed to start OutLook!", "OutLook" \n        Exit Sub \n    End If \n    StatMsg True, "Starting Outlook" \n \n    Sig = GetSignature() \n \n    TName = Replace(ThisWorkbook.Worksheets("HOME").Range("I1").Value, "TOOL", "Tool") \n    URL = "file://" & ThisWorkbook.Path & "\\" & ThisWorkbook.Name \n \n    RunDate = Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd/mm/yyyy") \n \n    ManEmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_MAN").Value \n    POREmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_POR").Value \n \n    StatZero "|Creating " & SheetQA & " email" \n \n    EmailTo = POREmail & ";" & ManEmail \n   \' CC = ManEmail \n    Subject = TName & " QA for " & RunDate \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi all,<br>" & _ \n           "<br>" & _ \n           "The " & TName & " process has been completed and is ready for your Quality Assurance (QA)." & \n_ \n           "<br><br>" & _ \n           "Please access the " & TName & " via the attached link:" & _ \n           "<br><br>" & _ \n           "<blockquote><a href=""" & URL & """>" & TName & ".xlsm</a></blockquote>" & _ \n           "<br>" & _ \n           "<u><B>Action Required</B></u>" & _ \n           "<br><br>" & _ \n           "<LI>Please access the " & TName & " to complete QA and send a return email to the business \nuser once this has been completed.</li>" & _ \n           "<br><br>" & _'},
 {'page': 151,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 151 of 214 \n \n\u202f \n           "Thank you.<br><br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    Flag = SendToEmail(Outlook, EmailTo, CC, Subject, Body, "") \n    StatMsg Flag, "|Creating " & SheetQA & " email" \n \n    Set Outlook = Nothing \n    StatMsg True, "Closing Outlook" \nEnd Sub \n \n\'@1.40 Module - Lib_Splash \n \n\'------------------------------------------------------- \n\' \n\'   Splash Screen related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit \n \n#If Win64 Then \n    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongPtrA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long) As LongPtr \n \n    Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongPtrA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr \n#Else \n    Private Declare PtrSafe Function GetWindowLong Lib "user32" Alias "GetWindowLongA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long) As LongPtr \n \n    Private Declare PtrSafe Function SetWindowLong Lib "user32" Alias "SetWindowLongA" (ByVal hWnd As \nLongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr \n#End If \n \nPrivate Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, \nByVal lpWindowName As String) As LongPtr \nPrivate Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hWnd As LongPtr) As Long \n \n\'title bar \nPrivate Const GWL_STYLE As Long = (-16)           \'Window\'s style \nPrivate Const GWL_EXSTYLE As Long = (-20)         \'Window\'s extended style \nPrivate Const WS_CAPTION As Long = 12582912       \'Style to add a titlebar \nPrivate Const WS_EX_DLGMODALFRAME As Long = &H1   \'Controls if the window has an icon \n \nSub HideTitleBarAndBorder(Frm As Object) \n    Dim WndHandle As LongPtr \n    Dim FrmHandle As LongPtr \n \n    FrmHandle = FindWindow(vbNullString, Frm.Caption) \n \n    WndHandle = GetWindowLong(FrmHandle, GWL_STYLE) \n    WndHandle = WndHandle And (Not WS_CAPTION) \n    Call SetWindowLong(FrmHandle, GWL_STYLE, WndHandle) \n \n    WndHandle = GetWindowLong(FrmHandle, GWL_EXSTYLE) \n    WndHandle = WndHandle And Not WS_EX_DLGMODALFRAME \n    Call SetWindowLong(FrmHandle, GWL_EXSTYLE, WndHandle) \n \n    Call DrawMenuBar(FrmHandle) \nEnd Sub \n \n\'@1.41 Module - Lib_Staff \n \nOption Explicit \n \n\'Staff table details \nPrivate Const StaffNameCol As String = "D" \nPrivate Const StaffInitialCol As String = "F" \nPrivate Const StaffLanIdCol As String = "G" \nPrivate Const StaffPhoneCol As String = "H" \nPrivate Const StaffAccessCol As String = "J" \n \nPrivate Const StaffRow1 As Long = 5     \'remember to update StaffTable and LanIdTable \nPrivate Const StaffRow2 As Long = 24 \n \nPublic Const StaffTable As String = StaffNameCol & StaffRow1 & ":" & "J" & StaffRow2'},
 {'page': 152,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 152 of 214 \n \n\u202f \nPublic Const LanIdTable As String = StaffLanIdCol & StaffRow1 & ":" & StaffLanIdCol & StaffRow2 \nPublic Const EmailTable As String = "D27:I29" \n \n\'Pages \n\'Private Const PageStaff As String = "4:35"      \'Staff Page - 31 rows \n\'Private Const PageCPanel As String = "36:67"    \'Report Page - 31 rows \nPrivate Const PageStaff As String = "4:36"      \'Staff Page - 31 rows \nPrivate Const PageCPanel As String = "37:69"    \'Report Page - 31 rows \n \nPublic Function GetStaff() As Boolean \n    Dim i As Integer, Row As Integer \n \n    GetStaff = False \n \n    Row = StaffRow1 \n    With ThisWorkbook.Worksheets("HOME") \n        For i = 1 To StaffRow2 - StaffRow1 + 1 \n            If .Range(StaffLanIdCol & Row).Value = .Range("UserName").Value Then \n                .Range("FullName").Value = .Range(StaffNameCol & Row).Value \n                .Range("Initials").Value = .Range(StaffInitialCol & Row).Value \n                .Range("Phone").Value = .Range(StaffPhoneCol & Row).Value \n                .Range("Access").Value = .Range(StaffAccessCol & Row).Value \n \n                GetStaff = True \n                Exit Function \n            End If \n \n            Row = Row + 1 \n        Next i \n \n        .Range("FullName").Value = "UNAUTHORISED" \n        .Range("Initials").Value = "" \n        .Range("Phone").Value = "" \n        .Range("Access").Value = "" \n    End With \nEnd Function \n \nPublic Sub ShowStaffCell(ByVal Target As Range) \n    Dim OrgSreenUpdating As Boolean \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    Target.Select \n \n    With ThisWorkbook.Worksheets("HOME") \n        .Range(StaffTable).Interior.Color = .Range("FullName").Interior.Color \n        .Range(StaffTable).Font.Color = .Range("FullName").Font.Color \n        .Range(LanIdTable).Font.Color = .Range("LanIdColor").Font.Color \n    End With \n \n    Application.ScreenUpdating = OrgSreenUpdating \nEnd Sub \n \nPrivate Function CmpStaff(Str1 As String, Str2 As String) \n    CmpStaff = False \n    Str1 = Trim(Str1) \n    Str2 = Trim(Str2) \n \n    If Str1 = "" Then \n        CmpStaff = False \n        Exit Function \n    End If \n \n    If Str2 = "" Then \n        CmpStaff = True \n        Exit Function \n    End If \n \n    If Str1 < Str2 Then \n        CmpStaff = True \n    End If \nEnd Function \n \nPrivate Sub SwapStaff(Col As String, row1 As Long, Row2 As Long) \n    Dim Swap As String'},
 {'page': 153,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 153 of 214 \n \n\u202f \n    With ThisWorkbook.Worksheets("HOME") \n        Swap = Trim(.Range(Col & row1)) \n        .Range(Col & row1) = Trim(.Range(Col & Row2)) \n        .Range(Col & Row2) = Swap \n    End With \nEnd Sub \n \nPrivate Sub QuickSortStaff(RowLBound As Long, RowUBound As Long) \n    Dim PivotVal As String \n    Dim tmpLow As Long \n    Dim tmpHi As Long \n \n    tmpLow = RowLBound \n    tmpHi = RowUBound \n \n    With ThisWorkbook.Worksheets("HOME") \n        PivotVal = .Range(StaffNameCol & (RowLBound + RowUBound) \\ 2).Value \n \n        While (tmpLow <= tmpHi)     \'divide \n            While (CmpStaff(.Range(StaffNameCol & tmpLow), PivotVal) And tmpLow < RowUBound) \n                tmpLow = tmpLow + 1 \n            Wend \n \n            While (CmpStaff(PivotVal, .Range(StaffNameCol & tmpHi)) And tmpHi > RowLBound) \n                tmpHi = tmpHi - 1 \n            Wend \n \n            If (tmpLow <= tmpHi) Then \n                SwapStaff StaffNameCol, tmpLow, tmpHi \n                SwapStaff StaffInitialCol, tmpLow, tmpHi \n                SwapStaff StaffLanIdCol, tmpLow, tmpHi \n                SwapStaff StaffPhoneCol, tmpLow, tmpHi \n                SwapStaff StaffAccessCol, tmpLow, tmpHi \n \n                tmpLow = tmpLow + 1 \n                tmpHi = tmpHi - 1 \n            End If \n        Wend \n    End With \n \n    If (RowLBound < tmpHi) Then QuickSortStaff RowLBound, tmpHi     \'conquer \n    If (tmpLow < RowUBound) Then QuickSortStaff tmpLow, RowUBound   \'conquer \nEnd Sub \n \nPrivate Sub FormatStaff(ShowFlag As Boolean) \n    Dim i As Integer, Row As Integer \n \n    QuickSortStaff StaffRow1, StaffRow2    \'sort staff table \n \n    Row = StaffRow1 \n    With ThisWorkbook.Worksheets("HOME") \n        For i = 1 To StaffRow2 - StaffRow1 + 1 \n            .Range(StaffNameCol & Row) = UCase(.Range(StaffNameCol & Row)) \n            .Range(StaffInitialCol & Row) = UCase(.Range(StaffInitialCol & Row)) \n            .Range(StaffLanIdCol & Row) = UCase(.Range(StaffLanIdCol & Row)) \n            .Range(StaffPhoneCol & Row) = UCase(.Range(StaffPhoneCol & Row)) \n            .Range(StaffPhoneCol & Row).NumberFormat = "00 0000 0000" \n \n            Row = Row + 1 \n        Next i \n \n        .Range(StaffTable).Interior.Color = .Range("FullName").Interior.Color \n        .Range(StaffTable).Font.Color = .Range("FullName").Font.Color \n        .Range(LanIdTable).Font.Color = .Range("LanIdColor").Font.Color \n \n        On Error Resume Next \n        Row = StaffRow1 \n        For i = 1 To StaffRow2 - StaffRow1 + 1 \n            If .Range(StaffNameCol & Row).Value = "" Then \n                .Range(StaffNameCol & Row).Activate     \'pick a blank name and select it \n                Exit For \n            End If \n            Row = Row + 1 \n        Next i \n        On Error GoTo 0 \n \n        If ShowFlag = True Then'},
 {'page': 154,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 154 of 214 \n \n\u202f \n            ShowStaffCell .Range(StaffNameCol & StaffRow1) \n        End If \n    End With \nEnd Sub \n \nPublic Function StaffListToHTML() As String \n    Dim Row As Long, Count As Long, i As Long \n    Dim Header As String, Body As String, Tail As String, BgColor As String \n \n    With ThisWorkbook.Worksheets("HOME") \n        Header = "<style>" & vbLf & _ \n            "table, th, td {border: 1px solid black; border-collapse:collapse; padding-left: 10px; \npadding-right: 10px; font-family: Calibri, Verdana; font-size:10pt;}" & vbLf & _ \n            "</style>" & vbLf & _ \n            "<table>" & vbLf & _ \n            "<tr>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>#</b></th>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>Name</b></th>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>Initials</b></th>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>Lan Id</b></th>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>Phone</b></th>" & vbLf & _ \n            "<th align=""center"" bgcolor=""#DADBDC""><b>Access</b></th>" & vbLf & _ \n            "</tr>" & vbLf \n \n        Body = "" \n        Count = 1 \n        Row = StaffRow1 \n        For i = 1 To StaffRow2 - StaffRow1 + 1 \n            BgColor = "" \n \n            If .Range(StaffNameCol & Row).Value <> "" And .Range(StaffAccessCol & Row).Value <> "ADMIN" \nThen \n                Body = Body & "<tr>" & vbLf & _ \n                    "<td align=""center""" & BgColor & ">" & Count & ".</td>" & vbLf & _ \n                    "<td align=""left""" & BgColor & ">" & .Range(StaffNameCol & Row).Value & "</td>" & \nvbLf & _ \n                    "<td align=""center""" & BgColor & ">" & .Range(StaffInitialCol & Row).Value & "</td>" \n& vbLf & _ \n                    "<td align=""Left""" & BgColor & ">" & .Range(StaffLanIdCol & Row).Value & "</td>" & \nvbLf & _ \n                    "<td align=""Left""" & BgColor & ">" & Format(.Range(StaffPhoneCol & Row).Value, "00 \n0000 0000") & "</td>" & vbLf & _ \n                    "<td align=""Left""" & BgColor & ">" & .Range(StaffAccessCol & Row).Value & "</td>" & \nvbLf & _ \n                    "</tr>" & vbLf \n \n                    Count = Count + 1 \n            End If \n \n            StatPlus \n            Row = Row + 1 \n        Next i \n \n        Tail = "</table>" & vbLf \n \n        StaffListToHTML = Header & Body & Tail \n    End With \nEnd Function \n \nPublic Function BUEmailList() As String \n    Dim i As Long, Row As Long \n \n    BUEmailList = "" \n    Row = StaffRow1 \n    With ThisWorkbook.Worksheets("HOME") \n        For i = 1 To StaffRow2 - StaffRow1 + 1 \n            If .Range(StaffAccessCol & Row).Value = "USER" Then \n                If BUEmailList <> "" Then \n                    BUEmailList = BUEmailList & "; " \n                End If \n                BUEmailList = BUEmailList & .Range(StaffNameCol & Row).Value \n            End If \n \n            Row = Row + 1 \n        Next i \n    End With \nEnd Function'},
 {'page': 155,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 155 of 214 \n \n\u202f \n \nPublic Sub ShowHome(Optional Dummy As Boolean) \n    With ThisWorkbook.Worksheets("HOME") \n        If .Rows(PageCPanel).EntireRow.Hidden = True Then \n            .Shapes("Staff").TextFrame.Characters.Text = "NEXT" \n \n            .Range(PageStaff).EntireRow.Hidden = True \n            .Range(PageCPanel).EntireRow.Hidden = False \n        End If \n \n        FormatStaff False \n        LockStaff \n        .EnableSelection = xlUnlockedCells \n    End With \nEnd Sub \n \nPublic Sub UnlockStaff(Optional Dummy As Boolean) \n    If IsMasterPassword() Then \n        ThisWorkbook.Worksheets("HOME").Range(StaffTable).Locked = False \n        ThisWorkbook.Worksheets("HOME").Range(EmailTable).Locked = False \n    End If \nEnd Sub \n \nPublic Sub LockStaff(Optional Dummy As Boolean) \n    ThisWorkbook.Worksheets("HOME").Range(StaffTable).Locked = True \n    ThisWorkbook.Worksheets("HOME").Range(EmailTable).Locked = True \nEnd Sub \n \nPublic Sub Click_Staff() \n    Dim OrgSreenUpdating As Boolean \n \n    If IsBusy() And Not IsManagerPassword() Then \n        WarnBox "Please press the EDIT button to put the Tool into Edit mode in order to view the Staff \nList!" & vbLf & vbLf & "Press OK to continue...", "Next Page" \n        Exit Sub \n    End If \n \n    Application.Cursor = xlWait \n \n    OrgSreenUpdating = Application.ScreenUpdating \n    Application.ScreenUpdating = False \n \n    With ThisWorkbook.Worksheets("HOME") \n        WriteLog "Press: " & .Shapes("Staff").TextFrame.Characters.Text & " button" \n \n        If .Rows(PageStaff).EntireRow.Hidden = True Then    \'staff details are hidden \n            .Shapes("Staff").TextFrame.Characters.Text = "PREV" \n \n            FormatStaff True \n            UnlockStaff \n            .EnableSelection = xlUnlockedCells \n \n            .Range(PageStaff).EntireRow.Hidden = False \n            .Range(PageCPanel).EntireRow.Hidden = True \n        Else                                                \'cpanel is hidden \n            .Shapes("Staff").TextFrame.Characters.Text = "NEXT" \n \n            FormatStaff False \n            LockStaff \n            .EnableSelection = xlNoSelection \n \n            .Range(PageStaff).EntireRow.Hidden = True \n            .Range(PageCPanel).EntireRow.Hidden = False \n        End If \n    End With \n \n    Application.ScreenUpdating = OrgSreenUpdating \n    Application.Cursor = xlDefault \nEnd Sub \n \n\'@1.42 Module - Lib_Teradata \n \nOption Explicit \n \nPrivate DBName As String \nPrivate DBConnStr As String'},
 {'page': 156,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 156 of 214 \n \n\u202f \n \nPrivate DBConn As ADODB.Connection \nPrivate DBCmd As ADODB.Command \nPrivate DBRec As ADODB.Recordset \n \nPublic DBUsername As String \nPublic DBPasswd As String \nPublic DBCancel As Boolean \n \nDim TeraConn As ADODB.Connection \nDim TeraRec As ADODB.Recordset \nDim TeraCmd As ADODB.Command \n \nPublic TeraUsername As String \nPublic TeraPasswd As String \nPublic TeraCancel As Boolean \n \nPrivate Function GetState() As String \n    Select Case TeraConn.State \n        Case adStateClosed \n            GetState = "Closed" \n        Case adStateOpen \n            GetState = "Open" \n        Case Else \n            GetState = "State: " & TeraConn.State \n   End Select \n \n   GetState = "State: " & GetState \nEnd Function \n \nFunction OpenConn() As Boolean \n    OpenConn = False \n \n    StatZero "Connecting to Teradata" \n \n    TeradataForm.Show \n    If TeraCancel = True Then \n        StatMsg False, "Connecting to Teradata" \n        Exit Function \n    End If \n \n    DoEvents \n \n    Set TeraConn = New ADODB.Connection \n \n    On Error GoTo Err \n    TeraConn.Open "00_Teradata_Prod", TeraUsername, TeraPasswd \n \n    OpenConn = (TeraConn.State = adStateOpen) \n    StatMsg OpenConn, "Connecting to Teradata" \n \n    Exit Function \nErr: \n    StatMsg OpenConn, "Connecting to Teradata" \n    ErrBox TeraErr(TeraConn.Errors), "TeraData" \nEnd Function \n \nFunction CloseConn() As Boolean \n    If TeraConn Is Nothing Then \n        StatMsg False, "Closing Teradata" \n        Exit Function \n    End If \n \n    TeraConn.Close \n \n    CloseConn = (TeraConn.State = adStateClosed) \n \n    Set TeraConn = Nothing \n    Set TeraRec = Nothing \n \n    StatMsg CloseConn, "Closing Teradata" \nEnd Function \n \nFunction ExecuteSQL(SheetName As String, ParamArray QueryStr() As Variant) As Boolean \n    Dim N As Integer, LBnd As Integer, UBnd As Integer \n \n    StatZero "|Executing " & PCase(SheetName) & " SQL Query"'},
 {'page': 157,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 157 of 214 \n \n\u202f \n \n    If TeraConn Is Nothing Then \n        StatMsg False, "Executing " & PCase(SheetName) & " SQL Query" \n        Exit Function \n    End If \n \n    ExecuteSQL = False \n \n    Set TeraCmd = New ADODB.Command \n    Set TeraCmd.ActiveConnection = TeraConn \n    TeraCmd.CommandTimeout = 600 \n \n    LBnd = LBound(QueryStr) \n    UBnd = UBound(QueryStr) \n \n    On Error GoTo Err \n \n    For N = LBnd To UBnd \n        Set TeraRec = Nothing   \'must clear first \n \n        TeraCmd.CommandText = QueryStr(N) \n        Set TeraRec = TeraCmd.Execute(, , adAsyncExecute) \n        Do While (TeraCmd.State And adStateExecuting) = adStateExecuting \n            StatPlus \n        Loop \n    Next N \n \n    Set TeraCmd = Nothing \n \n    ExecuteSQL = True \n    StatMsg ExecuteSQL, "|Executing " & PCase(SheetName) & " SQL Query" \n \n    Exit Function \nErr: \n    StatMsg ExecuteSQL, "|Executing " & PCase(SheetName) & " SQL Query" \n    ErrBox TeraErr(TeraCmd.ActiveConnection.Errors), "TeraData" \nEnd Function \n \nFunction TeraErr(ActiveConnection As Object) As String \n    Dim ErrConn As ADODB.Error \n \n    TeraErr = "" \n \n    For Each ErrConn In ActiveConnection \n        TeraErr = TeraErr & ErrConn.Description & vbLf & vbLf \n        TeraErr = TeraErr & "Error Number: " & ErrConn.Number & vbLf \n        TeraErr = TeraErr & "Native Error Number: " & ErrConn.NativeError & vbLf & vbLf \n        TeraErr = TeraErr & "Source: " & ErrConn.Source & vbLf & vbLf \n    Next \nEnd Function \n \nFunction TeraDate(TDate As String) As String \n    Dim Res() As String \n \n    TeraDate = "" \n    If IsDate(TDate) Then \n        Res() = Split(TDate, "/") \n        TeraDate = Res(1) & "/" & Res(0) & "/" & Res(2) \n    End If \nEnd Function \n \nFunction SaveSheet(SheetName As String) As Boolean \n    Dim Row As Long, Col As Long, i As Long \n    Dim Count As Long \n    Dim Ans As Long \n \n    StatZero "|Building " & PCase(SheetName) & " Report" \n \n    SaveSheet = False \n \n    If TeraConn Is Nothing Or TeraRec Is Nothing Then \n        StatMsg False, "Building " & PCase(SheetName) & " Report" \n        Exit Function \n    End If \n \n    TeraRec.Close \n    TeraRec.CursorLocation = adUseClient'},
 {'page': 158,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 158 of 214 \n \n\u202f \n    TeraRec.Open \n \n    Row = 1 \n    Col = 1 \n    For i = 0 To TeraRec.Fields.Count - 1 \n        ThisWorkbook.Worksheets(SheetName).Cells(Row, Col).Value = TeraRec(i).Name \n \n        StatPlus \n        Col = Col + 1 \'move to next column in same row \n    Next i \n \n    If TeraRec.RecordCount > 25000 Then \n        Ans = MsgBox2("Teradata has returned " & Format(TeraRec.RecordCount, "#,##0") & " rows!" & vbLf & \nvbLf & "Do you want to continue loading data from Teradata?", vbYesNo + vbExclamation, "Teradata Warning") \n        If Ans = vbNo Then \n            SaveSheet = False \n            StatMsg SaveSheet, "Building " & PCase(SheetName) & " Report" \n            Exit Function \n        End If \n    End If \n \n    Count = 0 \n    Row = Row + 1 \n    Do While Not TeraRec.EOF \n        Col = 1 \n        For i = 0 To TeraRec.Fields.Count - 1 \n \n            If Col = 1 Then \n                ThisWorkbook.Worksheets(SheetName).Cells(Row, Col).Value = "SAPSPAU" + TeraRec(i).Value \n            ElseIf Col = 4 Then \n                ThisWorkbook.Worksheets(SheetName).Cells(Row, Col).Value = "~" + TeraRec(i).Value \n            Else \n                ThisWorkbook.Worksheets(SheetName).Cells(Row, Col).Value = TeraRec(i).Value \n            End If \n \n \n            StatPlus \n            Col = Col + 1 \n        Next i \n        TeraRec.MoveNext \n \n        Count = Count + 1 \n        Row = Row + 1 \n    Loop \n \n \n    SaveSheet = True \n    StatMsg SaveSheet, "|Building " & PCase(SheetName) & " Report" \n \nEnd Function \n \nFunction RunSQL(SheetName As String, QueryStr1 As String) As Boolean \n    Set TeraConn = Nothing \n    Set TeraRec = Nothing \n \n    RunSQL = False \n \n    If OpenConn() Then \n        If ExecuteSQL(SheetName, QueryStr1) Then \n            If SaveSheet(SheetName) Then \n                If CloseConn() Then \n                    RunSQL = True \n                    Exit Function \n                End If \n            End If \n        End If \n \n        CloseConn \n    End If \nEnd Function \nPublic Function AccessRunSQL(Path As String, PreText As String, SheetName As String, ParamArray QueryStr() \nAs Variant) As Boolean \n    Dim QueryArr() As String \n    Dim Num As Integer, LBnd As Integer, UBnd As Integer, i As Integer \n \n    LBnd = LBound(QueryStr) \n    UBnd = UBound(QueryStr)'},
 {'page': 159,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 159 of 214 \n \n\u202f \n \n    Num = UBnd - LBnd \n    ReDim QueryArr(Num) As String \n \n    For i = LBnd To UBnd \n        QueryArr(i) = QueryStr(i) \n    Next i \n \n    Set DBConn = Nothing \n    Set DBRec = Nothing \n \n   \'DBDetails "Access", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Path & ";Jet OLEDB:Database \nPassword=" & MasterPwd & ";" \n   DBDetails "Access", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Path & ";Persist Security \nInfo=False;"       \'working with access \n \n    AccessRunSQL = False \n \n    If DBOpenConn() Then \n        If DBExecuteSQL(SheetName, PreText, QueryArr) Then \n            \'If DBSaveSheet("test") Then \n                If DBCloseConn() Then \n                    AccessRunSQL = True \n                    Exit Function \n                End If \n            \'End If \n        End If \n \n        DBCloseConn     \'close on errors \n    End If \nEnd Function \n \nPrivate Function DBExecuteSQL(SheetName As String, PreText As String, QueryStr() As String) As Boolean \n    Dim N As Integer, LBnd As Integer, UBnd As Integer \n    Dim Text As String \n \n    Text = "|Executing " & PreText & PCase(SheetName) & " Query" \n   \' StatZero Text \n \n    If DBConn Is Nothing Then \n        StatMsg False, Text \n        Exit Function \n    End If \n \n    DBExecuteSQL = False \n\'Debug.Print QueryStr(0) \n    LBnd = LBound(QueryStr) \n    UBnd = UBound(QueryStr) \n \n    On Error GoTo Err \n \n    For N = LBnd To UBnd \n        Set DBRec = Nothing   \'must clear first \n \n        DBCmd.CommandText = QueryStr(N) \n        Set DBRec = DBCmd.Execute(, , adAsyncExecute) \n \n      \'  Debug.Print DBRec.RecordCount \n        Do While (DBCmd.State And adStateExecuting) = adStateExecuting \n            StatPlus \n        Loop \n    Next N \n \n    DBExecuteSQL = True \n \n    \'StatMsg DBExecuteSQL, Text \n    Exit Function \nErr: \n    On Error GoTo 0 \n \n    StatMsg DBExecuteSQL, Text \n    ErrBox DBErrorStr(DBCmd.ActiveConnection.Errors), DBName \nEnd Function \nPublic Sub DBDetails(Name As String, ConnStr As String) \n    DBConnStr = ConnStr \n    DBName = Name'},
 {'page': 160,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 160 of 214 \n \n\u202f \n    DBUsername = "" \n    DBPasswd = "" \n    DBCancel = False \n \n    Set DBConn = Nothing \n    Set DBCmd = Nothing \n    Set DBRec = Nothing \nEnd Sub \nPrivate Function DBOpenConn() As Boolean \n    Dim Text As String \n \n    DBOpenConn = False \n \n    If Not DBConn Is Nothing Then \n        DBOpenConn = True   \'already connected \n        Exit Function \n    End If \n \n    Text = "Connecting to " & DBName \n    StatZero Text \n \n    If DBUsername = "" Then \n        If DBName = "Teradata" Then \n            TeradataForm.Show \n        ElseIf DBName = "Access" Then \n            \'AccessForm.show \n        End If \n \n        If DBCancel = True Then \n            StatMsg False, Text \n            Exit Function \n        End If \n    End If \n \n    DoEvents \n \n    Set DBConn = New ADODB.Connection \n \n    On Error GoTo Err \n    \'DBConn.Open DBConnStr, DBUsername, DBPasswd \n    DBConn.Open (DBConnStr) \n \n    Set DBCmd = New ADODB.Command \n    Set DBCmd.ActiveConnection = DBConn \n    DBCmd.CommandTimeout = 600 \n \n    DBOpenConn = (DBConn.State = adStateOpen) \n    StatMsg DBOpenConn, Text \n \n    On Error GoTo 0 \n    Exit Function \nErr: \n    On Error GoTo 0 \n \n    DBUsername = ""     \'clear username on error \n    StatMsg DBOpenConn, Text \n    ErrBox DBErrorStr(DBConn.Errors), DBName \nEnd Function \n \nPrivate Function DBCloseConn() As Boolean \n    Dim Text As String \n \n    DBCloseConn = True \n \n    Text = "Closing " & DBName \n \n    If DBConn Is Nothing Then \n        DBCloseConn = False \n        StatMsg False, Text \n        Exit Function \n    End If \n \n    DBConn.Close \n \n    DBCloseConn = (DBConn.State = adStateClosed) \n \n    Set DBConn = Nothing'},
 {'page': 161,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 161 of 214 \n \n\u202f \n    Set DBCmd = Nothing \n    Set DBRec = Nothing \n \n    StatMsg DBCloseConn, Text \nEnd Function \nPrivate Function DBErrorStr(ActiveConnection As Object) As String \n    Dim ErrConn As ADODB.Error \n \n    DBErrorStr = "" \n \n    For Each ErrConn In ActiveConnection \n        DBErrorStr = DBErrorStr & ErrConn.Description & vbLf & vbLf \n        DBErrorStr = DBErrorStr & "Error Number: " & ErrConn.Number & vbLf \n        DBErrorStr = DBErrorStr & "Native Error Number: " & ErrConn.NativeError & vbLf & vbLf \n        DBErrorStr = DBErrorStr & "Source: " & ErrConn.Source & vbLf & vbLf \n    Next \nEnd Function \n \nPrivate Function DBSaveSheet(SheetName As String, ByRef updateDate As Date, Optional Shift As Integer = 0) \nAs Boolean \n    Dim Row As Long, Col As Long, StartRow As Long, i As Long \n    Dim PreText As String, Text As String \n    Dim Append As Boolean \n \n \n \n    Append = False \n    Row = LastRowInCol(SheetName, "A") \n    Row = 2 \'gaurav added \n    PreText = "Building " \n    If Row > 1 Then \n        Append = True       \'auto append \n        PreText = "Updating " \n    End If \n    StartRow = Row + 1 \n \n    Text = "|" & PreText & PCase(SheetName) & " Report" \n \n    StatZero Text \n \n    DBSaveSheet = False \n \n    If DBConn Is Nothing Or DBRec Is Nothing Then \n        StatMsg False, Text \n        Exit Function \n    End If \n \n    On Error GoTo Err \n \n    \'Col = 1 \n    \'For i = 0 To DBRec.Fields.Count - 1 \n     \'   StatPlus \n \n       \' ThisWorkbook.Worksheets(SheetName).Cells(Row, Col + Shift).Value = DBRec(i).Name \n      \'  Col = Col + 1       \'move to next column in same row \n    \'Next i \n \n    If Not Append Then \n        Row = Row + 1       \'keep column headings \n    End If \n    Do While Not DBRec.EOF \n        Col = 1 \n        For i = 0 To DBRec.Fields.Count - 1 \n            StatPlus \n            If (Col < 9) Then \n             If (Col < 5) Then \n                ThisWorkbook.Worksheets(SheetName).Cells(Row, Col + Shift).NumberFormat = "@" \n             End If \n             ThisWorkbook.Worksheets(SheetName).Cells(Row, Col + Shift).Value = DBRec(i).Value \n            Else \n                If IsNull(DBRec(i).Value) Then \n                    updateDate = Date - 1 \n                Else \n                    updateDate = DBRec(i).Value \n                End If \n \n            End If'},
 {'page': 162,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 162 of 214 \n \n\u202f \n \n            Col = Col + 1 \n \n        Next i \n        DBRec.MoveNext \n        Row = Row + 1 \n    Loop \n \n    If Append Then \n        If Row < StartRow Then \n            ThisWorkbook.Worksheets(SheetName).Rows(StartRow - 1).EntireRow.Delete  \'remove last column \nnames \n        End If \n    End If \n    On Error GoTo 0 \n \n    On Error Resume Next \n    Application.Run "Fix" & Replace(PCase(SheetName), " ", "") \n    On Error GoTo 0 \n \n    DBSaveSheet = True \n    StatMsg DBSaveSheet, Text \n    Exit Function \nErr: \n    On Error GoTo 0 \n \n    StatMsg DBSaveSheet, Text \n    ErrBox DBErrorStr(DBConn.Errors), DBName \nEnd Function \n \nPublic Function AccessRunSQLSelect(Path As String, PreText As String, SheetName As String, ByRef \nupdateDate As Date, ParamArray QueryStr() As Variant) As Boolean \n    Dim QueryArr() As String \n    Dim Num As Integer, LBnd As Integer, UBnd As Integer, i As Integer \n \n \n \n    LBnd = LBound(QueryStr) \n    UBnd = UBound(QueryStr) \n \n    Num = UBnd - LBnd \n    ReDim QueryArr(Num) As String \n \n    For i = LBnd To UBnd \n        QueryArr(i) = QueryStr(i) \n    Next i \n \n    Set DBConn = Nothing \n    Set DBRec = Nothing \n \n    \'DBDetails "Access", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Path & ";Jet OLEDB:Database \nPassword=" & MasterPwd & ";" \n    DBDetails "Access", "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & Path & ";Persist Security \nInfo=False;"       \'working with access \n \n    AccessRunSQLSelect = False \n \n    If DBOpenConn() Then \n        If DBExecuteSQL(SheetName, PreText, QueryArr) Then \n            If DBSaveSheet(SheetATORemainingAmount, updateDate) Then \n                If DBCloseConn() Then \n                    AccessRunSQLSelect = True \n                    Exit Function \n                End If \n            End If \n        End If \n \n        DBCloseConn     \'close on errors \n    End If \nEnd Function \n \nPublic Function UpdateATORemainingAmountDB() As Boolean \n \nApplication.ScreenUpdating = False    \' Prevents screen refreshing. \n \nDim cnn As ADODB.Connection \nDim rst As ADODB.Recordset'},
 {'page': 163,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 163 of 214 \n \n\u202f \nDim fld As ADODB.Field \nDim MyConn \nDim lngRow As Long \nDim lngID, LR, Upd \nDim j As Long \nDim sSQL As String \n \n \n\'StatZero "Updating" & PCase(SheetATORemainingAMount) \n \nUpdateATORemainingAmountDB = False \nSheets(SheetATORemainingAmount).Select \n \nLR = Range("A" & Rows.Count).End(xlUp).Row \nUpd = LR - 1 \n \nlngRow = 2 \nDo While lngRow <= LR \n \n    lngID = Cells(lngRow, 2).Value \n \n    sSQL = "SELECT * FROM ATO_Remaining_Amount WHERE ATO_Payment_Reference =  \'" & Trim(lngID) & "\';" \n \n    Set cnn = New ADODB.Connection \n    MyConn = "Provider = Microsoft.ACE.OLEDB.12.0;" & "Data Source =" & ThisWorkbook.Path & "\\" & \nMsDBFileName \n \n    With cnn \n    .Provider = "Microsoft.ACE.OLEDB.12.0" \n    .Open MyConn \n    End With \n \n    Set rst = New ADODB.Recordset \n    rst.CursorLocation = adUseServer \n    rst.Open sSQL, ActiveConnection:=cnn, _ \n    CursorType:=adOpenKeyset, LockType:=adLockOptimistic \n \n\'    If rst.Fields("Updated_Date") = Date Then \n\'        ErrBox "Database has been updated today already", "Access" \n\'        StatMsg UpdateATORemainingAmountDB, "" & PCase(SheetATORemainingAmount) & " updated." \n\'        WriteLog "Database: Failed " & PCase(SheetATORemainingAmount) & " update for " & Format(Now, "ddd \ndd/mm/yyyy hh:mm:ss") \n\'        Exit Function \n\'    End If \n \n\'    Debug.Print Trim(lngID) & ", " & Trim(Cells(lngRow, 6).Value) & ", " & Trim(Cells(lngRow, 7).Value) & \n", " & Trim(Cells(lngRow, 8).Value) & ", " & rst.Fields("Updated_Date") & ", " & rst.Fields("IsUpdated") \n \n    With rst \n        .Fields("Garnishee_Amount_Paid_Prev") = Trim(Cells(lngRow, 6).Value) \n        .Fields("Garnishee_Amount_Paid_Today") = Trim(Cells(lngRow, 7).Value) \n        .Fields("Amount_Remaining") = Trim(Cells(lngRow, 8).Value) \n        .Fields("Updated_Date") = CDate(Date) \n        .Fields("IsUpdated") = 1 \n \n        .Update \n    End With \n \n    \' Close the connection \n    rst.Close \n    cnn.Close \n    Set rst = Nothing \n    Set cnn = Nothing \n \n    lngRow = lngRow + 1 \nLoop \n \n\'MsgBox2 "You just updated " & Upd & " records" \n  UpdateATORemainingAmountDB = True \n  StatMsg UpdateATORemainingAmountDB, "" & PCase(SheetATORemainingAmount) & " updated." \n  WriteLog "Database: " & PCase(SheetATORemainingAmount) & " updated " & Format(Now, "ddd dd/mm/yyyy \nhh:mm:ss") \nEnd Function \n \n\'@1.43 Module - MG_Data \n \n\'-------------------------------------------------------'},
 {'page': 164,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 164 of 214 \n \n\u202f \n\' \n\'       Merchant Garnishee tab related subroutines and functions \n\' \n\'------------------------------------------------------- \n \nOption Explicit \n \nPublic Const SheetMGDATA As String = "MG DATA" \n \nPublic Sub CreateMGData(Optional Dummay As Boolean) \n    AppendNewWorksheet SheetMGDATA, "HOME" \n    HeadingMGData SheetMGDATA \nEnd Sub \n \nPublic Sub HeadingMGData(SheetName As String) \n    Dim Col As Integer \n \n    With ThisWorkbook.Worksheets(SheetName) \n \n        With .Range("A1:J1") \n            .HorizontalAlignment = xlCenter \n            .Font.Bold = True \n            .Interior.Color = RGB(155, 194, 230) \n            .Borders.LineStyle = xlContinuous \n            .Borders.Weight = xlThin \n        End With \n    End With \nEnd Sub \n \n \nFunction FetchMGData(ByVal SelectedDate As Date, ByVal selectedDay As String, ByVal AccountNumbers As \nString) As Boolean \n    Dim finalquery As String \n    If selectedDay = "" Then \n        Exit Function \n    End If \n \n    finalquery = GetQuery(AccountNumbers, selectedDay) \n \n    CreateMGData \n \n    FetchMGData = RunSQL(SheetMGDATA, finalquery) \n \n    ThisWorkbook.Worksheets(SheetMGDATA).Columns("A:J").AutoFit \nEnd Function \n \nPrivate Function GetQuery(ByVal AccountNum As String, ByVal DateRange As String) As String \n \nGetQuery = "SELECT pc.ACCT_NUMB as ACCOUNT_IDENTIFIER,pc.TRAN_A as TRANS_AMOUNT,pc.CR_DR_F as \nCREDIT_DEBET_FLAG,pc.INPT_X as TRANS_DESCRIPTION,pe.PARN_RCPT_NUMB as PARENT_RECEIPT_NUMBER," & vbLf & _ \n"pe.RCPT_NUMB as RECEIPT_NUMBER,pc.POST_D as DATE_POST " & vbLf & _ \n"FROM PVCBBJR.payt_cmpn pc,PVCBBJR.payt_evnt pe,PVCBBJR.BUSN_CHNL_CATG_CURR bc WHERE pc.payt_evnt_i = \npe.payt_evnt_i and pe.evnt_Crat_d =pc.evnt_crat_D and pe.busn_chnl_catg_i = bc.busn_chnl_catg_i" & vbLf & \n_ \n"AND pc.post_d in(" & DateRange & ") AND pc.acct_numb in (" & AccountNum & ") and substr(pe.rcpt_numb,1,1) \nnot in (\'P\');" \n \nEnd Function \n \n\'@1.44 Module - Run_1 \n \nOption Explicit \n \nPublic Const SheetLinking As String = "LINKING" \n \nPublic Const SheetDebit As String = "DEBIT" \nPublic Const SheetCredit As String = "CREDIT" \nPublic Const SheetBOI As String = "PPS" \nPublic Const SheetVerifyBOI As String = "VERIFY " & SheetBOI \nPublic Const SheetVerifyDr As String = "VERIFY DEBIT" \nPublic Const SheetVerifyCr As String = "VERIFY CREDIT" \nPublic Const SheetInterchange As String = "INTERCHANGE" \nPublic Const SheetQA As String = "QA" \nPublic Const SheetATORemaingData As String = "ATODATA" \nPublic Const SheetATORemainingAmount As String = "ATO REMAINING AMOUNT" \nPublic Const SheetATORemainingQA As String = "ATO REMAINING QA" \nPublic Const SheetLookUp As String = "LUT"'},
 {'page': 165,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 165 of 214 \n \n\u202f \n \n \nPublic Const SheetLast As String = SheetLinking     \'workaround for bug in Excel unprotect sheet in module \nProtect \n \nPublic Const Run1 As String = "RUN" \nPublic Const Run2 As String = "" \nPublic Const Run3 As String = "UPDATE" \nPublic Const Run4 As String = "EMAIL" \n \nPublic CurrentStep As String    \'used by StepForm dialog \n \nPublic Const MsDBFileName As String = "MGDB.accdb" \n \nPublic Function RunData(ByVal SelectedDate As Date, ByVal IsCkhSat As Boolean, ByVal IsCkhSun As Boolean) \nAs Boolean \n    Dim IsProcessed As Boolean \n \n    IsProcessed = False \n \n    \'Fetching records from teradata and filling in MG Data sheet \n    IsProcessed = fetchRecords(SelectedDate, IsCkhSat, IsCkhSun) \n \n    \'Processing of MG Data sheet and filling of Action sheet \n    If IsProcessed Then \n        CreateAction \n        IsProcessed = GenerateActionData \n        If IsProcessed Then \n            IsProcessed = CheckExceptions \n        End If \n    End If \n \n    \'Processing of Action sheet and generation of Back office output sheet \n    If IsProcessed Then \n        \'Update ATO Remaining Amount \n        IsProcessed = UpdateATORemainingAmount \n        CreateBOI \n        IsProcessed = BuildBOI \n    End If \n \n    \'Processing of Action sheet and generation of Interactions sheet \n    If IsProcessed Then \n        CreateInteraction \n        IsProcessed = GenerateInteractionData \n    End If \n \n    If IsProcessed Then \n         PopulateDashboard \n    End If \n \n   RunData = IsProcessed \nEnd Function \n \nPrivate Function Amount2(AmountStr As String) As String \n    If AmountStr = "0" Or AmountStr = "" Then \n        Amount2 = "" \n    Else \n        Amount2 = Format(AmountStr, "#,##0.00") \n    End If \nEnd Function \n \nPrivate Sub PopulateDashboard() \n \n    \'To populate summary for "Report" Section at Home Page \n        GetSummaryCount SheetMGDATA, "A", "MGDATA_COUNT" \n        GetCreditDebitSummary SheetMGDATA, "B", "MGDATA_CR", "C", "C", False \n        GetCreditDebitSummary SheetMGDATA, "B", "MGDATA_DR", "C", "D", False \n        ThisWorkbook.Worksheets("HOME").Range("ONE_DR").NumberFormat = "#,##0.00" \n        ThisWorkbook.Worksheets("HOME").Range("ONE_CR").NumberFormat = "#,##0.00" \n \n    \'To populate summary for "Overall- Reconcilliation" Section at Home Page \n        GetSummaryCount SheetAction, "R", "BOI_CUST_COUNT" \n        GetSummaryCount SheetAction, "AF", "BOI_ATO_COUNT" \n        GetCreditDebitSummary SheetAction, "V", "BOI_CUST_CR", "R", "cr", True \n        GetCreditDebitSummary SheetAction, "V", "BOI_CUST_DR", "R", "dr", True \n        GetCreditDebitSummary SheetAction, "AJ", "BOI_ATO_CR", "AF", "cr", True \n        GetCreditDebitSummary SheetAction, "AJ", "BOI_ATO_DR", "AF", "dr", True'},
 {'page': 166,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 166 of 214 \n \n\u202f \n        If SheetExists(SheetManual) Then \n            GetSummaryCount SheetManual, "A", "MANUAL_COUNT" \n            GetCreditDebitSummary SheetManual, "B", "MANUAL_CR", "C", "C", False \n            GetCreditDebitSummary SheetManual, "B", "MANUAL_DR", "C", "D", False \n        End If \n        ThisWorkbook.Worksheets("HOME").Range("OVERALL_RECON_DR").NumberFormat = "#,##0.00" \n        ThisWorkbook.Worksheets("HOME").Range("OVERALL_RECON_CR").NumberFormat = "#,##0.00" \n \n    \'To populate summary for "BOI- Reconcilliation" Section at Home Page \n        GetSummaryCount SheetAction, "AX", "BOI_MG_COUNT" \n        GetSummaryCount SheetAction, "R", "BOI_CUST_01_COUNT" \n        GetSummaryCount SheetAction, "AF", "BOI_ATO_01_COUNT" \n        GetCreditDebitSummary SheetAction, "AX", "BOI_MG_CR", "AT", "cr", True \n        GetCreditDebitSummary SheetAction, "AX", "BOI_MG_DR", "AT", "dr", True \n        GetCreditDebitSummary SheetAction, "V", "BOI_CUST_01_CR", "R", "cr", True \n        GetCreditDebitSummary SheetAction, "V", "BOI_CUST_01_DR", "R", "dr", True \n        GetCreditDebitSummary SheetAction, "AJ", "BOI_ATO_01_CR", "AF", "cr", True \n        GetCreditDebitSummary SheetAction, "AJ", "BOI_ATO_01_DR", "AF", "dr", True \n        ThisWorkbook.Worksheets("HOME").Range("BOI_RECON_DR").NumberFormat = "#,##0.00" \n        ThisWorkbook.Worksheets("HOME").Range("BOI_RECON_CR").NumberFormat = "#,##0.00" \n \n    \'To populate summary for "BOI- Reconcilliation" Section at Home Page \n        GetSummaryCount SheetInteraction, "A", "INTERACTION_COUNT" \n \n    With ThisWorkbook.Worksheets("HOME") \n        WriteLog "Summary: " & PadLeft("MG Data", 11) & " " & _ \n                               PadLeft(.Range("MGDATA_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("MGDATA_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("MGDATA_CR").Value), 14) \n \n        WriteLog "Summary: " & Space(11) & " " & String(4 + 14 + 14 + 2 + 1, "-") \n        WriteLog "Summary: " & PadLeft("TOTAL-1", 11) & " " & _ \n                               PadLeft(.Range("ONE_TOTAL").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("ONE_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("ONE_CR").Value), 14) \n \n        WriteLog "Summary: " \n \n        WriteLog "Summary: " & PadLeft("PPS Cust", 11) & " " & _ \n                               PadLeft(.Range("BOI_CUST_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_CUST_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_CUST_CR").Value), 14) \n        WriteLog "Summary: " & PadLeft("PPS ATO", 11) & " " & _ \n                               PadLeft(.Range("BOI_ATO_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_ATO_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_ATO_CR").Value), 14) \n        WriteLog "Summary: " & PadLeft("Manual", 11) & " " & _ \n                               PadLeft(.Range("MANUAL_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("MANUAL_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("MANUAL_CR").Value), 14) \n        WriteLog "Summary: " & Space(11) & " " & String(4 + 14 + 14 + 2 + 1, "-") \n        WriteLog "Summary: " & PadLeft("TOTAL-2", 11) & " " & _ \n                               PadLeft(.Range("OVERALL_RECON_TOTAL").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("OVERALL_RECON_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("OVERALL_RECON_CR").Value), 14) \n \n        WriteLog "Summary: " \n \n        WriteLog "Summary: " & PadLeft("PPS Acct", 11) & " " & _ \n                               PadLeft(.Range("BOI_MG_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_MG_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_MG_CR").Value), 14) \n        WriteLog "Summary: " & PadLeft("PPS Cust", 11) & " " & _ \n                               PadLeft(.Range("BOI_CUST_01_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_CUST_01_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_CUST_01_CR").Value), 14) \n        WriteLog "Summary: " & PadLeft("PPS ATO", 11) & " " & _ \n                               PadLeft(.Range("BOI_ATO_01_COUNT").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_ATO_01_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_ATO_01_CR").Value), 14) \n \n        WriteLog "Summary: " & Space(11) & " " & String(4 + 14 + 14 + 2 + 1, "-") \n        WriteLog "Summary: " & PadLeft("TOTAL-3", 11) & " " & _ \n                               PadLeft(.Range("BOI_RECON_TOTAL").Value, 4) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_RECON_DR").Value), 14) & " " & _ \n                               PadLeft(Amount2(.Range("BOI_RECON_CR").Value), 14) \n    End With'},
 {'page': 167,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 167 of 214 \n \n\u202f \nEnd Sub \n \nPrivate Function fetchRecords(ByVal SelectedDate As Date, ByVal IsCkhSat As Boolean, ByVal IsCkhSun As \nBoolean) As Boolean \n \n Dim AccountNumbers As String \n    SelectDateForm.Hide \n \n    \'Generating List of Distinct Account Numbers for LUT sheet \n    CopyDistinctAccountDetails \n \n    \'Fetching All Distinct Account Numbers from Lookup table with single quotes \n     AccountNumbers = GetAccountNumbers \n \n    \'Deleting Distinct Accounts from BA column of LUT sheet \n     Sheets("LUT").Range("BA:BA").Clear \n \n    \'Fetching the record from teradata and pasting to MG Data Sheet \n     fetchRecords = FetchMGData(SelectedDate, GetDateRange(SelectedDate, IsCkhSat, IsCkhSun), \nAccountNumbers) \n \nEnd Function \n \n\'Function to arrange dates for adding in query \nPrivate Function GetDateRange(ByVal SelectedDate As Date, ByVal IsCkhSat As Boolean, ByVal IsCkhSun As \nBoolean) As String \n    Dim selectedDates, selectedDay As String \n    selectedDates = "" \n    selectedDay = "" \n    selectedDay = FindDay(SelectedDate) \n    \'To selct for friday, and include/exclude saturday sunday \n    If (selectedDay = "friday") Then \n        Dim Friday, Saturday, Sunday As String \n         Friday = "" \n         Saturday = "" \n         Sunday = "" \n         Friday = Format(SelectedDate, "yyyy-mm-dd") \n \n \n        If (IsCkhSat = True) Then \n            Saturday = DateAdd("d", 1, Friday) \n        End If \n        If (IsCkhSun = True) Then \n            If (IsCkhSat = False) Then \n                Sunday = DateAdd("d", 2, Friday) \n            Else \n                Sunday = DateAdd("d", 1, Saturday) \n            End If \n        End If \n        selectedDates = "\'" & Friday & "\'" \n \n        If Format(Saturday, "dd/mm/yyyy") <> "" Then \n            selectedDates = selectedDates + "," + "\'" & Format(Saturday, "yyyy-mm-dd") & "\'" \n        End If \n        If Format(Sunday, "dd/mm/yyyy") <> "" Then \n            selectedDates = selectedDates + "," + "\'" & Format(Sunday, "yyyy-mm-dd") & "\'" \n        End If \n    ElseIf (selectedDay = "saturday") Or (selectedDay = "sunday") Then \n        MsgBox2 "Plase select a valid date" \n        Exit Function \n    Else \n        selectedDates = "\'" & Format(SelectedDate, "yyyy-mm-dd") & "\'" \n    End If \n    GetDateRange = selectedDates \n \nEnd Function \n \nPrivate Sub CopyDistinctAccountDetails() \n \n\'Clearing BA column of LUT sheet before copying distince columns \n Sheets("LUT").Range("BA:BA").Clear \n \n\'Copying Distinct Account numbers from column Q of LUT sheet to BA column of LUT Sheet \n Sheets("LUT").Range("Q:Q").AdvancedFilter Action:=xlFilterCopy, \nCopyToRange:=Sheets("LUT").Range("BA:BA"), Unique:=True \n \nEnd Sub'},
 {'page': 168,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 168 of 214 \n \n\u202f \n \nPrivate Function GetAccountNumbers() As String \nDim accountCount, i As Integer \nDim accountNo As String \naccountCount = 0 \naccountNo = "" \n \n\'Getting count of distinct account numbers from LUT sheet \naccountCount = Sheets("LUT").Range("BA:BA").End(xlDown).Row \n \n        For i = 2 To accountCount    \'starting count from 2 because 1st row is header \n \n            If (i = accountCount) Then \n                accountNo = accountNo & "\'" & Sheets("LUT").Cells(i, "BA").Value & "\'" \n            Else \n                accountNo = accountNo & "\'" & Sheets("LUT").Cells(i, "BA").Value & "\'" + "," \n            End If \n        Next i \n    GetAccountNumbers = accountNo \nEnd Function \n \nPublic Function FindDay(ByVal SelectedDate As Date) As String \nDim selDt As Date \n selDt = SelectedDate \n Dim selDay As String \n selDay = LCase(Format(selDt, "dddd")) \n FindDay = selDay \nEnd Function \n \nPublic Sub GetSummaryCount(SheetName As String, FromColNm As String, ToCellName As String) \nSheets(SheetName).Select \nDim lrow As Long \n    lrow = Cells(Rows.Count, FromColNm).End(xlUp).Row \n    ThisWorkbook.Worksheets("HOME").Range(ToCellName).Value = lrow - 1 \n \nEnd Sub \n \n\'*******************GetCreditDebitSummary*************************** \n\'SheetName - The Sheet Name from which we have to fetch the record \n\'FromColNm - The Column Name which we have to take the total sum(Amount Column) \n\'ToCellName - The Cell Name where we have to paste the sum \n\'CreditDebitColNm- The column which indicates credit/debit \n\'CreditDebitChar - Character used for representing credit/debit \n\'IsDevidebyZero - This parameter is used because for some of the fields we need to do calculation by \ndividing by 100 \n \n\'********************************************** \nPublic Sub GetCreditDebitSummary(SheetName As String, FromColNm As String, ToCellName As String, \nCreditDebitColNm As String, CreditDebitChar As String, IsDevidebyZero As Boolean) \n       If IsDevidebyZero Then \n        ThisWorkbook.Worksheets("HOME").Range(ToCellName).Formula = "=SUMIF(\'" & SheetName & "\'!" & \nCreditDebitColNm & ":" & CreditDebitColNm & "," & Chr(34) & CreditDebitChar & Chr(34) & ",\'" & SheetName & \n"\'!" & FromColNm & ":" & FromColNm & ")/100" \n       Else \n        ThisWorkbook.Worksheets("HOME").Range(ToCellName).Formula = "=SUMIF(\'" & SheetName & "\'!" & \nCreditDebitColNm & ":" & CreditDebitColNm & "," & Chr(34) & CreditDebitChar & Chr(34) & ",\'" & SheetName & \n"\'!" & FromColNm & ":" & FromColNm & ")" \n       End If \n    ThisWorkbook.Worksheets("HOME").Range(ToCellName).NumberFormat = "#,##0.00" \n    ThisWorkbook.Worksheets("HOME").Range(ToCellName).Value = \nAmount2(ThisWorkbook.Worksheets("HOME").Range(ToCellName).Value) \n \nEnd Sub \n \nPublic Sub FormatTable(SheetName As String, Optional Col As String = "B") \n    Dim Row As Long, Count As Long \n    Dim LastCol As String \n \n    Count = 0 \n    Row = 2 \n    With ThisWorkbook.Worksheets(SheetName) \n \n        LastCol = LastColInRow(SheetName, 1) \n \n        While Not IsEmpty(.Range(Col & Row)) \n            StatPlus'},
 {'page': 169,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 169 of 214 \n \n\u202f \n            If Count Mod 2 = 0 Then \n                .Range("A" & Row & ":" & LastCol & Row).Interior.ColorIndex = 0     \'no fill \n            Else \n                .Range("A" & Row & ":" & LastCol & Row).Interior.Color = RGB(221, 235, 247) \n            End If \n \n            If .Range(Col & Row).Value <> .Range(Col & Row + 1).Value Then \n                Count = Count + 1 \n            End If \n \n            Row = Row + 1 \n        Wend \n \n        .Range("A1:" & LastCol & "1").Interior.Color = RGB(155, 194, 230)   \'colour header \n        .Range("A1:" & LastCol & "1").Font.Color = RGB(56, 56, 56) \n \n        .Rows("1:1").HorizontalAlignment = xlCenter \n        .Rows("1:1").VerticalAlignment = xlCenter \n        .Rows("1:1").Font.Bold = True \n        .Rows("1:1").WrapText = True \n \n        If .FilterMode Then \n            .ShowAllData \n        End If \n \n        .Rows("1:1").EntireRow.AutoFit \n        .Columns("A:" & LastCol).EntireColumn.AutoFit \n \n        \'.Select     \'must select the sheet \n        \'.Range("A1").Select \n        \'Selection.AutoFilter \n \n        \'.Rows("2:2").Select \n        \'ActiveWindow.FreezePanes = True \n \n        \'.Range("B2").Select \n \n        ThisWorkbook.Worksheets("HOME").Activate    \'finish by activting HOME page \n    End With \nEnd Sub \n \nPublic Function XorWorkBook(EncFlag As Boolean) As Boolean \n    Dim Sheet As Worksheet \n \n    For Each Sheet In ThisWorkbook.Worksheets \n        If Sheet.Name = SheetMGDATA Then \n            XorSheet SheetMGDATA, EncFlag, 2, "A", "D" \n        ElseIf Sheet.Name = SheetAction Then \n            XorSheet SheetAction, EncFlag, 2, "A", "D", "H", "I", "T", "U", "W", "X", "AH", "AI", "AK", \n"AL", "AV", "AW", "AY", "AZ", "BG", "BI", "BJ" \n        ElseIf Sheet.Name = SheetBOI Then \n            XorSheet SheetBOI, EncFlag, 2, "E", "F", "H" \n            \', "I" \n        ElseIf Sheet.Name = SheetInteraction Then \n            XorSheet SheetInteraction, EncFlag, 2, "A", "C" \n        ElseIf Sheet.Name = SheetManual Then \n            XorSheet SheetManual, EncFlag, 2, "A", "D", "H", "I", "T", "U", "W", "X", "AH", "AI", "AK", \n"AL", "AV", "AW", "AY", "AZ", "BG", "BI", "BJ" \n        ElseIf Sheet.Name = SheetVerifyBOI Then \n            XorSheet SheetVerifyBOI, EncFlag, 2, "E", "F", "H" \n        ElseIf Sheet.Name = SheetLookUp Then \n            XorSheet SheetLookUp, EncFlag, 2, "A", "C", "D", "E", "G", "H", "I", "L", "M", "Q" \n        ElseIf Sheet.Name = SheetQA Then \n            XorSheet SheetQA, EncFlag, 2, "A", "C" \n        ElseIf Sheet.Name = SheetATORemainingAmount Then \n            XorSheet SheetATORemainingAmount, EncFlag, 2, "A", "B", "C", "D", "E", "F", "G", "H" \n        End If \n \n        StatPlus \n    Next Sheet \nEnd Function \n \nPublic Function Mid2(Text As String, First As Long, Last As Long) As String \n    Mid2 = Mid(Text, First, Last - First + 1) \nEnd Function \n \nPublic Function ConvertToDate(Text As String) As Date  \'convert ddmmyy to dd/mm/20yy'},
 {'page': 170,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 170 of 214 \n \n\u202f \n    ConvertToDate = CDate(Left(Text, 2) & "/" & Mid(Text, 3, 2) & "/20" & Right(Text, 2)) \nEnd Function \n \nPublic Function ConvertToDate2(Text As String) As Date  \'convert dd/mm to dd/mm/2018 \n    ConvertToDate2 = CDate(Text & "/2018") \nEnd Function \n \nPublic Function InsertIntoDB(FileRef As String, AtoPaymentRef As String, AccntNum As String, AccntNm As \nString, GarnisheeAmnt As Currency) As Boolean \n    InsertIntoDB = False \n    Dim QueryString As String \n    QueryString = "INSERT INTO ATO_Remaining_Amount ( File_Ref_Number, ATO_Payment_Reference, \nAccount_Number, Account_Name_Merchant_Garnishee, Garnishee_Amount, Garnishee_Amount_Paid_Prev, \nGarnishee_Amount_Paid_Today, Amount_Remaining, Updated_Date )" & vbLf & _ \n    "values (\'" & FileRef & "\',\'" & AtoPaymentRef & "\',\'" & AccntNum & "\',\'" & AccntNm & "\',\'" & \nGarnisheeAmnt & "\',\'0\',\'0\',\'0\',\'" & Date - 1 & "\')" \n \n    Sheets(SheetATORemainingAmount).AutoFilterMode = False \n \n    InsertIntoDB = AccessRunSQL(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", QueryString) \n    \'INSERT INTO ATO_Remaining_Amount ( File_Ref_Number, ATO_Payment_Reference, Account_Number, \nAccount_Name_Merchant_Garnishee, Garnishee_Amount, Garnishee_Amount_Paid_Prev, \nGarnishee_Amount_Paid_Today, Amount_Remaining, Updated_Date ) \n    \'AccessRunSQL(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", "select SUM(Garnishee_Amount)as testres \nfrom  [table]Garnishee_Remaining_Amount where ATO_Payment_Reference =  \'651430824913360\' ") \n    \'" & vbLf & _ \n    \' "\'" & Sheets("LUT").Cells(i, "BA").Value & "\'" \nEnd Function \n \n\'This Function will generate a sheet for updating ATO Remainig Amount data, it will delete the sheet once \ndata updated \nPublic Function UpdateATORemainingAmount() As Boolean \n \n    Dim updatedDate As Date \n \n   UpdateATORemainingAmount = GetATORemainingAmountSheet(updatedDate) \n \n \n    If (Not IsNull(updatedDate) And updatedDate < Date) Then \n \n \n        \'Adding Temporary ATO Remaining Data sheet \n        AppendNewWorksheet SheetATORemaingData, SheetAction \n \n \n \n        UpdateATORemainingAmount = False \n        Dim AtoPaymentRefCount, i As Long \n        Dim AtoPaymentRef As String \n        AtoPaymentRefCount = 0 \n        AtoPaymentRef = "" \n        Sheets(SheetATORemainingAmount).Select \n        Sheets(SheetATORemainingAmount).AutoFilterMode = False \n \n        \'Generating Data(Amount Data for Previous) for ATO Remaining Amount \n        Range("I2").FormulaR1C1 = "=(C[-3]+C[-2])" \n        Range("A1").End(xlDown).Offset(0, 8) = "-" \n        Range("I2:I2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("I2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("I:I").NumberFormat = "#,##0.00" \n \n       \'Moving the Generated data to Column F of Garnishee Remaining Amount \n        Range("I2:I2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Copy \n        Range("F2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("F:F").NumberFormat = "#,##0.00" \n \n \n \n \n        \'Clearing Older data from Today\'s Column'},
 {'page': 171,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 171 of 214 \n \n\u202f \n        Dim lrow As Long \n        lrow = Cells(Rows.Count, "G").End(xlUp).Row - 1 \n        If (lrow > 0) Then \n         Range("G2:G" & lrow).Clear \n        End If \n \n        \'Formatting The Remaining AMount sheet \n        lrow = Cells(Rows.Count, "A").End(xlUp).Row \n        Range("I2:I" & lrow).Clear \n \n        Range("E2:E" & lrow).Interior.Color = RGB(242, 242, 242) \n        Range("G:G").NumberFormat = "#,##0.00" \n \n \n       \'Generating Records for Remaing Amount through Temporary sheet \n        Sheets(SheetATORemaingData).Select \n        Sheets(SheetATORemaingData).AutoFilterMode = False \n \n        Sheets(SheetATORemaingData).Range("A:E").Clear \n \n        Sheets(SheetATORemainingAmount).Select \n \n        Range("B1:B1").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Copy \n        Sheets(SheetATORemaingData).Select \n        Range("A1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n \n \n \n        Sheets(SheetAction).Select \n        Sheets(SheetAction).AutoFilterMode = False \n \n        Range("AK1:AK1").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Copy \n        Sheets(SheetATORemaingData).Select \n        Range("B1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n \n        Sheets(SheetAction).Select \n        Sheets(SheetAction).AutoFilterMode = False \n        Range("N1:N1").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Copy \n        Sheets(SheetATORemaingData).Select \n        Range("C1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("C:C").NumberFormat = "0.00" \n \n       \'Finding the corresponding values from Action sheet \n        Range("D1").Value = "ATO Amount Matched " \n        Range("D2").FormulaR1C1 = "=IFERROR(VLOOKUP(RC[-3],C[-2]:C[-1],2,FALSE),"""")" \n        Range("A1").End(xlDown).Offset(0, 3) = "-" \n        Range("D2:D2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("D2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("D:D").NumberFormat = "0.00" \n \n       \'Summing the Amount if ATO Detail is duplicate \n        Range("E1").Value = "ATO Amount with Duplicates Summed " \n        Range("E2").FormulaR1C1 = "=SUMIFS(C[-2],C[-3],RC[-4])" \n        Range("A1").End(xlDown).Offset(0, 4) = "-" \n        Range("E2:E2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("E2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("E:E").NumberFormat = "0.00" \n \n \n        Range("E2:E2").Select'},
 {'page': 172,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 172 of 214 \n \n\u202f \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.Copy \n        Sheets(SheetATORemainingAmount).Select \n        Range("G2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("E:E").NumberFormat = "#,##0.00" \n \n        \'Removing ATO Data sheet \n        DeleteWorksheet SheetATORemaingData \n \n \n        \'calculation for H column \n        Sheets(SheetATORemainingAmount).Select \n        Range("H2").FormulaR1C1 = "=(C[-3]-(C[-2]+C[-1]))" \n        Range("A1").End(xlDown).Offset(0, 7) = "-" \n        Range("H2:H2").Select \n        Range(Selection, Selection.End(xlDown)).Select \n        Selection.FillDown \n        Selection.Copy \n        Range("H2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Range("H:H").NumberFormat = "#,##0.00" \n \n \n        ThisWorkbook.Worksheets(SheetATORemainingAmount).Columns("A:H").AutoFit \n \n \n        \'Counting Rows \n         AtoPaymentRefCount = WorksheetFunction.Subtotal(3, Sheets(SheetATORemainingAmount).Range("B:B")) \n \n \n \n \n       MoveATOExceptions (AtoPaymentRefCount) \n \n \n      UpdateATORemainingAmount = UpdateATORemainingAmountDB \n \n     ElseIf (WorksheetFunction.CountIf(Sheets(SheetATORemainingAmount).Range("H:H"), "<0") > 0) Then \n \n       MoveATOExceptions (WorksheetFunction.Subtotal(3, Sheets(SheetATORemainingAmount).Range("B:B"))) \n \n  End If \n \n \n  Sheets(SheetATORemainingAmount).Select \n  Dim lstrow As Long, j \n  lstrow = Cells(Rows.Count, "A").End(xlUp).Row \n \n\'Changing the background color to red if value is -ve \n  For j = 1 To lstrow \n    If (Sheets(SheetATORemainingAmount).Range("H" & j).Value < 0) Then \n    Sheets(SheetATORemainingAmount).Range("H" & j).Interior.Color = RGB(255, 0, 0) \n    End If \n  Next j \n \n   lrow = Cells(Rows.Count, "A").End(xlUp).Row \n   With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        With .Range("A1:D" & lrow) \n            .HorizontalAlignment = xlCenter \n        End With \n        With .Range("A1:H" & lrow) \n                \'.Font.Bold = True \n                \'.Interior.Color = RGB(146, 208, 80) \n                .Borders.LineStyle = xlContinuous \n                .Borders.Weight = xlThin \n                .NumberFormat = "#,##0.00" \n                .Font.Size = "9" \n        End With \n   End With \n \n \n \nEnd Function \n \n\'luc - to update \nPublic Function GetATORemainingAmountSheet(ByRef updatedDate As Date) As Boolean'},
 {'page': 173,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 173 of 214 \n \n\u202f \n    \'Filling data To Remaining Amount Sheet from Access Database \n    Dim SelectQuery As String \n \n    With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        While Not IsEmpty(.Range("A" & 2)) \n            .Rows(2).EntireRow.Delete \n            StatPlus \n        Wend \n    End With \n \n    SelectQuery = "SELECT \nFile_Ref_Number,ATO_Payment_Reference,Account_Number,Account_Name_Merchant_Garnishee,Garnishee_Amount,Garn\nishee_Amount_Paid_Prev,Garnishee_Amount_Paid_Today,Amount_Remaining,Updated_Date FROM ATO_Remaining_Amount \nORDER BY ATO_Remaining_Amount.ID ASC;" \n \n    GetATORemainingAmountSheet = AccessRunSQLSelect(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", \nupdatedDate, SelectQuery) \nEnd Function \n \n\'This method will move all the exceptions from action tab to Manual tab \nPrivate Sub MoveATOExceptions(AtoPaymentRefCount As Long) \n \n    Dim itemCount As Long \n    Dim cl As Range, Rng As Range \n \n    Sheets(SheetATORemainingAmount).Select \n \n   \'Applying filter on Garnishee Remaining Amount Sheet to check Remaining Amount <=0 \n    ActiveSheet.Columns("A:H").AutoFilter Field:=8, Criteria1:="<=0.00" \n \n \n   itemCount = WorksheetFunction.Subtotal(3, Sheets(SheetAction).Range("A:A")) \n \n   Sheets(SheetATORemainingAmount).Select \n \n   Set Rng = Range("B2:B" & AtoPaymentRefCount) \n    If WorksheetFunction.Subtotal(3, Sheets(SheetATORemainingAmount).Range("A:A")) > 1 Then \n        If Not SheetExists(SheetManual) Then \n            CreateManual \n        End If \n \n \n \n   Sheets(SheetATORemainingAmount).Select \n \n   For Each cl In Rng.SpecialCells(xlCellTypeVisible) \n     With Worksheets(SheetAction) \n        .AutoFilterMode = False \n        With .Range("A1:BJ" & itemCount) \n            .AutoFilter \n            .AutoFilter Field:=37, Criteria1:="=" & cl \n            If (WorksheetFunction.Subtotal(3, Sheets(SheetAction).Range("A:A")) > 1) Then \n                MoveExc \n            End If \n        End With \n     End With \n   Next cl \n  End If \n\'Removing filters from Action sheet \nSheets(SheetAction).AutoFilterMode = False \nSheets(SheetATORemainingAmount).AutoFilterMode = False \n \nIf SheetExists(SheetManual) Then \n    ThisWorkbook.Worksheets(SheetManual).Columns("A:BJ").AutoFit \nEnd If \n \nEnd Sub \n \n \nPrivate Sub MoveExc() \nDim Rng As Range \n  Sheets(SheetAction).Select \n            \'Copying data from action sheet \n            Sheets(SheetAction).Range(("A2:BJ2"), Selection.End(xlDown)).Copy \n \n            Sheets(SheetManual).Select'},
 {'page': 174,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 174 of 214 \n \n\u202f \n            Dim lrow As Long \n            lrow = Cells(Rows.Count, "A").End(xlUp).Row + 1 \n \n            \'Pasting data to Manual sheet/ \n            Sheets(SheetManual).Range("A" & lrow).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, \nSkipBlanks:=False, Transpose:=False \n \n            Sheets(SheetManual).Range("B:B").NumberFormat = "0.00" \n \n            \'Adding comments to In Scope column \n            Columns("G").Replace What:="-*", Replacement:="ATO REMAINING" \n \n \n \n            Sheets(SheetAction).Select \n \n            \'Removing exception records from Action sheet \n            Set Rng = Sheets(SheetAction).AutoFilter.Range \n            Rng.Offset(1, 0).Resize(Rng.Rows.Count - 1).Delete Shift:=xlUp \nEnd Sub \n \nPublic Function DeleteRecord(atoRef As String, RowNum As Integer) As Boolean \n \n   DeleteRecord = False \n   Dim QueryString As String \n \n   StatZero "ATO Remaining Deleted successfully." \n \n   \'First Insert into Bkp table \n   QueryString = "INSERT INTO ATO_Remaining_Amount_Archive " & _ \n                  "SELECT File_Ref_Number, ATO_Payment_Reference, Account_Number, \nAccount_Name_Merchant_Garnishee, Garnishee_Amount, Garnishee_Amount_Paid_Prev, \nGarnishee_Amount_Paid_Today, Amount_Remaining, Updated_Date,IsUpdated FROM ATO_Remaining_Amount WHERE \nATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n \n   \'Insert record to backup table \n   If (AccessRunSQL(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", QueryString)) Then \n    QueryString = "UPDATE ATO_Remaining_Amount_Archive set Deleted_By = \'" & \nThisWorkbook.Worksheets("HOME").Range("UserName").Value & "\', Updated_Date = \'" & CDate(Date) & "\'  WHERE \nATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n    DeleteRecord = AccessRunSQL(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", QueryString) \n   End If \n \n   \'delete from main table \n   If (DeleteRecord) Then \n    QueryString = "DELETE * FROM ATO_Remaining_Amount WHERE ATO_Payment_Reference =\'" & Trim(atoRef) & "\'" \n    DeleteRecord = AccessRunSQL(ThisWorkbook.Path & "\\" & MsDBFileName, "", "", QueryString) \n   End If \n \n   WriteLog "Delete: " & ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("A" & RowNum).Value \n \n   \'Delete record from worksheet \n   ThisWorkbook.Worksheets(SheetATORemainingAmount).Rows(RowNum).Delete \n \n   StatMsg True, "ATO Remaining Deleted successfully." \n \nEnd Function \n \n\'@1.45 Module - Run_2 \n \nOption Explicit \n \nPublic Function CheckEmailAdd() \n    CheckEmailAdd = True \n \n    With ThisWorkbook.Worksheets("HOME") \n        If .Range("EMAIL_MAN").Value = "" Then \n            ErrBox "The Managers email address is missing in the Staff List page!" & vbLf & vbLf & "Please \ngo the Staff List page and enter an email address for the Manager...", "Email Missing" \n            CheckEmailAdd = False \n        ElseIf .Range("EMAIL_POR").Value = "" Then \n            ErrBox "The Point of Reference email address is missing in the Staff List page!" & vbLf & vbLf \n& "Please go the Staff List page and enter an email address for the Point of Reference...", "Email \nMissing" \n            CheckEmailAdd = False \n        End If \n    End With'},
 {'page': 175,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 175 of 214 \n \n\u202f \nEnd Function \n \nFunction SendEmails(Optional Dummy As Boolean) As Boolean \n    Dim EmailTo As String, CC As String, Subject As String, Body As String, Sig As String \n    Dim AsOfDate As String, RunDate As String, Amount As String \n    Dim ManEmail As String, POREmail As String \n    Dim Outlook As Object \n    Dim Flag As Boolean \n \n    SendEmails = False \n    StatZero "Starting Outlook" \n \n    StatPlus \n    On Error Resume Next \n    Set Outlook = CreateObject("Outlook.Application") \n    Outlook.ActiveWindow.WindowState = 1 \n    On Error GoTo 0 \n    StatPlus \n \n    If Outlook Is Nothing Then \n        StatMsg False, "Starting Outlook" \n        ErrBox "Failed to start OutLook!", "OutLook" \n        Exit Function \n    End If \n    StatMsg True, "Starting Outlook" \n \n    Sig = GetSignature() \n \n    RunDate = Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd/mm/yyyy") \n    AsOfDate = Format(ThisWorkbook.Worksheets("HOME").Range("ASOFDATE").Value, "dd/mm/yyyy") \n \n    ManEmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_MAN").Value \n    POREmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_POR").Value \n \n    StatZero "Creating " & SheetBOI & " email" \n \n    EmailTo = ManEmail \n    CC = POREmail \n    Subject = GetToolName() & " Bulk Payment Upload " & RunDate \n \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Manager/Delegate,<br>" & _ \n           "<br>" & _ \n           "The Bulk Payment File for the " & GetToolName() & " " & RunDate & " has been uploaded to the \nPega Payment System (PPS).<br><br>" & _ \n           "<b><u>Your Action</u></b><br><br>" & _ \n            "<ul><li>Access the <a href=""" & Replace("file:///" & GetDailyFilePath(), "\\", "/") & """>" & \nGetFName(GetDailyFilePath()) & "</a> and verify the attached Bulk Payment Upload via the " & \nSheetVerifyBOI & " worksheet.<br><br></li>" & _ \n            "<li>Go to <a href=""" & OpenURL_PPS & """>PPS SSO</a> and Approve or Reject the Bulk Payment \nUpload.</li></ul>" & _ \n           "" & _ \n           "Thank you for your action.<br><br>" & _ \n           Sig & _ \n           "<br></font>" \n \n        Flag = SendToEmail(Outlook, EmailTo, CC, Subject, Body, AttachBOI()) \n        StatMsg Flag, "Creating " & SheetBOI & " email" \n        If Not Flag Then Exit Function \n \n    Set Outlook = Nothing \n    SendEmails = True \n    StatMsg SendEmails, "Closing Outlook" \nEnd Function \n \nPrivate Function AttachBOI() As String \n    Dim NewBook As Workbook \n    Dim Name As String \n \n    Name = "MG " & SheetBOI & " Bulk Upload " & \nFormat(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd.mm.yyyy") \n    AttachBOI = GetPPSFilePath(".xlsx") \n    Set NewBook = Workbooks.Add \n \n    With NewBook \n        .title = Name & " Upload"'},
 {'page': 176,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 176 of 214 \n \n\u202f \n        .Subject = Name \n \n        ThisWorkbook.Worksheets(SheetBOI).Copy After:=.Sheets(.Worksheets.Count) \n \n        With NewBook.Worksheets(SheetBOI) \n            .Unprotect Password:=MasterPwd \n            .Range("A1:" & ColLetter(.Columns.Count) & .Rows.Count).Locked = True \n            .Range("A2:" & ColLetter(.Columns.Count) & .Rows.Count).ClearFormats \n            .Range("A2:" & ColLetter(.Columns.Count) & .Rows.Count).NumberFormat = "@" \n \n            .EnableSelection = xlNoRestrictions \n        End With \n \n \n        Application.DisplayAlerts = False \n        .Sheets(1).Delete \n        Application.DisplayAlerts = True \n \n        .SaveAs FileName:=AttachBOI, Password:=GetHash(Hash_BOI) \n        .Close \n    End With \nEnd Function \n \nPublic Sub AddVerify(Optional Dummy As Boolean) \n    StatZero "Adding blank Verify Reports" \n \n    AddVerifyBOI \n \n    StatMsg True, "Adding blank Verify Reports" \nEnd Sub \n \nFunction BackupDB() As Boolean \n    Dim Path As String, BackupPath As String, Files As String, FileName As String, FileExt As String \n    Dim DateStr As String, UniqueBackupPath As String, FileBits() As String \n \n \n    BackupDB = False \n \n    FileBits = Split(MsDBFileName, ".") \n    FileName = FileBits(0) \n    FileExt = "." & FileBits(1) \n \n    Path = Application.ThisWorkbook.Path \n \n    BackupPath = Path & "\\Backup Database" \n    Files = FileName & "*" & FileExt \n \n    If Dir(BackupPath, vbDirectory) = "" Then \n        On Error GoTo Err1 \n        MkDir BackupPath \n        On Error Resume Next \n    End If \n \n    DateStr = Format(Date, " yyyymmdd") & "_" & Format(Time(), "HHmmss") \n    UniqueBackupPath = GetUniqueFileName(FileName & DateStr, FileExt, BackupPath) \n \n \n    StatZero "Backing up " & FileName & FileExt \n    StatPlus \n    On Error GoTo Err2 \n    FileCopy Path & "\\" & FileName & FileExt, UniqueBackupPath \n    On Error GoTo 0 \n    StatPlus \n \n    BackupDB = True \n \n    StatMsg BackupDB, "Backing up " & FileName & FileExt \n    Exit Function \nErr1: \n    On Error GoTo 0 \n    WarnBox "Unable to create backup folder " & BackupPath & "!", "Backup" \n    Exit Function \n \nErr2: \n    On Error GoTo 0 \n    StatMsg BackupDB, "Backing up " & FileName & FileExt \n    StatReset'},
 {'page': 177,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 177 of 214 \n \n\u202f \n    WarnBox "Unable to copy database " & Path & "\\" & FileName & FileExt & " to Backup Database folder!", \n"backup" \nEnd Function \n \nPrivate Sub AddBalCheck() \n    Dim Row As Long \n \n    With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        .Range("I1").Value = "Total Paid" \n        .Range("J1").Value = "Balance Check" \n        .Range("K1").Value = "Must be $0.00" \n \n        Row = 2 \n        While Not IsEmpty(.Range("H" & Row)) \n            .Range("I" & Row).Formula = "=F" & Row & "+G" & Row & "" \n            .Range("J" & Row).Formula = "=E" & Row & "-F" & Row & "-G" & Row & "" \n            .Range("K" & Row).Formula = "=H" & Row & "-J" & Row & "" \n \n            StatPlus \n            Row = Row + 1 \n        Wend \n \n        ThisWorkbook.Worksheets(SheetATORemainingAmount).Select \n \n        .Columns("G:G").Select \n        Selection.Copy \n        .Columns("I:K").Select \n        Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, \nTranspose:=False \n        Application.CutCopyMode = False \n \n        .Range("I1:K" & Row - 1).Interior.Color = RGB(217, 217, 217) \n        .Columns("I:K").AutoFit \n \n        .Range("E:H").NumberFormat = "0.00" \n    End With \nEnd Sub \n \nPublic Sub DelBalCheck(Optional Dummy As Long) \n    ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("I:I,J:J,K:K").Delete \nEnd Sub \n \nPublic Function ATOCheckComplete() As Boolean \n    Dim sText As String \n \n    sText = "ATO Remaining QA balances 0.00?" \n    StatZero sText \n \n    ATOCheckComplete = False \n \n    If Not SheetExists(SheetATORemainingQA) Then Exit Function \n \n    With ThisWorkbook.Worksheets(SheetATORemainingQA) \n        If .Range("BALANCE_1").Value <> 0# Or .Range("BALANCE_2").Value <> 0# Or .Range("BALANCE_3").Value \n<> 0# Then \n            StatMsg ATOCheckComplete, sText \n            ErrBox "One or more balances in the " & PCase(SheetATORemainingQA) & " report is not 0.00!", \n"ATO Check" \n            Exit Function \n        End If \n    End With \n \n    ATOCheckComplete = True \n    StatMsg ATOCheckComplete, sText \nEnd Function \n \nPublic Function CreateATORemainingQA() As Boolean \n    Dim Row As Long, RowRec As Long, Count As Long, i As Long \n    Dim SumFormula As String, sText As String \n    Dim NotPaid As Double \n \n    CreateATORemainingQA = False \n \n    sText = "Building " & PCase(SheetATORemainingQA) & " report" \n    StatZero sText \n \n    AppendNewWorksheet SheetATORemainingQA, SheetATORemainingAmount'},
 {'page': 178,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 178 of 214 \n \n\u202f \n \n    AddBalCheck \n \n    With ThisWorkbook.Worksheets(SheetATORemainingQA) \n        RowRec = 1 \n        .Range("A" & RowRec).Value = "ATO Remaining - Reconciliation QA check" \n        .Range("A" & RowRec).Font.Size = 20 \n        .Range("A" & RowRec).Font.Bold = True \n        .Rows(RowRec).Interior.Color = RGB(192, 192, 192) \n        .Rows(RowRec).VerticalAlignment = xlCenter \n        .Rows(RowRec).RowHeight = 35.25 \n        .Range("A" & RowRec & ":F" & RowRec).Merge \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Date" \n        .Range("B" & RowRec).Formula = "=RUNDATE" \n \n        RowRec = RowRec + 2 \n        .Range("B" & RowRec).Value = "Amount" \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Amount Paid to ATO (Dashboard)" \n        .Range("B" & RowRec).Formula = "=BOI_ATO_01_CR" \n        .Range("B" & RowRec).Name = "ATO_PAID_DASHBOARD"        \'B6 \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Garnishee Amount Paid (Today)" \n        .Range("B" & RowRec).Formula = "=SUM(\'" & SheetATORemainingAmount & "\'!G:G)" \n        .Range("B" & RowRec).Name = "GARNISHEE_PAID_TODAY"      \'B7 \n        \'.Range("B" & RowRec).Formula = "=SUMIF(\'" & SheetATORemainingAmount & "\'!H:H, "">0.0"", \'" & \nSheetATORemainingAmount & "\'!G:G)" \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Balance Should be Nil" \n        .Range("B" & RowRec).Formula = "=ATO_PAID_DASHBOARD-GARNISHEE_PAID_TODAY" \n        .Range("B" & RowRec).Name = "BALANCE_1" \n        .Range("A" & RowRec & ":B" & RowRec).Interior.Color = RGB(192, 192, 192) \n \n        RowRec = RowRec + 2 \n        .Range("B" & RowRec).Value = "Amount" \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Amount Remaining" \n        .Range("B" & RowRec).Formula = "=SUMIF(\'" & SheetATORemainingAmount & "\'!H:H, "">0.0"")"    \'B12 \n        .Range("B" & RowRec).Name = "AMOUNT_REMAINING" \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Overall Remaining MG Balances" \n        .Range("B" & RowRec).Formula = "=SUM(\'" & SheetATORemainingAmount & "\'!J:J)"                \'B13 \n        .Range("B" & RowRec).Name = "OVERALL_REMAINING" \n        \'.Range("B" & RowRec).Formula = "=SUMIF(\'" & SheetATORemainingAmount & "\'!H:H, "">0.0"", \'" & \nSheetATORemainingAmount & "\'!J:J)" \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Balance Should be Nil" \n        .Range("B" & RowRec).Formula = "=AMOUNT_REMAINING-OVERALL_REMAINING" \n        .Range("B" & RowRec).Name = "BALANCE_2" \n        .Range("A" & RowRec & ":B" & RowRec).Interior.Color = RGB(192, 192, 192) \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Previous Business Day Amount Remaining " \n        .Range("B" & RowRec).Interior.Color = RGB(255, 230, 153) \n        .Range("B" & RowRec).Name = "PREV_AMOUNT_REMAINING"                 \'B17 \n        .Range("B" & RowRec).Locked = False \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Garnishee Amount Paid (Today)" \n        .Range("B" & RowRec).Formula = "=GARNISHEE_PAID_TODAY"              \'B18 \n        .Range("B" & RowRec).Name = "GARNISHEE_PAID_TODAY_2" \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Not paid due to exception" \n        .Range("B" & RowRec).Name = "NOT_PAID_EXCEPTION"                    \'B19 \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Actual Amount paid" \n        .Range("B" & RowRec).Name = "ACTUAL_AMOUNT_PAID"                    \'B20'},
 {'page': 179,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 179 of 214 \n \n\u202f \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Amts removed from tool - see below" \n        .Range("B" & RowRec).Name = "AMOUNT_REMOVED_TOOL"                   \'B21 \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Total" \n        .Range("B" & RowRec).Formula = "=PREV_AMOUNT_REMAINING-GARNISHEE_PAID_TODAY_2-NOT_PAID_EXCEPTION-\nACTUAL_AMOUNT_PAID-AMOUNT_REMOVED_TOOL" \n        .Range("B" & RowRec).Name = "TOTAL_AMT_REMAINING"      \'B23 \n \n        RowRec = RowRec + 1 \n        .Range("A" & RowRec).Value = "Amount Remaining" \n        .Range("B" & RowRec).Formula = "=AMOUNT_REMAINING" \n        .Range("B" & RowRec).Name = "AMOUNT_REMAINING_2"        \'B24 \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Balance Should be Nil" \n        .Range("B" & RowRec).Formula = "=TOTAL_AMT_REMAINING-AMOUNT_REMAINING_2" \n        .Range("B" & RowRec).Name = "BALANCE_3" \n        .Range("A" & RowRec & ":B" & RowRec).Interior.Color = RGB(192, 192, 192) \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Closed Garns - Amt Remaining removed from tool " & \nFormat(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd/mm") \n \n        NotPaid = 0# \n        Count = 0 \n        Row = 2 \n        While Not IsEmpty(ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("A" & Row)) \n            If ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("H" & Row).Interior.Color = RGB(255, \n0, 0) Then \n                Count = Count + 1 \n                RowRec = RowRec + 1 \n                NotPaid = NotPaid + ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("H" & \nRow).Value \n \n                .Range("A" & RowRec).Value = ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("A" & \nRow).Value \n                .Range("B" & RowRec).Value = ThisWorkbook.Worksheets(SheetATORemainingAmount).Range("G" & \nRow).Value \n                .Range("B" & RowRec).Name = "COUNT_" & Count \n            End If \n \n            Row = Row + 1 \n        Wend \n \n        SumFormula = "" \n        For i = 1 To Count \n            If Len(SumFormula) > 0 Then \n                SumFormula = SumFormula & "+" \n            End If \n            SumFormula = SumFormula & "COUNT_" & i \n        Next i \n        If Len(SumFormula) > 0 Then \n            SumFormula = "=" & SumFormula \n        End If \n \n        RowRec = RowRec + 2 \n        .Range("A" & RowRec).Value = "Total" \n        .Range("B" & RowRec).Formula = SumFormula \n        .Range("B" & RowRec).NumberFormat = "#,##0.00" \n        .Range("B" & RowRec).Name = "TOTAL_REMOVED" \n        If .Range("B" & RowRec).Value = "" Then \n            .Range("B" & RowRec).Value = 0 \n        End If \n \n        .Range("AMOUNT_REMOVED_TOOL").Formula = "=TOTAL_REMOVED" \n        .Range("NOT_PAID_EXCEPTION").Value = NotPaid \n \n        .Columns("B").NumberFormat = "#,##0.00" \n        .Cells.EntireColumn.AutoFit \n \n        .Range("B3").NumberFormat = "dd/mm/yyyy" \n \n        If .Range("TOTAL_REMOVED").Value <> 0 Then \n            If Not EmailATORemaining() Then'},
 {'page': 180,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 180 of 214 \n \n\u202f \n                CreateATORemainingQA = False \n                StatMsg False, sText \n                Exit Function \n            End If \n        End If \n    End With \n \n    CreateATORemainingQA = True \n \n    StatMsg True, sText \nEnd Function \n \nFunction FindPOSNo(SAPAcc As String) As String \n    Dim Row As Long, pos As Long \n \n    FindPOSNo = "" \n \n    With ThisWorkbook.Worksheets(SheetLookUp) \n        Row = 2 \n        While Not IsEmpty(.Range("A" & Row)) \n            If .Range("D" & Row).Value = SAPAcc And Left(.Range("I" & Row).Value, 3) = "POS" Then \n                If FindPOSNo <> "" Then \n                    FindPOSNo = FindPOSNo & ", " \n                End If \n                FindPOSNo = FindPOSNo & .Range("I" & Row).Value \n            End If \n \n            Row = Row + 1 \n        Wend \n \n        FindPOSNo = Replace(FindPOSNo, "POS", "POS ") \n        pos = InStrRev(FindPOSNo, ",") \n        If pos > 1 Then \n            FindPOSNo = Left(FindPOSNo, pos - 1) & " and" & Right(FindPOSNo, Len(FindPOSNo) - pos) \n        End If \n    End With \nEnd Function \n \nFunction FindOrgAccount(Acc As String, ByRef POSNo As String) As String \n    Dim Row As Long \n \n    FindOrgAccount = "" \n \n    With ThisWorkbook.Worksheets(SheetManual) \n        Row = 2 \n        While Not IsEmpty(.Range("A" & Row)) \n            If .Range("A" & Row).Value = Acc Then \n                FindOrgAccount = Replace(.Range("T" & Row).Value, "-", "") & .Range("U" & Row).Value \n \n                POSNo = FindPOSNo(Acc) \n \n\'                POSNo = ExtractPOS(.Range("D" & Row).Value) \n\'                POSNo = Replace(POSNo, "~", "") \n\'                While InStr(1, POSNo, "  ") > 0 \n\'                    POSNo = Replace(POSNo, "  ", " ") \n\'                Wend \n                Exit Function \n            End If \n \n            Row = Row + 1 \n        Wend \n    End With \nEnd Function \n \nPrivate Function ExtractPOS(ByVal POSNo As String) As String \n    Dim pos As Long \n \n    pos = InStrRev(POSNo, " ") \n    If pos > 0 Then \n        POSNo = Mid(POSNo, 1, pos - 1) \n        pos = InStrRev(POSNo, " ") \n \n        If pos > 0 Then \n            POSNo = Mid(POSNo, 1, pos - 1) \n        End If \n    End If'},
 {'page': 181,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 181 of 214 \n \n\u202f \n    ExtractPOS = POSNo \nEnd Function \n \nPrivate Function EmailATORemaining() As Boolean \n    Dim Row As Long \n    Dim Customer As String, Account As String, OrgAccount As String, RefNo As String, POSNo As String \n \n    EmailATORemaining = False \n \n    With ThisWorkbook.Worksheets(SheetATORemainingAmount) \n        Row = 2 \n        While Not IsEmpty(.Range("A" & Row)) \n            If .Range("H" & Row).Interior.Color = RGB(255, 0, 0) Then \n                Customer = Replace(.Range("D" & Row).Value, "Merchant Garnishee  ", "") \n                Account = Replace(.Range("C" & Row).Value, "SAPSPAU", "") \n                OrgAccount = FindOrgAccount(.Range("C" & Row).Value, POSNo) \n                RefNo = .Range("A" & Row).Value \n \n                If Not SendATORemainingEmail(Customer, Account, OrgAccount, RefNo, POSNo) Then Exit \nFunction \n            End If \n \n            Row = Row + 1 \n        Wend \n    End With \n \n    EmailATORemaining = True \nEnd Function \n \nPrivate Function SendATORemainingEmail(Customer As String, Account As String, OrgAccount As String, RefNo \nAs String, POSNo As String) As Boolean \n    Dim EmailTo As String, CC As String, Subject As String, Body As String, Sig As String, TName As \nString, URL As String \n    Dim RunDate As String, Amount As String \n    Dim ManEmail As String, POREmail As String \n    Dim Outlook As Object \n    Dim Flag As Boolean \n \n    SendATORemainingEmail = False \n \n    StatZero "Starting Outlook" \n \n    StatPlus \n    On Error Resume Next \n    Set Outlook = CreateObject("Outlook.Application") \n    Outlook.ActiveWindow.WindowState = 1 \n    On Error GoTo 0 \n    StatPlus \n \n    If Outlook Is Nothing Then \n        StatMsg False, "Starting Outlook" \n        ErrBox "Failed to start OutLook!", "OutLook" \n        Exit Function \n    End If \n    StatMsg True, "Starting Outlook" \n \n    Sig = GetSignature() \n \n    RunDate = Format(ThisWorkbook.Worksheets("HOME").Range("RUNDATE").Value, "dd/mm/yyyy") \n \n    ManEmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_MAN").Value \n    POREmail = ThisWorkbook.Worksheets("HOME").Range("EMAIL_POR").Value \n \n    StatZero "|Creating Merchant email" \n \n    EmailTo = ThisWorkbook.Worksheets("HOME").Range("EMAIL_MERCHANT").Value \n    CC = POREmail & ";" & ManEmail \n    Subject = "Merchant Facility - Request for reinstatement of settlement account - " & Customer & " / \nOur ref: " & RefNo & "" \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Team,<br>" & _ \n           "<br>" & _ \n           "The Notice to Pay Money to the Commissioner of Taxation in respect of the following Merchant \nFacility has been satisfied:" & _ \n           "<br><br>" & _'},
 {'page': 182,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 182 of 214 \n \n\u202f \n           "<blockquote><table border=0 cellspacing=0 cellpadding=2><tr><td align=right>Trading \nname:</td><td>" & Customer & "</td></tr>" & _ \n           "<tr><td align=right>Merchant Facility Number:</td><td><font \nstyle=""color:red"">5353000000000000</font></td></tr></table></blockquote>" & _ \n           "<br>" & _ \n           "<u><B>Action Required</B></u>" & _ \n           "<br><br>" & _ \n           "<li>Please amend the Merchant Facility to reinstate the merchant\'s original Settlement Account \n- " & Left(OrgAccount, 6) & " " & Mid(OrgAccount, 7) & ".</li>" & _ \n           "<br><br>" & _ \n           "<i>Please note: the Suspense Account no. " & Left(Account, 6) & " " & Mid(Account, 7) & " was \nopened as a temporary measure to accommodate the ATO Garnishee and will be closed tomorrow, " & \nFormat(DateAdd("d", 1, Date), "dd/mm/yyyy") & ". As such, if the original account cannot be reinstated, \nalternative arrangements will need to be made by your office regarding the " & POSNo & " payments.</i>" & \n_ \n           "<br><br>" & _ \n           "Thanks in advance for your assistance.<br><br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    Flag = SendToEmail(Outlook, EmailTo, CC, Subject, Body, "") \n    StatMsg Flag, "|Creating Merchant email" \n    If Not Flag Then \n        Set Outlook = Nothing \n        Exit Function \n    End If \n \n    TName = Replace(ThisWorkbook.Worksheets("HOME").Range("I1").Value, "TOOL", "Tool") \n    URL = "file://" & ThisWorkbook.Path & "\\" & ThisWorkbook.Name \n \n    StatZero "|Creating Manager email" \n \n    EmailTo = POREmail & ";" & ManEmail \n    CC = "" \n    Subject = "Merchant Garnishee Tool - Notices Paid in Full" \n    Body = "<font style=" & Chr(34) & "font-family: Calibri, Verdana; font-size:11pt; font-style: normal" \n& Chr(34) & ">" & _ \n           "Hi Team,<br>" & _ \n           "<br>" & _ \n           "The following ATO Merchant Garnishee has been paid in full:" & _ \n           "<br><br>" & _ \n           "<blockquote><table border=0 cellspacing=0 cellpadding=2><tr><td align=right>Trading \nname:</td><td>" & Customer & "</td></tr>" & _ \n           "<tr><td align=right>Reference No.:</td><td>" & RefNo & " </td></tr>" & _ \n           "<tr><td align=right>Suspense Account no.:</td><td>" & Left(Account, 6) & " " & Mid(Account, 7) \n& " </td></tr></table></blockquote>" & _ \n           "<br>" & _ \n           "<font style=""color:green"">The " & Left(Account, 6) & " " & Mid(Account, 7) & " account has \nnow been closed.</font>" & _ \n           "<br><br>" & _ \n           "<u><B>Action Required</B></u>" & _ \n           "<br><br>" & _ \n           "<li>Please remove " & RefNo & " from the Merchant Tool database, by clicking on the RED cell, \nin the """ & SheetATORemainingAmount & """ sheet in the <a href=""" & URL & """>" & TName & \n".xlsm</a>.</li>" & _ \n           "<br><br>" & _ \n           Sig & _ \n           "<br></font>" \n \n    Flag = SendToEmail(Outlook, EmailTo, CC, Subject, Body, "") \n    StatMsg Flag, "|Creating Manager email" \n    If Not Flag Then \n        Set Outlook = Nothing \n        Exit Function \n    End If \n \n    Set Outlook = Nothing \n    StatMsg True, "Closing Outlook" \n \n    SendATORemainingEmail = True \nEnd Function'},
 {'page': 183,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 183 of 214 \n \n\u202f \n12. User Access Management \n \nUser Access Management is applicable for Merchant Garnishee Clearing Tool as per the Spreadsheet Governance \nFramework.   The Merchant Garnishee Clearing Tool is password encrypted and should follow the guidelines; \n \n \n \n12.1 Password Management \n \n• \nNew passwords or changes to existing passwords must be managed using a master control spreadsheet \n(team managers must create their own file using the attached file as template) \n• \nPasswords must be changed in the following instances: every 6 months, when the team restructures, \nmanager or delegate change roles, or as deemed necessary by the manager \n \nOnly Admin access has the ability to change passwords. The Change Password window is displayed by running \nthe ChangePassword macro directly. The macro will ask for the Admin password regardless of the current user \naccess level, before the window is displayed. \n \n \nFigure 57: Change Password Window \n \nEnter in a new password for both the Business User / Manager User and PPS File, ensuring the passwords meet \nthe requirements listed above. By default the expiry date is automatically set to expire every 6 months. If a \npassword requirement is not meet an error message is displayed advising which requirement was not met.  \n \nThe Tool will auto generate separate emails to be sent to the Business Users and Manager/Delegate Users \nadvising of the password changes and when they will take effect.'},
 {'page': 184,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 184 of 214 \n \n\u202f \n \nFigure 58: BU Password Email \n \n \n \nFigure 59: MU Password Email \n \nAt this point the Tool will also generate a User Access Review (UAR) Email to be sent to the Manager to review \nusers listed in the Access Table. Evidence of any changes will be stored in the support team folders.'},
 {'page': 185,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 185 of 214 \n \n\u202f \n \n \nFigure 60: UAR Email \n \n \n12.2 Access Required \n12.2.1 Adding/Removing Users \n \nA Change Request Template will need to be completed to add/remove Business or Manager/Delegate users within \nthe Merchant GarnisheeTool Access Table – Refer Appendix for copy of Change Request Template. \n \nOnce the change request template has been completed, email a copy to the PS Transformation \nPS_transformation@cba.com.au  group mailbox accompanied by Senior Management or Executive Management \nemail approval. \n \nStep \nAction  \n1 \nOpen the Change Request Template (also available from PS Transformation Team) \nChange Request - \nTemplate.xlsx\n \n2 \nComplete the fields in the ‘PSU Transformation – CR Template’  tab'},
 {'page': 186,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 186 of 214 \n \n\u202f \n \n3 \nIf Request Type is ‘Add/Remove User’ please ensure that fields in the ‘User Request’ tab are also \ncompleted \n \n \n4 \nEmail completed Change Request Template to Senior Manager or Executive Manager for approval'},
 {'page': 187,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 187 of 214 \n \n\u202f \n5 \nOnce approval has been granted forward the approval email and completed template to PS \nTransformation mailbox (PS_transformation@cba.com.au) for actioning \n6 \nStatus of the Change Request including the CR# will be communicated via a return email \n \n \n12.2.2 Group Data Warehouse (GDW) Roles \n \nAs a new GDW user you will need to apply for the below role via Identity.CBA (SailPoint) to obtain platform access. \n \n• \nTeradata Environment Access – Production \n \n \nRoles required to run Merchant Garnishee Tool SQL & Queries: \n• \nView Data – General ODS (via Identity.CBA (SailPoint) \n \nThe below table displays the Databases/Tables required by the Merchant GarnisheeTool. \n \nUDT Tool \nDatabase \nTable Name \nCDO Data Role (in Identity.CBA) \nMerchant \nGarnishee \nPVCBBJR \npayt_cmpn \nView Data - General ODS \nFigure 61: GDW Databases/Tables \n \nFollow the steps below to request access via Identity.CBA (SailPoint) application for each CDO \nData Role required \n \nStep\ns \nDescription \n1 \nOpen Identiy.CBA \n (SailPoint) SailPoint IdentityIQ - Home \n2 \nClick onto ‘Manage My Access’ \n \n \n \n3 \nIn the ‘Search Access’ field type CDO Data role name. Eg ‘Teradata Environment Access – Production’'},
 {'page': 188,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 188 of 214 \n \n\u202f \n \n4 \nClick the ‘tick’ to choose to add access. The tick will then turn green and a (1) will appear next to the \n‘Add Access’ heading. \n \n \nNote: If access has already been applied for the following message will appear. \n \n \n5 \nSelect the ‘Next’ button \n \n6 \nSelect the ‘Calendar Icon’ to input the date access is required for – the application will only allow a year \ntime frame. \n \n7 \nInput the Start/End dates required for access and click ‘Save’ \nNote: Start/End Date is a requirement for the data steward to approve your access. If the field is not \ncompleted your access will be denied. \nThe system usually only allows a 1 year date range.'},
 {'page': 189,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 189 of 214 \n \n\u202f \n \n \n \n8 \nSelect the ‘Comment Icon’ to input the reason access is required for. \n \n9 \nType the reason access is required for in the Comment field and click ‘Save’ \nNote: Comment is a requirement for the data steward to approve your access. If the field is not \ncompleted your access will be denied. \nEnsure to add the database and table required for the specific CDO Role in the comment. \nExample: \n• \nWhy do you need access? (Be specific and do not provide a generic response) - Access is \nrequired to run the Service Managed Application named Merchant Garnishee Tool - \nCM0993614 as a part of BAU process. \n \n• \nHow will the data be used? (Be specific and do not provide a generic response)- The tool \nextracts data from GDW via an SQL Query built within the tool. Credit Entries on \nMerchant Garnishee Accounts and corresponding POS terminals for a specific date are \nextracted via the the SQL. This data will assist the tool in calculating values to be \nreturned to customer and value to be returned to the Australian Taxation Department \n(ATO). The tool encrypts the data extracted and data is only eligible to individuals listed \nin the tools access table. \n• Who is the Project Manager (Project_Manager@cba.com.au)? If applicable – There is No \nProject Manager, process is part of BAU. \n• Databases/Table names: \nPVCBBJR.payt_cmpn (ViewData – General ODS) \n• \nDescription how each table will be used? What data is of interest? Data within this table will \nprovide an extract of credit entries on Merchant Garnishee Accounts that will assist the \ntool in calculating values to be returned to customer and value to be returned to the \nAustralian Taxation Department (ATO).'},
 {'page': 190,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 190 of 214 \n \n\u202f \n \n10 \nSelect ‘Submit’ \n \n11 \nRepeat for each CDO Role required \n \n \n12.2.3 SeleniumBasic Software Install \n \nWith Internet Explorer (IE) being retired in June 2022 by Microsoft, the tool will require SeleniumBasic Software & \nMicrosoft Edge Driver installation to enable continued execution of the tool. \n \nNOTE: Both Business users and Manager/Delegate users will be required to install Github SeleniumBasic \nW10.2.0.9.0.R01 & Microsoft Edge Driver. \n \n \nFollow the process below to install ‘Github SeleniumBasic W10.2.0.9.0.R01’ \n \nStep \nAction  \n1 \nOpen ‘Request IT’ Employee Self-Service Portal - Service-now.com                                            \n \n2 \nClick Software, Email, Applications & Access followed by Desktop Software'},
 {'page': 191,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 191 of 214 \n \n\u202f \n \n3 \nAs shown in the below screenshot: \n• \nInput your name \n• \nSelect the MS Windows desktop version you are currently running on \n• \nSelect ‘New Installation’ under Action Required heading and ‘Software’ under Installation Type \nheading \n• \nType ‘Github SeleniumBasic W10.2.0.9.0.R01’ in Software Catalogue Title heading \n \n4 \nClick Step 2 button'},
 {'page': 192,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 192 of 214 \n \n\u202f \n5 \nTick the box in the Important Information pop up window and click ‘ok’ \n \n6 \nInput PC Name, located under PC Info Tools icon and click ‘Checkout’ \n \n7 \nOpen SCCM Software Centre located in your start menu  \n \n8 \nType ‘Github SeleniumBasic W10.2.0.9.0.R01’ in the ‘search’ field and click on the software name to \ninstall the application. \nThis should only take a few minutes \n \nNote: You will not be able to see the application in the start menu once installed but can confirm install \nvia the ‘Status’ heading in SCCM. \nThe software is downloaded to users ‘C’ drive which will not be visible to those part of a lock down \nsite.'},
 {'page': 193,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 193 of 214 \n \n\u202f \n12.2.4 Microsoft Edge Driver Install \nBusiness users and Manager/Delegate users will be required to install the Microsoft Edge Driver to access the tool \nand enable tool interaction with applications such as Pega Payment System (PPS).  \n \nMicrosoft Edge Driver can be downloaded from the following location: I:\\COMMON\\SeleniumBasic\\copydriver.bat \n \nUsers will only be required to download the Microsoft Edge Driver once from the folder as any updated versions will \nbe downloaded via an automated macro in the tool itself.  \n \nIn the event that the Microsoft Edge Driver has failed to install for users, the tool will display an error message \nrelated to the missing Edge Driver. User will need to raise an incident via MyService Application – Refer 13.2 \nRaising Issues/Incidents & Change Requests. \n \nFor Admin Staff, a separate Macro has been saved within the VBA Code to trigger an update of the Edge Driver \nversion – refer below \n \n \n \nFigure 62: Edge Driver Download Macro \n \n \nManual Download of MS Edge Driver if Macro Script is blocked. \n \nSte\np \nAction  \n1 \nOpen a blank Edge page and click on ‘Settings’ toggle'},
 {'page': 194,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 194 of 214 \n \n\u202f \n  \n2 \nClick on ‘About Microsoft Edge’ \n \n3 \nCopy the version number. Eg 110.0.1587.46'},
 {'page': 195,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 195 of 214 \n \n\u202f \n \n4 \nCopy the version number into URL address: \nhttps://msedgedriver.azureedge.net/110.0.1587.46/edgedriver_win32.zip  \n5 \nPaste the created URL address into a blank tab in the searchbar \n \n6 \nFile will populate under ‘Downloads’ to the right  \n \n7 \nClick onto the ‘Folder’'},
 {'page': 196,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 196 of 214 \n \n\u202f \n \n \n8 \nOpen in unzip \n \n9 \nChoose ‘No, just show me the contents’ \n \n10 \nFile will be displayed as msedgedriver.exe. \nCopy the file into the I:\\COMMON\\SeleniumBasic'},
 {'page': 197,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 197 of 214 \n \n\u202f \n11 \nThe latest driver has now been installed in the I:\\COMMON\\SeleniumBasic folder for all business users \nto install and update their MS Edge version, in the event that the tool macro/scripts are blocked for the \nautomated process. \n \n12.2.5 Teradata  \nThis UDT retrieves data inputs from GDW via a Teradata SQL.  \nThe following software will need to be installed: \n• \nTeradata TTU 17.20.21 \n• \nTeradata SQL Assistant 16.20.00.13 \n \nNote: If you cannot locate the software in SCCM, you will need to request it via Request IT Employee Self-Service \nPortal - Service-now.com \n \nOnce the software is installed, it needs to be configured, refer Support Section.'},
 {'page': 198,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 198 of 214 \n \n\u202f \n13. Support \n13.1 Teradata Driver Configuration & GDW Data Encryption \n \n13.1.1 Teradata Driver Configuration \nThe following error message will display if the business user has not configured Teradata. \n \nFollow the steps below to configure Teradata. \nStep \nAction  \n1 \nClick onto the Windows Start Menu and locate Application ‘Teradata Client 16.20’     \n \n2 \nIn the drop down box select ‘Teradata SQL Assistant’                                            \n \n3 \nEnsure that your data provider has ‘ODBC’ selected                                              \n \n4 \nClick onto the ‘Tools’ heading and choose ‘Define ODBC Data Source’'},
 {'page': 199,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 199 of 214 \n \n\u202f \n \n5 \nIn the ODBC Data Source Administrator (32-bit) window click the ‘Add’ button to create new driver ’00 \nteradata_prod’ data source. \n \n6 \nScroll down and double click ‘Teradata Database ODBC Driver 16.20’ from the drop down box. \n \n7 \nThe following window will display – Teradata Database ODBC Driver 16.20 DSN Setup'},
 {'page': 200,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 200 of 214 \n \n\u202f \n \n8 \nInput the following data in the fields as shown below. \n• \nName & Description: 00 teradata prod \n• \nName or IP address: teradata.gdw.cba \n• \nChoose ‘EXTERNALBROWSER’ from the Mechanism drop down box \n• \nUsername: Type your LAN ID \n• \nSession Character Set: Choose ‘ASCII’ from the drop down box \n \n9 \nOnce you have input the Data Source, Teradata Server Info, Authentication & set the Session \nCharacter, click ‘OK’ \n10 \nYou should now be able to see the ’00 teradata prod’ driver set.  \nClick ‘OK’ on the ODBC Data Source Administrator (32-bit) popup window'},
 {'page': 201,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 201 of 214 \n \n\u202f \n  \n \n11 \nExit Teradata SQL Assistant - Process Complete \n12 \nAuthentication Method: \n• \nOpen UDT and log in as normal, type in your LAN ID password in the Teradata Login pop up. \n \n \n• \nEnsure your email address is displayed and click “Log in with SSO” button. \n \n \n• \nYou maybe prompted to input your LAN ID & Password. \n \n \n• \nAuthenticate'},
 {'page': 202,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 202 of 214 \n \n\u202f \n• \nThe following page should appear after successfully authentication, on which you can close \nthe browser window. \n \n \n \n \n13.1.2 GDW Data Encryption \nUsers executing User Developed Tools (UDTs) extracting data from Group Data Warehouse (GDW) via Teradata \nSQL Assistant will need to complete the following steps to ensure continued communication between Teradata \nclient/drivers and the Teradata Platform.   \nThe enforcement of Network Traffic Encryption on all Group Data Warehouse (GDW) data and connections are \nrequired to ensure compliance with CBA Group Cyber Security policies. \n \nStep \nAction  \n1 \nAccess the ‘Start’ menu and navigate to ‘Teradata Client 16.20’ or type ‘Teradata’ in the search \nfield. From the dropdown menu choose ‘Teradata SQL Assistant’ \n \n2 \nClick on the heading ‘Tools’ and choose ‘Define ODBC Data Source’ as shown below'},
 {'page': 203,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 203 of 214 \n \n\u202f \n \n3 \nClick on driver ‘00_teradata_prod’ to highlight and then click ‘Configure’ button \n \n4 \nClick ‘Options’ button on the following popup window to display Driver Options'},
 {'page': 204,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 204 of 214 \n \n\u202f \n \n5 \nTick ‘Enable Data Encryption’ box as shown below \n \n6 \nClick ‘OK’ button on all open popup windows \n7 \nProcess End \n \n13.1.3 Teradata Driver Configuration without SSO  \nIn the event that Teradata Driver ‘EXTERNALBROWSER’ is not compatible, following the steps below to configure \n‘TD2’ \nStep \nAction  \n1 \n• \nLog into Teradata via Teradata SQL Assistant using EXTERNALBROWSER with SSO'},
 {'page': 205,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 205 of 214 \n \n\u202f \n• \nClick onto the green Connect Button \n \n• \nClick Machine Data Source tab \n• \nSelect 00_teradata_prod \n• \nPress ok \n  \n \n• \nEnsure your email address is displayed and click “Log in with SSO” button. \n \n \n• \nYou maybe prompted to input your LAN ID & Password. \n \n \n• \nAuthenticate \n \n \n• \nThe following page should appear after successfully authentication, on which you can close \nthe browser window.'},
 {'page': 206,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 206 of 214 \n \n\u202f \n \n2 \n• \nOnce logged in, copy/paste the below SQL into the window. \n           MODIFY USER lanid AS PASSWORD = "newpassword"; \n \n• Replacing lanid and newpassword with your current LanID password and add 2 \nextra characters (i.e. newpassword must be 16 characters in length).'},
 {'page': 207,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 207 of 214 \n \n\u202f \n• Press the Execute button (green steps) \n \n3 \nChange 00_teradata_prod configuration from EXTERNALBROWSER to TD2 \n \n4 \nProcess Complete \n \n \n13.2 Raising Issues/Incidents & Change Requests \nAs this tool is a Serviced Managed Application, the below processes should be followed to raise any \nissues/incidents or change requests. \n \n13.2.1 Raising Issues/Incidents \n \nThe Configuration ID to be used when raising an incident on the Merchant Garnishee Tool is CI000110145. \n \n \nConfiguration ID - \nMyService \nConfiguration ID - \nServiceNow \nParent CI - User Developed Tools - PSU UDTs \nCM0993926 \nCI000111674 \nChild CI - Merchant Garnishee Tool  \nCM0993614 \nCI000110145 \n \n \n \nWhen issues or error messages occur within the tool, users will need to raise an incident to Service Management – \nEnabling Technology Team for investigation and assistance via one of the following channels: \n \n• \nCall IT Service Desk: 1800 694 873 and advise the following: \n- \nIncident assignment group: CBA_PSU_UDT_Enabling_Tech \n- \nConfiguration ID: CI000110145 \n- \nDescription of issue/error message \n \n• \nServiceNow Portal: Please note that only authorised users attached to an SPG will have the capability to \nraise an incident via ServiceNow portal - https://cba.service-now.com/'},
 {'page': 208,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 208 of 214 \n \n\u202f \n \n \n \n \n \n \n \n \n \n13.2.2 Completing a Change Request Template \n \nChange Request Templates are to be used for: \n• \nTool Enhancements \n• \nAdd/Remove Business Users \n• \nAdd/Remove Manager/Delegate Users \n• \nUpdate Email Distribution Lists \n \nOnce the change request template has been completed, email a copy to the PS Transformation \nPS_transformation@cba.com.au  group mailbox accompanied by Senior Management or Executive Management \nemail approval. \n \nStep \nAction  \n1 \nOpen the Change Request Template (also available from PS Transformation Team) \nChange Request - \nTemplate.xlsx\n \n2 \nComplete the fields in the ‘PSU Transformation – CR Template’  tab'},
 {'page': 209,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 209 of 214 \n \n\u202f \n \n3 \nIf Request Type is ‘Add/Remove User’ please ensure that fields in the ‘User Request’ tab are also \ncompleted \n \n \n4 \nEmail completed Change Request Template to Senior Manager or Executive Manager for approval'},
 {'page': 210,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 210 of 214 \n \n\u202f \n5 \nOnce approval has been granted forward the approval email and completed template to PS \nTransformation mailbox (PS_transformation@cba.com.au) for actioning \n6 \nStatus of the Change Request including the CR# will be communicated via a return email \n \n13.3 Supporting - ASR Block Event Troubleshooting Guide \nAttack Surface Reduction rules (ASR rules) help prevent actions that malware often abuses to compromise devices \nand networks. It was a part of the Essential 8 User Application Hardening (UAH) project, but has unfortunately \nblocked some activities on users PC’s when running User Developed Tools (UDTs). \nBelow are a sample of error messages that the user may experience when accessing the UDT with an ASR block \npresent.  \n \nNote: Error messages are not limited to the samples provided below. \n \nMany error messages received will not inform the user they relate to an ASR Block. The ‘ShowASR Permissions.xlsm \nfile has been created to give users the ability to self-check ASR Permissions on their machine.  \n \n➢ Navigate to I:\\COMMON\\SeleniumBasic\\ASR Check \n➢ Open file ‘ShowASR Permissions.xlsm’  \n➢ Clear Sheet and click ‘Show ASR Permissions’ button \n➢ A listing of ASR Rules will generate.  \n \nNote: Actual Values versus Preferred Values should match. Eg. 1 to 1 or 2 to 2. If values differ especially \nfor ‘Block Win32 API calls from Office macros’, an ASR Block is present on the user’s machine.'},
 {'page': 211,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 211 of 214 \n \n\u202f \n \n \n➢ Below is a listing of common blocks users may experience \n \n1.           Block Office applications from creating executable content (OEC) \n               AD Group - SGG-GPF-WindowsDefenderASR-OEC \n2.           Block Office applications from injecting code into other processes (OIC) \n               AD Group - SGG-GPF-WindowsDefenderASR-OIC \n3.           Block all Office applications from creating child processes (OCP) \n               AD Group - SGG-GPF-WindowsDefenderASR-OCP        \n4.           Block Win32 API calls from Office macros (W32) \n               AD Group - SGG-GPF-WindowsDefenderASR-W32 \n5.           Block Office communication application from creating child processes (OCA) \n               AD Group - SGG-GPF-WindowsDefenderASR-OCA \n \n➢ Proceed to subsection “Requesting an Exemption for ASR Block” to apply for an ASR exemption. \n13.4    Requesting an Exemption for ASR Block \n     Follow the steps below to apply for an ASR Block exemption on your PC. \nStep \nAction \n1 \nCall the IT Service Desk and raise an incident. Advise the agent that you are unable to access Microsoft excel \nmacros due to an ASR Block and that you require an exemption. \n2 \nProvide the agent with Knowledge Article number KB0060579 or the following link for reference. This \narticle outlines the steps that the agent must complete to verify and validate the ASR Block before \nraising your request for exemption. \nIT Service Desk - Supporting - ASR Block Event Troubleshooting Guide (service-now.com) \n3 \nIf an ASR Block is identified, the agent will create an incident ticket and assign it to CBA_ES_EDR team for \nactioning. \n \nThe agent is required to collect the following information.  \nNote: Majority of the details will be collected by the agent while verifying the ASR Block process in \nKnowledge Article KB0060579 \n• \nError message from application (user to provide) \n• \nASR Block Event (Event ID 1121) exists for the issue. Screenshot the ASR Block Event and \nattach it to the incident (agent to provide) \n• \nDetails of what the end-user is trying to do, and when it was last working (user to provide) \n• \nASR Exemption template as below. \no \nBusiness Unit Affected: (user to provide)'},
 {'page': 212,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 212 of 214 \n \n\u202f \no \nDevice Name: (user to provide PC Name here) \no \nIf previous Pact raised state here: (user to provide this Pact ID PER0007555) \no \nBusiness Justification: (user to provide the following commentary) - ASR block \nexemptions are required to run UDTs for BAU work. UDTs are an essential part of the \nCBA Operations function that perform large volumes of financial transactions and \nreconciliations. UDTs not being run on a daily basis will impact the ability for users to \nprocess customer payments resulting in customer complaints and non-compliance \nwith banking industry SLAs.  \n \n13.5    Automation Error \nThe Automation error relates to a .NET 3.5 Framework piece of software developed by Microsoft, that primarily \nruns on Microsoft Windows.  \nTo remediate the error messages below, user will need to install “Microsoft NET Framework-install \nW10.3.5.R01” from the Software Centre.'},
 {'page': 213,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 213 of 214 \n \n\u202f \n \n \n \n \n \n14. Appendix  \n14.1 Spreadsheet Password Register \nPS Spreadsheet \nPassword Register.xlsx \n \n14.2 Merchant Garnishee PKW Model \n \n14.3 Change Request Template \nChange Request - \nTemplate.xlsx\n \n \n14.4 Sample Files \n \nOutput- PPS Input File'},
 {'page': 214,
  'text': '© Commonwealth Bank of Australia 2009 - ABN 48 123 123 124 \nFunctional Understanding Document – Merchant Garnishee Tool \nConfidential \n \n \n29-Nov-24 \nPage 214 of 214 \n \n\u202f \n \n \nFigure 63: PPS Output file'}]
